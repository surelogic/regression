Path: C:\qa\test\eclipse\plugins\edu.cmu.cs.fluid_4.3.3.201210311058\lib\runtime\log4j-xml-1.3alpha-8.jar
Path: C:\qa\test\eclipse\plugins\com.surelogic.jsure.tests_1.0.0\lib\jdom.jar
Path: C:\qa\test\eclipse\plugins\com.surelogic.common_4.3.3.201210311058\lib\runtime\asm-4.0.jar
Path: C:\qa\test\eclipse\plugins\com.surelogic.common_4.3.3.201210311058\lib\runtime\derby.jar
Path: C:\qa\test\eclipse\plugins\com.surelogic.common_4.3.3.201210311058\lib\runtime\collections-generic-4.0.jar
Path: C:\qa\test\eclipse\plugins\edu.cmu.cs.fluid_4.3.3.201210311058\lib\runtime\java-diff-utils-1.2.jar
Path: C:\qa\test\eclipse\plugins\edu.cmu.cs.fluid_4.3.3.201210311058\lib\runtime\sablejbdd-0.02.jar
Path: C:\qa\test\eclipse\plugins\com.surelogic.common_4.3.3.201210311058\lib\runtime\jsr166xy_java5.jar
Path: C:\qa\test\eclipse\plugins\com.surelogic.common_4.3.3.201210311058\lib\runtime\asm-commons-4.0.jar
Path: C:\qa\test\eclipse\plugins\com.surelogic.common_4.3.3.201210311058
Path: C:\qa\test\eclipse\plugins\com.surelogic.common_4.3.3.201210311058\lib\runtime\promises-4.3.4.jar
Path: C:\qa\test\eclipse\plugins\com.surelogic.jsure.tests_1.0.0\lib\ant-junit.jar
Path: C:\qa\test\eclipse\plugins\edu.cmu.cs.fluid_4.3.3.201210311058\lib\runtime\javadoc.jar
Path: C:\qa\test\eclipse\plugins\com.surelogic.common_4.3.3.201210311058\lib\runtime\antlr-runtime-3.1-sl.jar
Path: C:\qa\test\eclipse\plugins\edu.cmu.cs.fluid_4.3.3.201210311058
Path: C:\qa\test\eclipse\plugins\com.surelogic.jsure.tests_1.0.0\lib\ant.jar
Path: C:\qa\test\eclipse\plugins\com.surelogic.jsure.tests_1.0.0
Path: C:\qa\test\eclipse\plugins\edu.cmu.cs.fluid_4.3.3.201210311058\lib\runtime\javac.jar
Path: C:\qa\test\eclipse\plugins\edu.cmu.cs.fluid_4.3.3.201210311058\lib\runtime\log4j-1.3alpha-8.jar
Path: C:\qa\test\eclipse\plugins\org.junit_4.8.2.v4_8_2_v20110321-1705\junit.jar
Path: C:\qa\test\eclipse\plugins\com.surelogic.common_4.3.3.201210311058\lib\runtime\commons-lang3-3.0.jar
Path: C:\qa\test\eclipse\plugins\com.surelogic.common_4.3.3.201210311058\lib\runtime\ant.jar
Path: C:\qa\test\eclipse\plugins\com.surelogic.jsure.tests_1.0.0\lib\maven-ant-tasks-2.1.3.jar
Starting process:
	C:\Program Files\Java\jdk1.6.0_31\jre\bin\java.exe
	-Dsurelogic.test.code=NONE
	-XX:MaxPermSize=256m
	-Dfluid.ir.versioning=Versioning.Off
	-DAnnotationRules.label=RemoteJSureRun.AnnotationRules
	-Ddc.testing=true
	-Djsure.run.dir=C:\qa\test\workspaces\regression\TestLockSanityChecks\.jsure-data\TestLockSanityChecks 2012-10-31 11-25-29
	-Dfluid.directory.url=file:/C:/qa/test/eclipse/plugins/edu.cmu.cs.fluid_4.3.3.201210311058/
	-XX:+UseCompressedOops
	-verbosegc
	-Xmx2048m
	-classpath
	C:\qa\test\eclipse\plugins\edu.cmu.cs.fluid_4.3.3.201210311058\lib\runtime\log4j-xml-1.3alpha-8.jar;C:\qa\test\eclipse\plugins\com.surelogic.jsure.tests_1.0.0\lib\jdom.jar;C:\qa\test\eclipse\plugins\com.surelogic.common_4.3.3.201210311058\lib\runtime\asm-4.0.jar;C:\qa\test\eclipse\plugins\com.surelogic.common_4.3.3.201210311058\lib\runtime\derby.jar;C:\qa\test\eclipse\plugins\com.surelogic.common_4.3.3.201210311058\lib\runtime\collections-generic-4.0.jar;C:\qa\test\eclipse\plugins\edu.cmu.cs.fluid_4.3.3.201210311058\lib\runtime\java-diff-utils-1.2.jar;C:\qa\test\eclipse\plugins\edu.cmu.cs.fluid_4.3.3.201210311058\lib\runtime\sablejbdd-0.02.jar;C:\qa\test\eclipse\plugins\com.surelogic.common_4.3.3.201210311058\lib\runtime\jsr166xy_java5.jar;C:\qa\test\eclipse\plugins\com.surelogic.common_4.3.3.201210311058\lib\runtime\asm-commons-4.0.jar;C:\qa\test\eclipse\plugins\com.surelogic.common_4.3.3.201210311058;C:\qa\test\eclipse\plugins\com.surelogic.common_4.3.3.201210311058\lib\runtime\promises-4.3.4.jar;C:\qa\test\eclipse\plugins\com.surelogic.jsure.tests_1.0.0\lib\ant-junit.jar;C:\qa\test\eclipse\plugins\edu.cmu.cs.fluid_4.3.3.201210311058\lib\runtime\javadoc.jar;C:\qa\test\eclipse\plugins\com.surelogic.common_4.3.3.201210311058\lib\runtime\antlr-runtime-3.1-sl.jar;C:\qa\test\eclipse\plugins\edu.cmu.cs.fluid_4.3.3.201210311058;C:\qa\test\eclipse\plugins\com.surelogic.jsure.tests_1.0.0\lib\ant.jar;C:\qa\test\eclipse\plugins\com.surelogic.jsure.tests_1.0.0;C:\qa\test\eclipse\plugins\edu.cmu.cs.fluid_4.3.3.201210311058\lib\runtime\javac.jar;C:\qa\test\eclipse\plugins\edu.cmu.cs.fluid_4.3.3.201210311058\lib\runtime\log4j-1.3alpha-8.jar;C:\qa\test\eclipse\plugins\org.junit_4.8.2.v4_8_2_v20110321-1705\junit.jar;C:\qa\test\eclipse\plugins\com.surelogic.common_4.3.3.201210311058\lib\runtime\commons-lang3-3.0.jar;C:\qa\test\eclipse\plugins\com.surelogic.common_4.3.3.201210311058\lib\runtime\ant.jar;C:\qa\test\eclipse\plugins\com.surelogic.jsure.tests_1.0.0\lib\maven-ant-tasks-2.1.3.jar
	com.surelogic.jsure.tests.RemoteJSureRunTest
First line = JVM started: 1.6.0_31
Log level: INFO
Created reader
Created monitor
Created log handler
Setting up XML output
Javac set edu.cmu.cs.fluid.default.JRE to 
Javac set edu.cmu.cs.fluid.analysis.thread.count to 8
Javac set com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.IRConcurrencyDetector to true
Javac set com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.ThreadEffectAssurance2 to true
Javac set com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.LayersAssurance to true
Javac set com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.EffectAssurance2 to true
Javac set com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.ParameterizedType to true
Javac set com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.LockAssurance3 to true
Javac set com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.EqualityAssurance to true
Javac set com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.UniquenessAssuranceUWM to false
Javac set com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.UniquenessAssuranceUWM_ALL to false
Javac set com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.UniquenessAssuranceUWM_SE to true
Javac set com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.UniquenessAssuranceSE to false
Javac set com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.NonNull to false
Javac set com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.RawTypes to false
Javac set com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.DefinitelyAssigned to false
Javac set com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.LV to false
Javac set com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.BCA to false
Javac set com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.CALLS to false
Javac set com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.BenchmarkingUniquenessNew to false
Javac set com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.BenchmarkingUniquenessNew_SE to false
Javac set com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.BenchmarkingUniquenessSE to false
Javac set com.surelogic.jsure.active.com.surelogic.jsure.cliend.eclipse.TypeBasedAlias to false
Javac set com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.Types to false
Javac set com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.Utility to true
Javac set com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.Singleton to true
Running RemoteJSureRunTest
runPath = C:\qa\test\workspaces\regression\TestLockSanityChecks\.jsure-data\TestLockSanityChecks 2012-10-31 11-25-29
Creating run
Javac set edu.cmu.cs.fluid.default.JRE to org.eclipse.jdt.launching.JRE_CONTAINER
run = TestLockSanityChecks 2012-10-31 11-25-29
projects = TestLockSanityChecks
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.UniquenessAssuranceUWM = true
Loading edu.cmu.cs.fluid.xml.diff.directory = C:\qa\test\workspaces\regression\TestLockSanityChecks\.jsure-data\promises-xml
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.BenchmarkingUniquenessSE = false
Loading edu.cmu.cs.fluid.load.all.classes = false
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.IRConcurrencyDetector = false
Loading edu.cmu.cs.fluid.timeoutSec = 60
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.LV = false
Loading edu.cmu.cs.fluid.timeoutWarningSec = 30
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.BCA = false
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.LockAssurance3 = true
Loading edu.cmu.cs.fluid.data.directory = C:\qa\test\workspaces\regression\TestLockSanityChecks\.jsure-data
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.EffectAssurance2 = true
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.Singleton = true
Loading edu.cmu.cs.fluid.allow.javadoc.annos = false
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.UniquenessAssuranceUWM_SE = false
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.UniquenessAssuranceSE = false
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.DefinitelyAssigned = false
Loading edu.cmu.cs.fluid.modeling.problem.filters = 00000012com\.apple.*00000013com\.oracle.*00000010com\.sun.*00000014.*\.internal.*00000023.*BakedArrayList\.class00000007apple.*00000008oracle.*00000011quicktime.*00000005sun.*
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.Types = false
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.ThreadEffectAssurance2 = true
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.LayersAssurance = true
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.BenchmarkingUniquenessNew = false
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.BenchmarkingUniquenessNew_SE = false
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.RawTypes = false
Loading com.surelogic.jsure.active.com.surelogic.jsure.cliend.eclipse.TypeBasedAlias = false
Loading edu.cmu.cs.fluid.analysis.thread.count = 8
Loading edu.cmu.cs.fluid.default.JRE = org.eclipse.jdt.launching.JRE_CONTAINER
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.Utility = true
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.UniquenessAssuranceUWM_ALL = false
Loading edu.cmu.cs.fluid.tool-memory-mb = 2048
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.NonNull = false
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.EqualityAssurance = true
Loading edu.cmu.cs.fluid.timeoutFlag = true
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.ParameterizedType = true
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.CALLS = false
JSure data dir = C:\qa\test\workspaces\regression\TestLockSanityChecks\.jsure-data
XML diff dir   = C:\qa\test\workspaces\regression\TestLockSanityChecks\.jsure-data\promises-xml
Looking for JRE in org.eclipse.jdt.launching.JRE_CONTAINER
default JRE = org.eclipse.jdt.launching.JRE_CONTAINER
Javac set edu.cmu.cs.fluid.default.JRE to org.eclipse.jdt.launching.JRE_CONTAINER
Initialized job
##TASK, Scan, 62
Initializing ...
##SUBTASK, Initializing ...
monitor = com.surelogic.common.jobs.remote.AbstractRemoteSLJob$Monitor@13a78071
singleThread = false
[GC 32725K->7981K(125504K), 0.0050206 secs]
Done initializing org.eclipse.jdt.launching.JRE_CONTAINER: 0
org.eclipse.jdt.launching.JRE_CONTAINER: Done initializing with C:\Program Files\Java\jdk1.6.0_31\jre\lib\resources.jar
[GC 40749K->28758K(125504K), 0.0219568 secs]
org.eclipse.jdt.launching.JRE_CONTAINER: Done initializing with C:\Program Files\Java\jdk1.6.0_31\jre\lib\rt.jar
org.eclipse.jdt.launching.JRE_CONTAINER: Done initializing with C:\Program Files\Java\jdk1.6.0_31\jre\lib\jsse.jar
org.eclipse.jdt.launching.JRE_CONTAINER: Done initializing with C:\Program Files\Java\jdk1.6.0_31\jre\lib\jce.jar
org.eclipse.jdt.launching.JRE_CONTAINER: Done initializing with C:\Program Files\Java\jdk1.6.0_31\jre\lib\charsets.jar
org.eclipse.jdt.launching.JRE_CONTAINER: Done initializing with C:\Program Files\Java\jdk1.6.0_31\jre\lib\ext\dnsns.jar
org.eclipse.jdt.launching.JRE_CONTAINER: Done initializing with C:\Program Files\Java\jdk1.6.0_31\jre\lib\ext\localedata.jar
org.eclipse.jdt.launching.JRE_CONTAINER: Done initializing with C:\Program Files\Java\jdk1.6.0_31\jre\lib\ext\sunjce_provider.jar
Done initializing TestLockSanityChecks: 55
TestLockSanityChecks: TestLockSanityChecks -> org.eclipse.jdt.launching.JRE_CONTAINER
Done initializing org.eclipse.jdt.launching.JRE_CONTAINER: 0
TestLockSanityChecks: Done initializing with C:\Program Files\Java\jdk1.6.0_31\jre\lib\resources.jar
TestLockSanityChecks: Done initializing with C:\Program Files\Java\jdk1.6.0_31\jre\lib\rt.jar
TestLockSanityChecks: Done initializing with C:\Program Files\Java\jdk1.6.0_31\jre\lib\jsse.jar
TestLockSanityChecks: Done initializing with C:\Program Files\Java\jdk1.6.0_31\jre\lib\jce.jar
TestLockSanityChecks: Done initializing with C:\Program Files\Java\jdk1.6.0_31\jre\lib\charsets.jar
TestLockSanityChecks: Done initializing with C:\Program Files\Java\jdk1.6.0_31\jre\lib\ext\dnsns.jar
TestLockSanityChecks: Done initializing with C:\Program Files\Java\jdk1.6.0_31\jre\lib\ext\localedata.jar
TestLockSanityChecks: Done initializing with C:\Program Files\Java\jdk1.6.0_31\jre\lib\ext\sunjce_provider.jar
TestLockSanityChecks: Done initializing with C:\qa\test\suites\regression\TestLockSanityChecks\promises-4.0.0.jar
Created com.surelogic.analysis.threads.ThreadEffectsModule
Created com.surelogic.analysis.layers.LayersAnalysis
Created com.surelogic.analysis.effects.EffectsAnalysis
Created com.surelogic.analysis.annotationbounds.ParameterizedTypeAnalysis
Created com.surelogic.analysis.concurrency.driver.LockAnalysis
Created com.surelogic.analysis.equality.EqualityAnalysis
Created com.surelogic.analysis.uniqueness.plusFrom.traditional.UniquenessAnalysisModule
Created com.surelogic.analysis.utility.UtilityAnalysis
Created com.surelogic.analysis.singleton.SingletonAnalysis
##SUBTASK_DONE
##WORK, 1
Assuming that the projects are run in dependency order
Parsing ...
##SUBTASK, Parsing ...
Done adapting 0 files for org.eclipse.jdt.launching.JRE_CONTAINER
##SUBTASK_DONE
##WORK, 1
Parsing ...
##SUBTASK, Parsing ...
JCP: warning: [options] bootstrap class path not set in conjunction with -source 1.5
[GC 61526K->35848K(125504K), 0.0079433 secs]
Adapting 55 CUTs
Done adapting 55 files for TestLockSanityChecks
##SUBTASK_DONE
##WORK, 1
Handling references for org.eclipse.jdt.launching.JRE_CONTAINER
##SUBTASK, Handling references for org.eclipse.jdt.launching.JRE_CONTAINER
Handling 19 dangling refs for org.eclipse.jdt.launching.JRE_CONTAINER
Setting project for Object from org.eclipse.jdt.launching.JRE_CONTAINER
Handling 34 dangling refs for org.eclipse.jdt.launching.JRE_CONTAINER
Handling 47 dangling refs for org.eclipse.jdt.launching.JRE_CONTAINER
Handling 58 dangling refs for org.eclipse.jdt.launching.JRE_CONTAINER
Handling 26 dangling refs for org.eclipse.jdt.launching.JRE_CONTAINER
[GC 68616K->43507K(158272K), 0.0222751 secs]
Handling 11 dangling refs for org.eclipse.jdt.launching.JRE_CONTAINER
Handling 3 dangling refs for org.eclipse.jdt.launching.JRE_CONTAINER
Handling 2 dangling refs for org.eclipse.jdt.launching.JRE_CONTAINER
##SUBTASK_DONE
##WORK, 1
Handling references for TestLockSanityChecks
##SUBTASK, Handling references for TestLockSanityChecks
Handling 31 dangling refs for TestLockSanityChecks
Handling 3 dangling refs for TestLockSanityChecks
Handling 1 dangling refs for org.eclipse.jdt.launching.JRE_CONTAINER
Handling 2 dangling refs for org.eclipse.jdt.launching.JRE_CONTAINER
##SUBTASK_DONE
##WORK, 1
Updated 206 files in org.eclipse.jdt.launching.JRE_CONTAINER
Updated 89 files in TestLockSanityChecks
Rewriting CUs
##SUBTASK, Rewriting CUs
Rewriting TestLockSanityChecks/src/test_lock_field/Other.java
Rewriting TestLockSanityChecks/src/test_lock_region/LockViz.java
Rewriting TestLockSanityChecks/src/inherited_region/good/Good3.java
Rewriting TestLockSanityChecks/src/inherited_region/Instance/BadRoot1.java
Rewriting TestLockSanityChecks/src/test_lock_region/Other.java
Rewriting TestLockSanityChecks/src/inherited_region/baseCase/Good1.java
Rewriting TestLockSanityChecks/src/test_lock_field/D.java
Rewriting TestLockSanityChecks/src/test_unique_names/C1.java
Rewriting TestLockSanityChecks/src/test_lock_region/Parent.java
Rewriting TestLockSanityChecks/src/test_requires_lock/StateLock_visibility.java
Rewriting TestLockSanityChecks/src/test_lock_field/B.java
Rewriting TestLockSanityChecks/src/test_lock_region/LockVizJUC.java
Rewriting TestLockSanityChecks/src/test_returns_lock/C.java
Rewriting TestLockSanityChecks/src/test_requires_lock/Other1.java
Rewriting TestLockSanityChecks/src/inherited_region/good/Good4.java
Rewriting TestLockSanityChecks/src/twoLocksOneRegion/unrelatedClasses/Test2.java
Rewriting TestLockSanityChecks/src/test_requires_lock/C_Policy.java
Rewriting TestLockSanityChecks/src/twoLocksOneRegion/unrelatedClasses/Test.java
Rewriting TestLockSanityChecks/src/test_lock_region/B.java
Rewriting TestLockSanityChecks/src/test_requires_lock/CannotRequireRWLock.java
Rewriting TestLockSanityChecks/src/test_requires_lock/D.java
Rewriting TestLockSanityChecks/src/test_returns_lock/PLock.java
Rewriting TestLockSanityChecks/src/test_lock_field/C.java
Rewriting TestLockSanityChecks/src/test_lock_region/ProtectInheritedRegion.java
Rewriting TestLockSanityChecks/src/test_requires_lock/PolicyLock_visibility.java
Rewriting TestLockSanityChecks/src/test_unique_names/StateVsPolicyLocks.java
Rewriting TestLockSanityChecks/src/inherited_region/Subregion/Bad3.java
Rewriting TestLockSanityChecks/src/qualified_receivers_as_locks/Outer.java
Rewriting TestLockSanityChecks/src/test_unique_names/BadC2.java
Rewriting TestLockSanityChecks/src/test_lock_region/GreatGrandparent.java
Rewriting TestLockSanityChecks/src/test_lock_field/A.java
Rewriting TestLockSanityChecks/src/inherited_region/good/GoodRoot.java
Rewriting TestLockSanityChecks/src/test_lock_region/C.java
Rewriting TestLockSanityChecks/src/inherited_region/Instance/Bad1.java
Rewriting TestLockSanityChecks/src/inherited_region/Subregion/Bad2.java
Rewriting TestLockSanityChecks/src/test_requires_lock/PolicyLock_LockNames.java
Rewriting TestLockSanityChecks/src/test_requires_lock/TestDuplicates.java
Rewriting TestLockSanityChecks/src/test_requires_lock/Root.java
Rewriting TestLockSanityChecks/src/twoLocksOneRegion/inherited/Super.java
Rewriting TestLockSanityChecks/src/test_returns_lock/StateLock.java
Rewriting TestLockSanityChecks/src/twoLocksOneRegion/inherited/Duper.java
Rewriting TestLockSanityChecks/src/test_unique_names/GoodC3.java
Rewriting TestLockSanityChecks/src/test_unique_names/BadC3.java
Rewriting TestLockSanityChecks/src/test_lock_region/D.java
Rewriting TestLockSanityChecks/src/test_requires_lock/PolicyLock_Constructor.java
Rewriting TestLockSanityChecks/src/twoLocksOneRegion/sameClass/Bad.java
Rewriting TestLockSanityChecks/src/test_returns_lock/C_Policy.java
Rewriting TestLockSanityChecks/src/test_requires_lock/StateLock_LockNames.java
Rewriting TestLockSanityChecks/src/inherited_region/Subregion/BadRoot2.java
Rewriting TestLockSanityChecks/src/test_requires_lock/StateLock_Constructor.java
Rewriting TestLockSanityChecks/src/inherited_region/good/Good2.java
Rewriting TestLockSanityChecks/src/test_requires_lock/C.java
Rewriting TestLockSanityChecks/src/test_lock_region/Grandparent.java
Rewriting TestLockSanityChecks/src/test_requires_lock/TestImprovedMessages.java
Rewriting TestLockSanityChecks/src/test_unique_names/GoodC2.java
##SUBTASK_DONE
##WORK, 1
Handling references for TestLockSanityChecks
##SUBTASK, Handling references for TestLockSanityChecks
Handling 19 dangling refs for TestLockSanityChecks
##SUBTASK_DONE
##WORK, 1
Handling references for org.eclipse.jdt.launching.JRE_CONTAINER
##SUBTASK, Handling references for org.eclipse.jdt.launching.JRE_CONTAINER
Handling 19 dangling refs for org.eclipse.jdt.launching.JRE_CONTAINER
##SUBTASK_DONE
##WORK, 1
Updated 206 files in org.eclipse.jdt.launching.JRE_CONTAINER
Updated 89 files in TestLockSanityChecks
Canonicalizing ASTs
##SUBTASK, Canonicalizing ASTs
Binding = 110 ms
Canonicalizing TestLockSanityChecks/src/test_lock_field/Other.java
Canonicalizing TestLockSanityChecks/src/test_lock_region/LockViz.java
Canonicalizing TestLockSanityChecks/src/inherited_region/good/Good3.java
Canonicalizing TestLockSanityChecks/src/inherited_region/Instance/BadRoot1.java
Canonicalizing TestLockSanityChecks/src/test_lock_region/Other.java
Canonicalizing TestLockSanityChecks/src/inherited_region/baseCase/Good1.java
Canonicalizing TestLockSanityChecks/src/test_lock_field/D.java
Canonicalizing TestLockSanityChecks/src/test_unique_names/C1.java
Canonicalizing TestLockSanityChecks/src/test_lock_region/Parent.java
Canonicalizing TestLockSanityChecks/src/test_requires_lock/StateLock_visibility.java
Canonicalizing TestLockSanityChecks/src/test_lock_field/B.java
Canonicalizing TestLockSanityChecks/src/test_lock_region/LockVizJUC.java
Canonicalizing TestLockSanityChecks/src/test_returns_lock/C.java
Canonicalizing TestLockSanityChecks/src/test_requires_lock/Other1.java
Canonicalizing TestLockSanityChecks/src/inherited_region/good/Good4.java
Canonicalizing TestLockSanityChecks/src/twoLocksOneRegion/unrelatedClasses/Test2.java
Canonicalizing TestLockSanityChecks/src/test_requires_lock/C_Policy.java
Canonicalizing TestLockSanityChecks/src/twoLocksOneRegion/unrelatedClasses/Test.java
Canonicalizing TestLockSanityChecks/src/test_lock_region/B.java
Canonicalizing TestLockSanityChecks/src/test_requires_lock/CannotRequireRWLock.java
Canonicalizing TestLockSanityChecks/src/test_requires_lock/D.java
Canonicalizing TestLockSanityChecks/src/test_returns_lock/PLock.java
Canonicalizing TestLockSanityChecks/src/test_lock_field/C.java
Canonicalizing TestLockSanityChecks/src/test_lock_region/ProtectInheritedRegion.java
Canonicalizing TestLockSanityChecks/src/test_requires_lock/PolicyLock_visibility.java
Canonicalizing TestLockSanityChecks/src/test_unique_names/StateVsPolicyLocks.java
Canonicalizing TestLockSanityChecks/src/inherited_region/Subregion/Bad3.java
Canonicalizing TestLockSanityChecks/src/qualified_receivers_as_locks/Outer.java
Canonicalizing TestLockSanityChecks/src/test_unique_names/BadC2.java
Canonicalizing TestLockSanityChecks/src/test_lock_region/GreatGrandparent.java
Canonicalizing TestLockSanityChecks/src/test_lock_field/A.java
Canonicalizing TestLockSanityChecks/src/inherited_region/good/GoodRoot.java
Canonicalizing TestLockSanityChecks/src/test_lock_region/C.java
Canonicalizing TestLockSanityChecks/src/inherited_region/Instance/Bad1.java
Canonicalizing TestLockSanityChecks/src/inherited_region/Subregion/Bad2.java
Canonicalizing TestLockSanityChecks/src/test_requires_lock/PolicyLock_LockNames.java
Canonicalizing TestLockSanityChecks/src/test_requires_lock/TestDuplicates.java
Canonicalizing TestLockSanityChecks/src/test_requires_lock/Root.java
Canonicalizing TestLockSanityChecks/src/twoLocksOneRegion/inherited/Super.java
Canonicalizing TestLockSanityChecks/src/test_returns_lock/StateLock.java
Canonicalizing TestLockSanityChecks/src/twoLocksOneRegion/inherited/Duper.java
Canonicalizing TestLockSanityChecks/src/test_unique_names/GoodC3.java
Canonicalizing TestLockSanityChecks/src/test_unique_names/BadC3.java
Canonicalizing TestLockSanityChecks/src/test_lock_region/D.java
Canonicalizing TestLockSanityChecks/src/test_requires_lock/PolicyLock_Constructor.java
Canonicalizing TestLockSanityChecks/src/twoLocksOneRegion/sameClass/Bad.java
Canonicalizing TestLockSanityChecks/src/test_returns_lock/C_Policy.java
Canonicalizing TestLockSanityChecks/src/test_requires_lock/StateLock_LockNames.java
Canonicalizing TestLockSanityChecks/src/inherited_region/Subregion/BadRoot2.java
Canonicalizing TestLockSanityChecks/src/test_requires_lock/StateLock_Constructor.java
Canonicalizing TestLockSanityChecks/src/inherited_region/good/Good2.java
Canonicalizing TestLockSanityChecks/src/test_requires_lock/C.java
Canonicalizing TestLockSanityChecks/src/test_lock_region/Grandparent.java
Canonicalizing TestLockSanityChecks/src/test_requires_lock/TestImprovedMessages.java
Canonicalizing TestLockSanityChecks/src/test_unique_names/GoodC2.java
Cleaned: 42
##SUBTASK_DONE
##WORK, 1
Handling references for TestLockSanityChecks
##SUBTASK, Handling references for TestLockSanityChecks
Handling 19 dangling refs for TestLockSanityChecks
##SUBTASK_DONE
##WORK, 1
Handling references for org.eclipse.jdt.launching.JRE_CONTAINER
##SUBTASK, Handling references for org.eclipse.jdt.launching.JRE_CONTAINER
Handling 19 dangling refs for org.eclipse.jdt.launching.JRE_CONTAINER
##SUBTASK_DONE
##WORK, 1
Updated 206 files in org.eclipse.jdt.launching.JRE_CONTAINER
Updated 89 files in TestLockSanityChecks
Creating drops
##SUBTASK, Creating drops
Done sorting CodeInfos
##SUBTASK_DONE
##WORK, 1
Parsing promises
##SUBTASK, Parsing promises
Javac making log: RemoteJSureRun.AnnotationRules
Added 11 promises for test_lock_region.Parent in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@6a269101
Added 1 promises for test_lock_region.B in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@3d246f44
Creating JUnitXMLOutput: RemoteJSureRun.AnnotationRules
Creating TestOutput RemoteJSureRun.AnnotationRules (com.surelogic.test.SilentTestOutput@415fc2d5, com.surelogic.test.xml.JUnitXMLOutput@75f04f7a)
Added 1 promises for inherited_region.Instance.Bad1 in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@1197886c
Added 2 promises for inherited_region.good.Good3 in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@b08f1ce
Added 1 promises for inherited_region.good.Good4 in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@653f5ff8
Added 1 promises for inherited_region.Subregion.Bad2 in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@ab5423f
Added 1 promises for inherited_region.good.GoodRoot in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@31b75e54
Added 1 promises for inherited_region.Subregion.Bad3 in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@bdc22ad
line 1:58 mismatched character 'h' expecting '''Added 2 promises for inherited_region.Subregion.BadRoot2 in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@6167436c

line 1:63 mismatched character '<EOF>' expecting '''
Added 1 promises for inherited_region.baseCase.Good1 in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@461b15e2
Added 6 promises for java.io.PrintStream in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@5d226c45
Added 16 promises for test_lock_region.ProtectInheritedRegion in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@5b6ef20
Added 1 promises for java.lang.ref.ReferenceQueue in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@4809f93a
Added 2 promises for inherited_region.good.Good2 in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@15ebec47
line 1:69 mismatched character ' ' expecting '''
line 1:69 mismatched character ' ' expecting '''
line 1:69 mismatched character ' ' expecting '''
Added 18 promises for test_lock_region.C in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@16fe464e
Added 6 promises for java.io.PrintWriter in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@7db79ebf
Added 4 promises for qualified_receivers_as_locks.Outer in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@1ddd5c52
Added 1 promises for test_lock_region.D in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@13b310f2
Added 18 promises for java.nio.CharBuffer in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@1102e749
Added 21 promises for java.util.Stack in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@4d52a6d2
Added 10 promises for test_lock_region.Grandparent in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@423a346f
Added 11 promises for test_lock_region.GreatGrandparent in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@d07ffdf
Added 6 promises for java.io.Writer in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@1c385516
line 1:41 mismatched character ' ' expecting '''
Added 16 promises for test_requires_lock.C in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@749652e4
Added 2 promises for java.lang.ref.SoftReference in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@4b71e076
Added 66 promises for test_lock_region.LockViz in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@5a3e03b3
Added 64 promises for java.security.Provider in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@2826965c
Added 54 promises for java.util.AbstractCollection in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@1596ac35
[GC 109043K->47719K(158272K), 0.0092628 secs]
line 1:37 mismatched character ' ' expecting '''
Added 12 promises for java.lang.reflect.InvocationTargetException in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@32f5620f
Added 14 promises for test_requires_lock.C_Policy in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@3e554058
line 1:63 mismatched character ' ' expecting '''
Added 3 promises for test_requires_lock.CannotRequireRWLock in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@7f4049d6
Added 3 promises for test_requires_lock.D in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@44f1667e
Added 64 promises for test_lock_field.C in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@7fba18ce
Added 3 promises for test_requires_lock.Other1 in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@2085ce5a
WARNING: Couldn't find iterator() in java.util.Vector
WARNING: Couldn't find listIterator(int) in java.util.Vector
WARNING: Couldn't find listIterator() in java.util.Vector
Added 7 promises for test_requires_lock.PolicyLock_Constructor in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@27738a7c
Added 18 promises for java.net.URISyntaxException in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@6440eb2a
line 1:27 mismatched character ' ' expecting '''
line 1:31 mismatched character ' ' expecting '''
Added 6 promises for java.lang.IllegalAccessException in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@2ffbe09b
line 1:27 mismatched character ' ' expecting '''
line 1:32 mismatched character 'h' expecting '''
line 1:37 mismatched character 'o' expecting '''
Added 157 promises for java.util.Vector in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@777cf4f2
Added 66 promises for test_lock_region.LockVizJUC in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@6242d05e
line 1:32 mismatched character 'h' expecting '''
line 1:37 mismatched character '(' expecting '''
Added 1 promises for test_lock_region.Other in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@784654f6
Added 23 promises for test_requires_lock.PolicyLock_LockNames in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@1b91ce2a
line 1:54 mismatched character 'h' expecting '''
line 1:59 mismatched character '<EOF>' expecting '''
Added 29 promises for java.util.concurrent.TimeUnit in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@3582c145
line 1:30 mismatched character ' ' expecting '''
Added 28 promises for java.util.AbstractSequentialList in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@4b9ac4c9
Added 12 promises for java.lang.IllegalArgumentException in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@bbb058f
Added 6 promises for java.lang.InstantiationException in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@73dd9a09
Added 15 promises for java.util.AbstractSet in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@9190142
Added 22 promises for java.util.concurrent.locks.AbstractQueuedSynchronizer in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@6ae920b5
Added 15 promises for test_returns_lock.C_Policy in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@5412a54b
Added 22 promises for java.util.concurrent.locks.Condition in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@603a669a
line 1:34 mismatched character ' ' expecting '''
Added 143 promises for java.lang.AbstractStringBuilder in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@60b964af
line 1:38 mismatched character 'h' expecting '''
line 1:43 mismatched character 'o' expecting '''
line 1:38 mismatched character 'h' expecting '''
line 1:43 mismatched character '(' expecting '''
Added 20 promises for java.util.concurrent.locks.Lock in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@4c542de3
line 1:27 mismatched character ' ' expecting '''
line 1:28 mismatched character ' ' expecting '''
line 1:36 mismatched character ' ' expecting '''
Added 6 promises for java.lang.Appendable in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@6d3ac260
Added 7 promises for java.util.concurrent.locks.ReadWriteLock in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@688c7c7f
Added 24 promises for test_returns_lock.PLock in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@19cdbc83
Added 59 promises for java.util.HashMap in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@60e88620
Added 96 promises for java.lang.Integer in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@55936c40
Added 37 promises for java.lang.Boolean in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@67887119
line 1:34 mismatched character ' ' expecting '''
Added 6 promises for java.lang.InterruptedException in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@3223cb64
line 1:37 mismatched character 'h' expecting '''
line 1:42 mismatched character 'o' expecting '''
line 1:37 mismatched character 'h' expecting '''
line 1:42 mismatched character '(' expecting '''
line 1:26 mismatched character ' ' expecting '''
WARNING: Couldn't find removeAll(java.util.Collection) in java.util.ArrayList
Added 3 promises for java.lang.Iterable in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@706aa01a
line 1:28 mismatched character ' ' expecting '''
line 1:36 mismatched character ' ' expecting '''Added 79 promises for test_requires_lock.PolicyLock_visibility in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@1875b888

Added 26 promises for test_returns_lock.StateLock in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@5c1b41b4
Added 3 promises for test_requires_lock.Root in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@42b34bd3
Added 3 promises for test_unique_names.BadC2 in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@2bc7c6c3
Added 3 promises for test_unique_names.BadC3 in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@331c9ba1
Added 3 promises for test_unique_names.C1 in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@711aed03
Added 58 promises for java.util.concurrent.locks.ReentrantLock in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@11c4317c
WARNING: Couldn't find iterator() in java.util.ArrayList
Added 3 promises for test_unique_names.GoodC2 in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@2b6dd9c5
WARNING: Couldn't find listIterator(int) in java.util.ArrayList
WARNING: Couldn't find listIterator() in java.util.ArrayList
WARNING: Couldn't find subList(int, int) in java.util.ArrayList
Added 3 promises for test_unique_names.GoodC3 in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@5692900d
WARNING: Couldn't find retainAll(java.util.Collection) in java.util.ArrayList
Added 79 promises for java.util.ArrayList in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@431eccb9
Added 7 promises for test_unique_names.StateVsPolicyLocks in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@7cd2da43
[GC 113255K->50199K(242752K), 0.0163482 secs]
Added 2 promises for twoLocksOneRegion.inherited.Duper in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@5985910
Added 2 promises for twoLocksOneRegion.inherited.Super in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@ec87802
Added 3 promises for twoLocksOneRegion.sameClass.Bad in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@66b4855e
Added 1 promises for twoLocksOneRegion.unrelatedClasses.Test in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@78618ac5
Added 9 promises for test_requires_lock.StateLock_Constructor in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@e75a11
Added 1 promises for twoLocksOneRegion.unrelatedClasses.Test2 in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@43b6fb73
Added 59 promises for java.lang.Byte in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@22491a97
Added 12 promises for java.lang.CharSequence in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@6b7b9f29
Added 96 promises for java.lang.Long in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@a41f08line 1:27 mismatched character ' ' expecting '''

line 1:31 mismatched character ' ' expecting '''
line 1:27 mismatched character ' ' expecting '''
line 1:32 mismatched character 'h' expecting '''
line 1:37 mismatched character 'o' expecting '''
line 1:32 mismatched character 'h' expecting '''
line 1:37 mismatched character '(' expecting '''
Added 54 promises for java.util.Collection in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@2aedfc73
Added 26 promises for test_requires_lock.StateLock_LockNames in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@2157a5c3
Added 103 promises for java.util.concurrent.locks.ReentrantReadWriteLock in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@1d878a3b
Added 61 promises for java.lang.Short in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@5bb79d4f
Added 6 promises for java.lang.NoSuchFieldException in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@75a7d0f4
Added 82 promises for java.util.Hashtable in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@e1e1ae5
Added 6 promises for java.lang.NullPointerException in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@4fd05dc5
Added 6 promises for java.util.Iterator in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@52bc3811
Added 22 promises for java.lang.Number in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@4862e21b
Added 6 promises for java.lang.NumberFormatException in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@521fb14e
Added 87 promises for java.util.jar.Attributes in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@50709dfa
Added 27 promises for java.lang.Object in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@3507012c
Added 87 promises for java.util.Deque in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@69c192c8
Added 12 promises for java.lang.RuntimeException in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@46e9a677
Added 12 promises for java.lang.SecurityException in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@446a9098
Added 29 promises for java.util.Dictionary in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@4c01e765
Added 87 promises for test_requires_lock.StateLock_visibility in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@1235047f
Added 4 promises for java.util.Enumeration in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@10a238d1
Added 16 promises for test_requires_lock.TestDuplicates in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@657a8369
Added 64 promises for java.util.Map in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@7e965fb9
Added 2 promises for test_requires_lock.TestImprovedMessages in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@75b6cb5d
Added 47 promises for java.lang.Throwable in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@69e1968d
line 1:30 mismatched character ' ' expecting '''
Added 17 promises for test_returns_lock.C in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@663aa59d
Added 59 promises for java.util.AbstractList in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@7b76bdc7
Added 1 promises for java.lang.Class in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@601fa7c6
Added 73 promises for java.util.Properties in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@268bd140
Added 54 promises for java.util.Set in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@2236052c
Added 137 promises for java.util.LinkedList in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@36177f7b
Added 18 promises for java.util.Queue in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@7ccf5e16
Added 298 promises for java.lang.String in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@14377358
Added 15 promises for java.lang.ClassNotFoundException in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@5fdc21a7
Added 6 promises for java.lang.CloneNotSupportedException in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@1f3f668d
Added 31 promises for java.util.SortedMap in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@67a2997e
Added 108 promises for java.lang.StringBuilder in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@18d8b6fe
Added 70 promises for java.lang.Double in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@7b37676c
Added 7 promises for java.lang.Enum in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@28355d79
Added 104 promises for java.util.AbstractMap in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@36b4366b
Added 12 promises for java.lang.Exception in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@217d9933
Added 138 promises for java.lang.Thread in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@70a8450d
Added 157 promises for java.lang.StringBuffer in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@40e09d8b
Added 89 promises for java.util.List in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@1f002d1f
Added 18 promises for java.util.ListIterator in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@35847a59
Added 73 promises for java.lang.Float in org.eclipse.jdt.launching.JRE_CONTAINER: com.surelogic.tree.SyntaxTreeNode@70297e0d
##SUBTASK_DONE
##WORK, 1
Scrubbing promises
##SUBTASK, Scrubbing promises
[GC 181271K->54959K(243008K), 0.0259798 secs]
Creating RegionModel java.lang.Object.Instance for org.eclipse.jdt.launching.JRE_CONTAINER
[2012-10-31 11:25:34    INFO] Couldn't find field unknownField in com.surelogic.tree.SyntaxTreeNode@7fba18ce -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } )   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLocks ( {   /* is UNBOUND: Field is undefined (Instance Region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: receiver (Instance Region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: known final field (Instance Region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: field is non-final (Instance Region) */  @ RegionLock ( # ) ,   /* is UNBOUND: Field is undefined (Static region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: class (Static region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: known final static field (static region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field (static region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: primitively typed field */  @ RegionLock ( # ) ,   /* is CONSISTENT: Static locks can use fields from other classes */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: Instance locks cannot use fields from other classes */  @ RegionLock ( # ) ,   /* is CONSISTENT: Can use field from GP */  @ RegionLock ( # ) ,   /* is CONSISTENT: Can use field from Parent */  @ RegionLock ( # ) ,   /* is UNBOUND: Field is unknown */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: Cannot use a field from a child */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from GP */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from parent */  @ RegionLock ( # ) ,   /* is UNBOUND: unknown field */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from child */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: class cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) } )   /* is UNASSOCIATED: non-final field from child */  @ PolicyLocks ( {   /* is UNBOUND: Field is undefined (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: receiver (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: known final field (Instance Region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: field is non-final (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: class (Static region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: known final static field (static region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field (static region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: primitively typed field */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Static locks can use fields from other classes */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: Instance locks cannot use fields from other classes */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Can use field from GP */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Can use field from Parent */  @ PolicyLock ( # ) ,   /* is UNBOUND: Field is unknown */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: Cannot use a field from a child */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from GP */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from parent */  @ PolicyLock ( # ) ,   /* is UNBOUND: unknown field */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from child */  @ PolicyLock ( # ) } ) public class C extends test_lock_field.B { public  C () { # } final java.lang.Object goodField #; java.lang.Object badField #; final int nonObjectField #; final static java.lang.Object goodStatic #; static java.lang.Object badStatic #; }
for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
[2012-10-31 11:25:34    INFO] Couldn't find field fieldFromD in com.surelogic.tree.SyntaxTreeNode@7fba18ce -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } )   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLocks ( {   /* is UNBOUND: Field is undefined (Instance Region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: receiver (Instance Region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: known final field (Instance Region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: field is non-final (Instance Region) */  @ RegionLock ( # ) ,   /* is UNBOUND: Field is undefined (Static region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: class (Static region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: known final static field (static region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field (static region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: primitively typed field */  @ RegionLock ( # ) ,   /* is CONSISTENT: Static locks can use fields from other classes */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: Instance locks cannot use fields from other classes */  @ RegionLock ( # ) ,   /* is CONSISTENT: Can use field from GP */  @ RegionLock ( # ) ,   /* is CONSISTENT: Can use field from Parent */  @ RegionLock ( # ) ,   /* is UNBOUND: Field is unknown */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: Cannot use a field from a child */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from GP */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from parent */  @ RegionLock ( # ) ,   /* is UNBOUND: unknown field */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from child */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: class cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) } )   /* is UNASSOCIATED: non-final field from child */  @ PolicyLocks ( {   /* is UNBOUND: Field is undefined (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: receiver (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: known final field (Instance Region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: field is non-final (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: class (Static region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: known final static field (static region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field (static region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: primitively typed field */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Static locks can use fields from other classes */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: Instance locks cannot use fields from other classes */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Can use field from GP */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Can use field from Parent */  @ PolicyLock ( # ) ,   /* is UNBOUND: Field is unknown */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: Cannot use a field from a child */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from GP */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from parent */  @ PolicyLock ( # ) ,   /* is UNBOUND: unknown field */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from child */  @ PolicyLock ( # ) } ) public class C extends test_lock_field.B { public  C () { # } final java.lang.Object goodField #; java.lang.Object badField #; final int nonObjectField #; final static java.lang.Object goodStatic #; static java.lang.Object badStatic #; }
for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
[2012-10-31 11:25:34    INFO] Couldn't find field badFieldFromD in com.surelogic.tree.SyntaxTreeNode@7fba18ce -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } )   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLocks ( {   /* is UNBOUND: Field is undefined (Instance Region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: receiver (Instance Region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: known final field (Instance Region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: field is non-final (Instance Region) */  @ RegionLock ( # ) ,   /* is UNBOUND: Field is undefined (Static region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: class (Static region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: known final static field (static region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field (static region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: primitively typed field */  @ RegionLock ( # ) ,   /* is CONSISTENT: Static locks can use fields from other classes */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: Instance locks cannot use fields from other classes */  @ RegionLock ( # ) ,   /* is CONSISTENT: Can use field from GP */  @ RegionLock ( # ) ,   /* is CONSISTENT: Can use field from Parent */  @ RegionLock ( # ) ,   /* is UNBOUND: Field is unknown */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: Cannot use a field from a child */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from GP */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from parent */  @ RegionLock ( # ) ,   /* is UNBOUND: unknown field */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from child */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: class cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) } )   /* is UNASSOCIATED: non-final field from child */  @ PolicyLocks ( {   /* is UNBOUND: Field is undefined (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: receiver (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: known final field (Instance Region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: field is non-final (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: class (Static region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: known final static field (static region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field (static region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: primitively typed field */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Static locks can use fields from other classes */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: Instance locks cannot use fields from other classes */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Can use field from GP */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Can use field from Parent */  @ PolicyLock ( # ) ,   /* is UNBOUND: Field is unknown */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: Cannot use a field from a child */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from GP */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from parent */  @ PolicyLock ( # ) ,   /* is UNBOUND: unknown field */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from child */  @ PolicyLock ( # ) } ) public class C extends test_lock_field.B { public  C () { # } final java.lang.Object goodField #; java.lang.Object badField #; final int nonObjectField #; final static java.lang.Object goodStatic #; static java.lang.Object badStatic #; }
for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
[2012-10-31 11:25:35    INFO] Couldn't find field unknownField in com.surelogic.tree.SyntaxTreeNode@7fba18ce -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } )   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLocks ( {   /* is UNBOUND: Field is undefined (Instance Region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: receiver (Instance Region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: known final field (Instance Region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: field is non-final (Instance Region) */  @ RegionLock ( # ) ,   /* is UNBOUND: Field is undefined (Static region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: class (Static region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: known final static field (static region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field (static region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: primitively typed field */  @ RegionLock ( # ) ,   /* is CONSISTENT: Static locks can use fields from other classes */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: Instance locks cannot use fields from other classes */  @ RegionLock ( # ) ,   /* is CONSISTENT: Can use field from GP */  @ RegionLock ( # ) ,   /* is CONSISTENT: Can use field from Parent */  @ RegionLock ( # ) ,   /* is UNBOUND: Field is unknown */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: Cannot use a field from a child */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from GP */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from parent */  @ RegionLock ( # ) ,   /* is UNBOUND: unknown field */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from child */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: class cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) } )   /* is UNASSOCIATED: non-final field from child */  @ PolicyLocks ( {   /* is UNBOUND: Field is undefined (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: receiver (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: known final field (Instance Region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: field is non-final (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: class (Static region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: known final static field (static region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field (static region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: primitively typed field */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Static locks can use fields from other classes */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: Instance locks cannot use fields from other classes */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Can use field from GP */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Can use field from Parent */  @ PolicyLock ( # ) ,   /* is UNBOUND: Field is unknown */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: Cannot use a field from a child */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from GP */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from parent */  @ PolicyLock ( # ) ,   /* is UNBOUND: unknown field */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from child */  @ PolicyLock ( # ) } ) public class C extends test_lock_field.B { public  C () { # } final java.lang.Object goodField #; java.lang.Object badField #; final int nonObjectField #; final static java.lang.Object goodStatic #; static java.lang.Object badStatic #; }
for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
[2012-10-31 11:25:35    INFO] Couldn't find field unknownField in com.surelogic.tree.SyntaxTreeNode@7fba18ce -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } )   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLocks ( {   /* is UNBOUND: Field is undefined (Instance Region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: receiver (Instance Region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: known final field (Instance Region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: field is non-final (Instance Region) */  @ RegionLock ( # ) ,   /* is UNBOUND: Field is undefined (Static region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: class (Static region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: known final static field (static region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field (static region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: primitively typed field */  @ RegionLock ( # ) ,   /* is CONSISTENT: Static locks can use fields from other classes */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: Instance locks cannot use fields from other classes */  @ RegionLock ( # ) ,   /* is CONSISTENT: Can use field from GP */  @ RegionLock ( # ) ,   /* is CONSISTENT: Can use field from Parent */  @ RegionLock ( # ) ,   /* is UNBOUND: Field is unknown */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: Cannot use a field from a child */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from GP */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from parent */  @ RegionLock ( # ) ,   /* is UNBOUND: unknown field */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from child */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: class cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) } )   /* is UNASSOCIATED: non-final field from child */  @ PolicyLocks ( {   /* is UNBOUND: Field is undefined (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: receiver (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: known final field (Instance Region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: field is non-final (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: class (Static region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: known final static field (static region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field (static region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: primitively typed field */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Static locks can use fields from other classes */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: Instance locks cannot use fields from other classes */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Can use field from GP */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Can use field from Parent */  @ PolicyLock ( # ) ,   /* is UNBOUND: Field is unknown */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: Cannot use a field from a child */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from GP */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from parent */  @ PolicyLock ( # ) ,   /* is UNBOUND: unknown field */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from child */  @ PolicyLock ( # ) } ) public class C extends test_lock_field.B { public  C () { # } final java.lang.Object goodField #; java.lang.Object badField #; final int nonObjectField #; final static java.lang.Object goodStatic #; static java.lang.Object badStatic #; }
for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
[2012-10-31 11:25:35    INFO] Couldn't find field fieldFromD in com.surelogic.tree.SyntaxTreeNode@7fba18ce -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } )   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLocks ( {   /* is UNBOUND: Field is undefined (Instance Region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: receiver (Instance Region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: known final field (Instance Region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: field is non-final (Instance Region) */  @ RegionLock ( # ) ,   /* is UNBOUND: Field is undefined (Static region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: class (Static region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: known final static field (static region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field (static region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: primitively typed field */  @ RegionLock ( # ) ,   /* is CONSISTENT: Static locks can use fields from other classes */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: Instance locks cannot use fields from other classes */  @ RegionLock ( # ) ,   /* is CONSISTENT: Can use field from GP */  @ RegionLock ( # ) ,   /* is CONSISTENT: Can use field from Parent */  @ RegionLock ( # ) ,   /* is UNBOUND: Field is unknown */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: Cannot use a field from a child */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from GP */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from parent */  @ RegionLock ( # ) ,   /* is UNBOUND: unknown field */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from child */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: class cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) } )   /* is UNASSOCIATED: non-final field from child */  @ PolicyLocks ( {   /* is UNBOUND: Field is undefined (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: receiver (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: known final field (Instance Region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: field is non-final (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: class (Static region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: known final static field (static region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field (static region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: primitively typed field */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Static locks can use fields from other classes */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: Instance locks cannot use fields from other classes */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Can use field from GP */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Can use field from Parent */  @ PolicyLock ( # ) ,   /* is UNBOUND: Field is unknown */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: Cannot use a field from a child */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from GP */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from parent */  @ PolicyLock ( # ) ,   /* is UNBOUND: unknown field */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from child */  @ PolicyLock ( # ) } ) public class C extends test_lock_field.B { public  C () { # } final java.lang.Object goodField #; java.lang.Object badField #; final int nonObjectField #; final static java.lang.Object goodStatic #; static java.lang.Object badStatic #; }
for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
[2012-10-31 11:25:35    INFO] Couldn't find field badFieldFromD in com.surelogic.tree.SyntaxTreeNode@7fba18ce -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } )   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLocks ( {   /* is UNBOUND: Field is undefined (Instance Region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: receiver (Instance Region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: known final field (Instance Region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: field is non-final (Instance Region) */  @ RegionLock ( # ) ,   /* is UNBOUND: Field is undefined (Static region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: class (Static region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: known final static field (static region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field (static region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: primitively typed field */  @ RegionLock ( # ) ,   /* is CONSISTENT: Static locks can use fields from other classes */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: Instance locks cannot use fields from other classes */  @ RegionLock ( # ) ,   /* is CONSISTENT: Can use field from GP */  @ RegionLock ( # ) ,   /* is CONSISTENT: Can use field from Parent */  @ RegionLock ( # ) ,   /* is UNBOUND: Field is unknown */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: Cannot use a field from a child */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from GP */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from parent */  @ RegionLock ( # ) ,   /* is UNBOUND: unknown field */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from child */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: class cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) } )   /* is UNASSOCIATED: non-final field from child */  @ PolicyLocks ( {   /* is UNBOUND: Field is undefined (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: receiver (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: known final field (Instance Region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: field is non-final (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: class (Static region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: known final static field (static region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field (static region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: primitively typed field */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Static locks can use fields from other classes */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: Instance locks cannot use fields from other classes */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Can use field from GP */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Can use field from Parent */  @ PolicyLock ( # ) ,   /* is UNBOUND: Field is unknown */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: Cannot use a field from a child */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from GP */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from parent */  @ PolicyLock ( # ) ,   /* is UNBOUND: unknown field */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from child */  @ PolicyLock ( # ) } ) public class C extends test_lock_field.B { public  C () { # } final java.lang.Object goodField #; java.lang.Object badField #; final int nonObjectField #; final static java.lang.Object goodStatic #; static java.lang.Object badStatic #; }
for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
[2012-10-31 11:25:35    INFO] Couldn't find region UnknownRegion in com.surelogic.tree.SyntaxTreeNode@16fe464e -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } )   /* is UNPARSEABLE: static region is from unrelated class (Other) */  @ RegionLocks ( {   /* is UNBOUND: Region is undefined */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: Cannot protect a static region with 'this' */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: Cannot protect a static region with a non-static field */  @ RegionLock ( # ) ,   /* is CONSISTENT: Static region protected by class */  @ RegionLock ( # ) ,   /* is CONSISTENT: Static region protected by static field */  @ RegionLock ( # ) ,   /* is CONSISTENT: Static region is from the protecting class; field is from the same */  @ RegionLock ( # ) ,   /* is CONSISTENT: Static region is from the protecting class; doesn't matter that field is from superclass (B) */  @ RegionLock ( # ) ,   /* is CONSISTENT: Static region is from the protecting class; doesn't matter that field is from subclass (D) */  @ RegionLock ( # ) ,   /* is CONSISTENT: Static region is from the protecting class; doesn't matter that field is from an unrelated class (Other) */  @ RegionLock ( # ) ,   /* is UNPARSEABLE: static region is from superclass (B) */  @ RegionLock ( # ) ,   /* is UNPARSEABLE: static region is from subclass (D) */  @ RegionLock ( # ) ,   /* is UNPARSEABLE: static region is from unrelated class (Other) */  @ RegionLock ( # ) } ) public class C extends test_lock_region.B { public  C () { # } final java.lang.Object nonStaticField #; final static java.lang.Object staticFieldFromC #; }
for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
[2012-10-31 11:25:36    INFO] Couldn't find lock DoesntExist in com.surelogic.tree.SyntaxTreeNode@5c1b41b4 -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } ) @ RegionLocks ( { @ RegionLock ( # ) , @ RegionLock ( # ) , @ RegionLock ( # ) } ) public class StateLock extends java.lang.Object { public  StateLock () { # }   /*is UNASSOCIATED: Cannot qualify a static lock with this*/  @ ReturnsLock ( # ) public java.lang.Object getLock_thisQualified_staticLock() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_implicit_staticLock() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_typeQualified_staticLock() { # }   /*is UNASSOCIATED: Cannot type-qualify an instance lock*/  @ ReturnsLock ( # ) public java.lang.Object getLock_typeQualifiedInstance() { # }   /*is UNBOUND*/  @ ReturnsLock ( # ) public java.lang.Object getLock_doesntExist() { # }   /*is CONSISTENT*/  @ ReturnsLock ( # ) public java.lang.Object getLock_exists() { # }   /*is CONSISTENT*/  @ ReturnsLock ( # ) public java.lang.Object getLock_exists2() { # }   /* is UNBOUND: parameter p doesn't exist */  @ ReturnsLock ( # ) public java.lang.Object getLock_bad_param(# final # o) { # }   /*is UNBOUND*/  @ ReturnsLock ( # ) public java.lang.Object getLock_param_doesntExist(# final # p) { # }   /*is CONSISTENT: parameter is non-final, but unchanged*/  @ ReturnsLock ( # ) public java.lang.Object getLock_param_nonfinal(# # p) { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_good(# final # p) { # }   /*is UNASSOCIATED: Cannot refer to 'this' on static method*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1() { # }   /*is UNASSOCIATED: Cannot refer to 'this' (implicitly) on static method*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1a() { # }   /*is CONSISTENT*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1() { # }   /*is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1a() { # }   /*is UNBOUND: Lock does not exist*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegionWithThis() { # }   /*is UNBOUND: Lock doesn't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegion() { # }   /* is UNBOUND: Class doesn't exist (Default package)*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1() { # }   /* is UNBOUND: Package & Class don't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1a() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_paramLock(# final # p) { # } }
for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
[2012-10-31 11:25:36    INFO] Couldn't find lock DoesntExist in com.surelogic.tree.SyntaxTreeNode@5c1b41b4 -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } ) @ RegionLocks ( { @ RegionLock ( # ) , @ RegionLock ( # ) , @ RegionLock ( # ) } ) public class StateLock extends java.lang.Object { public  StateLock () { # }   /*is UNASSOCIATED: Cannot qualify a static lock with this*/  @ ReturnsLock ( # ) public java.lang.Object getLock_thisQualified_staticLock() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_implicit_staticLock() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_typeQualified_staticLock() { # }   /*is UNASSOCIATED: Cannot type-qualify an instance lock*/  @ ReturnsLock ( # ) public java.lang.Object getLock_typeQualifiedInstance() { # }   /*is UNBOUND*/  @ ReturnsLock ( # ) public java.lang.Object getLock_doesntExist() { # }   /*is CONSISTENT*/  @ ReturnsLock ( # ) public java.lang.Object getLock_exists() { # }   /*is CONSISTENT*/  @ ReturnsLock ( # ) public java.lang.Object getLock_exists2() { # }   /* is UNBOUND: parameter p doesn't exist */  @ ReturnsLock ( # ) public java.lang.Object getLock_bad_param(# final # o) { # }   /*is UNBOUND*/  @ ReturnsLock ( # ) public java.lang.Object getLock_param_doesntExist(# final # p) { # }   /*is CONSISTENT: parameter is non-final, but unchanged*/  @ ReturnsLock ( # ) public java.lang.Object getLock_param_nonfinal(# # p) { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_good(# final # p) { # }   /*is UNASSOCIATED: Cannot refer to 'this' on static method*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1() { # }   /*is UNASSOCIATED: Cannot refer to 'this' (implicitly) on static method*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1a() { # }   /*is CONSISTENT*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1() { # }   /*is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1a() { # }   /*is UNBOUND: Lock does not exist*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegionWithThis() { # }   /*is UNBOUND: Lock doesn't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegion() { # }   /* is UNBOUND: Class doesn't exist (Default package)*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1() { # }   /* is UNBOUND: Package & Class don't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1a() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_paramLock(# final # p) { # } }
for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
[2012-10-31 11:25:36    INFO] Couldn't find lock DoesntExist in com.surelogic.tree.SyntaxTreeNode@5c1b41b4 -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } ) @ RegionLocks ( { @ RegionLock ( # ) , @ RegionLock ( # ) , @ RegionLock ( # ) } ) public class StateLock extends java.lang.Object { public  StateLock () { # }   /*is UNASSOCIATED: Cannot qualify a static lock with this*/  @ ReturnsLock ( # ) public java.lang.Object getLock_thisQualified_staticLock() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_implicit_staticLock() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_typeQualified_staticLock() { # }   /*is UNASSOCIATED: Cannot type-qualify an instance lock*/  @ ReturnsLock ( # ) public java.lang.Object getLock_typeQualifiedInstance() { # }   /*is UNBOUND*/  @ ReturnsLock ( # ) public java.lang.Object getLock_doesntExist() { # }   /*is CONSISTENT*/  @ ReturnsLock ( # ) public java.lang.Object getLock_exists() { # }   /*is CONSISTENT*/  @ ReturnsLock ( # ) public java.lang.Object getLock_exists2() { # }   /* is UNBOUND: parameter p doesn't exist */  @ ReturnsLock ( # ) public java.lang.Object getLock_bad_param(# final # o) { # }   /*is UNBOUND*/  @ ReturnsLock ( # ) public java.lang.Object getLock_param_doesntExist(# final # p) { # }   /*is CONSISTENT: parameter is non-final, but unchanged*/  @ ReturnsLock ( # ) public java.lang.Object getLock_param_nonfinal(# # p) { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_good(# final # p) { # }   /*is UNASSOCIATED: Cannot refer to 'this' on static method*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1() { # }   /*is UNASSOCIATED: Cannot refer to 'this' (implicitly) on static method*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1a() { # }   /*is CONSISTENT*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1() { # }   /*is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1a() { # }   /*is UNBOUND: Lock does not exist*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegionWithThis() { # }   /*is UNBOUND: Lock doesn't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegion() { # }   /* is UNBOUND: Class doesn't exist (Default package)*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1() { # }   /* is UNBOUND: Package & Class don't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1a() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_paramLock(# final # p) { # } }
for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
[2012-10-31 11:25:36    INFO] Couldn't find lock DoesntExist in com.surelogic.tree.SyntaxTreeNode@5c1b41b4 -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } ) @ RegionLocks ( { @ RegionLock ( # ) , @ RegionLock ( # ) , @ RegionLock ( # ) } ) public class StateLock extends java.lang.Object { public  StateLock () { # }   /*is UNASSOCIATED: Cannot qualify a static lock with this*/  @ ReturnsLock ( # ) public java.lang.Object getLock_thisQualified_staticLock() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_implicit_staticLock() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_typeQualified_staticLock() { # }   /*is UNASSOCIATED: Cannot type-qualify an instance lock*/  @ ReturnsLock ( # ) public java.lang.Object getLock_typeQualifiedInstance() { # }   /*is UNBOUND*/  @ ReturnsLock ( # ) public java.lang.Object getLock_doesntExist() { # }   /*is CONSISTENT*/  @ ReturnsLock ( # ) public java.lang.Object getLock_exists() { # }   /*is CONSISTENT*/  @ ReturnsLock ( # ) public java.lang.Object getLock_exists2() { # }   /* is UNBOUND: parameter p doesn't exist */  @ ReturnsLock ( # ) public java.lang.Object getLock_bad_param(# final # o) { # }   /*is UNBOUND*/  @ ReturnsLock ( # ) public java.lang.Object getLock_param_doesntExist(# final # p) { # }   /*is CONSISTENT: parameter is non-final, but unchanged*/  @ ReturnsLock ( # ) public java.lang.Object getLock_param_nonfinal(# # p) { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_good(# final # p) { # }   /*is UNASSOCIATED: Cannot refer to 'this' on static method*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1() { # }   /*is UNASSOCIATED: Cannot refer to 'this' (implicitly) on static method*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1a() { # }   /*is CONSISTENT*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1() { # }   /*is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1a() { # }   /*is UNBOUND: Lock does not exist*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegionWithThis() { # }   /*is UNBOUND: Lock doesn't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegion() { # }   /* is UNBOUND: Class doesn't exist (Default package)*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1() { # }   /* is UNBOUND: Package & Class don't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1a() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_paramLock(# final # p) { # } }
for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
[2012-10-31 11:25:36    INFO] Couldn't find lock DoesntExist in com.surelogic.tree.SyntaxTreeNode@19cdbc83 -- @ PolicyLocks ( { @ PolicyLock ( # ) , @ PolicyLock ( # ) , @ PolicyLock ( # ) } ) public class PLock extends java.lang.Object { public  PLock () { # }   /* is UNASSOCIATED: Cannot qualify a static lock with this */  @ ReturnsLock ( # ) public java.lang.Object getLock_thisQualified_staticLock() { # }   /* is CONSISTENT*/  @ ReturnsLock ( # ) public java.lang.Object getLock_implicit_staticLock() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_typeQualified_staticLock() { # }   /* is UNBOUND */  @ ReturnsLock ( # ) public java.lang.Object getLock_doesntExist() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_exists() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_exists2() { # }   /* is UNBOUND: parameter p doesn't exist */  @ ReturnsLock ( # ) public java.lang.Object getLock_bad_param(# final # o) { # }   /* is UNBOUND */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_doesntExist(# final # p) { # }   /* is CONSISTENT: parameter is non-final, but unchanged */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_nonfinal(# # p) { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_good(# final # p) { # }   /* is UNASSOCIATED: Cannot refer to 'this' on static method */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1() { # }   /* is UNASSOCIATED: Cannot refer to 'this' (implicitly) on static method */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1a() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1a() { # }   /* is UNBOUND: Lock does not exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegionWithThis() { # }   /* is UNBOUND: Lock doesn't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegion() { # }   /* is UNBOUND: Class doesn't exist (Default package) */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1() { # }   /* is UNBOUND: Package & Class don't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1a() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_paramLock(# final # p) { # } @ SuppressWarnings ( # ) private class Inner extends java.lang.Object { # public  # Inner # # # # public # # getLock_innerClassMethod_qualifiedThis_staticLock# # # # public # # getLock_innerClassMethod_qualifiedThis_nonStaticLock# # # } }
for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
[2012-10-31 11:25:36    INFO] Couldn't find lock DoesntExist in com.surelogic.tree.SyntaxTreeNode@19cdbc83 -- @ PolicyLocks ( { @ PolicyLock ( # ) , @ PolicyLock ( # ) , @ PolicyLock ( # ) } ) public class PLock extends java.lang.Object { public  PLock () { # }   /* is UNASSOCIATED: Cannot qualify a static lock with this */  @ ReturnsLock ( # ) public java.lang.Object getLock_thisQualified_staticLock() { # }   /* is CONSISTENT*/  @ ReturnsLock ( # ) public java.lang.Object getLock_implicit_staticLock() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_typeQualified_staticLock() { # }   /* is UNBOUND */  @ ReturnsLock ( # ) public java.lang.Object getLock_doesntExist() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_exists() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_exists2() { # }   /* is UNBOUND: parameter p doesn't exist */  @ ReturnsLock ( # ) public java.lang.Object getLock_bad_param(# final # o) { # }   /* is UNBOUND */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_doesntExist(# final # p) { # }   /* is CONSISTENT: parameter is non-final, but unchanged */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_nonfinal(# # p) { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_good(# final # p) { # }   /* is UNASSOCIATED: Cannot refer to 'this' on static method */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1() { # }   /* is UNASSOCIATED: Cannot refer to 'this' (implicitly) on static method */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1a() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1a() { # }   /* is UNBOUND: Lock does not exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegionWithThis() { # }   /* is UNBOUND: Lock doesn't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegion() { # }   /* is UNBOUND: Class doesn't exist (Default package) */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1() { # }   /* is UNBOUND: Package & Class don't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1a() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_paramLock(# final # p) { # } @ SuppressWarnings ( # ) private class Inner extends java.lang.Object { # public  # Inner # # # # public # # getLock_innerClassMethod_qualifiedThis_staticLock# # # # public # # getLock_innerClassMethod_qualifiedThis_nonStaticLock# # # } }
for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
[2012-10-31 11:25:36    INFO] Couldn't find lock DoesntExist in com.surelogic.tree.SyntaxTreeNode@19cdbc83 -- @ PolicyLocks ( { @ PolicyLock ( # ) , @ PolicyLock ( # ) , @ PolicyLock ( # ) } ) public class PLock extends java.lang.Object { public  PLock () { # }   /* is UNASSOCIATED: Cannot qualify a static lock with this */  @ ReturnsLock ( # ) public java.lang.Object getLock_thisQualified_staticLock() { # }   /* is CONSISTENT*/  @ ReturnsLock ( # ) public java.lang.Object getLock_implicit_staticLock() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_typeQualified_staticLock() { # }   /* is UNBOUND */  @ ReturnsLock ( # ) public java.lang.Object getLock_doesntExist() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_exists() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_exists2() { # }   /* is UNBOUND: parameter p doesn't exist */  @ ReturnsLock ( # ) public java.lang.Object getLock_bad_param(# final # o) { # }   /* is UNBOUND */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_doesntExist(# final # p) { # }   /* is CONSISTENT: parameter is non-final, but unchanged */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_nonfinal(# # p) { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_good(# final # p) { # }   /* is UNASSOCIATED: Cannot refer to 'this' on static method */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1() { # }   /* is UNASSOCIATED: Cannot refer to 'this' (implicitly) on static method */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1a() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1a() { # }   /* is UNBOUND: Lock does not exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegionWithThis() { # }   /* is UNBOUND: Lock doesn't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegion() { # }   /* is UNBOUND: Class doesn't exist (Default package) */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1() { # }   /* is UNBOUND: Package & Class don't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1a() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_paramLock(# final # p) { # } @ SuppressWarnings ( # ) private class Inner extends java.lang.Object { # public  # Inner # # # # public # # getLock_innerClassMethod_qualifiedThis_staticLock# # # # public # # getLock_innerClassMethod_qualifiedThis_nonStaticLock# # # } }
for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
[2012-10-31 11:25:36    INFO] Couldn't find lock DoesntExist in com.surelogic.tree.SyntaxTreeNode@19cdbc83 -- @ PolicyLocks ( { @ PolicyLock ( # ) , @ PolicyLock ( # ) , @ PolicyLock ( # ) } ) public class PLock extends java.lang.Object { public  PLock () { # }   /* is UNASSOCIATED: Cannot qualify a static lock with this */  @ ReturnsLock ( # ) public java.lang.Object getLock_thisQualified_staticLock() { # }   /* is CONSISTENT*/  @ ReturnsLock ( # ) public java.lang.Object getLock_implicit_staticLock() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_typeQualified_staticLock() { # }   /* is UNBOUND */  @ ReturnsLock ( # ) public java.lang.Object getLock_doesntExist() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_exists() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_exists2() { # }   /* is UNBOUND: parameter p doesn't exist */  @ ReturnsLock ( # ) public java.lang.Object getLock_bad_param(# final # o) { # }   /* is UNBOUND */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_doesntExist(# final # p) { # }   /* is CONSISTENT: parameter is non-final, but unchanged */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_nonfinal(# # p) { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_good(# final # p) { # }   /* is UNASSOCIATED: Cannot refer to 'this' on static method */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1() { # }   /* is UNASSOCIATED: Cannot refer to 'this' (implicitly) on static method */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1a() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1a() { # }   /* is UNBOUND: Lock does not exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegionWithThis() { # }   /* is UNBOUND: Lock doesn't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegion() { # }   /* is UNBOUND: Class doesn't exist (Default package) */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1() { # }   /* is UNBOUND: Package & Class don't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1a() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_paramLock(# final # p) { # } @ SuppressWarnings ( # ) private class Inner extends java.lang.Object { # public  # Inner # # # # public # # getLock_innerClassMethod_qualifiedThis_staticLock# # # # public # # getLock_innerClassMethod_qualifiedThis_nonStaticLock# # # } }
for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
[2012-10-31 11:25:36    INFO] Couldn't find lock DoesntExist in com.surelogic.tree.SyntaxTreeNode@2157a5c3 -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } ) @ RegionLocks ( { @ RegionLock ( # ) , @ RegionLock ( # ) , @ RegionLock ( # ) } ) public class StateLock_LockNames extends java.lang.Object { public  StateLock_LockNames () { # }   /*is UNASSOCIATED: cannot qualify a static lock with this*/  @ RequiresLock ( # ) public void bad_thisQualified_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_typeQualified_staticLock() {  }   /*is UNASSOCIATED: type-qualified instance lock*/  @ RequiresLock ( # ) public void bad_typeQualifiedInstance() {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_doesntExist() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_implicit_this() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_explicit_this() {  }   /*is UNBOUND: Parameter doesn't exist*/  @ RequiresLock ( # ) public void bad_param_doesnt_exist(# final # o) {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_param_lock_doesnt_exist(# final # p) {  }   /* is CONSISTENT: parameter is non-final but unchanged*/  @ RequiresLock ( # ) public void good_param_nonfinal(# # p) {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_param_is_good(# final # p) {  }   /*is UNASSOCIATED: cannot use 'this' on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_explicit_this() {  }   /*is UNASSOCIATED: cannot use 'this' (implicit) on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_implicit_this() {  }   /*is CONSISTENT*/  @ RequiresLock ( # ) public static void good_staticMethod_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void good_staticMethod_typeQualified_staticLock() {  }   /*is UNBOUND: static use of this with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionWithThis() {  }   /*is UNBOUND: static use of this (implicit) with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionImplicitThis() {  }   /*is UNBOUND: No such class (default package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1() {  }   /*is UNBOUND: No such class (non-existent package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1a() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void staticMethod_paramLock(# final # p) {  } }
for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
[2012-10-31 11:25:36    INFO] Couldn't find lock DoesntExist in com.surelogic.tree.SyntaxTreeNode@2157a5c3 -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } ) @ RegionLocks ( { @ RegionLock ( # ) , @ RegionLock ( # ) , @ RegionLock ( # ) } ) public class StateLock_LockNames extends java.lang.Object { public  StateLock_LockNames () { # }   /*is UNASSOCIATED: cannot qualify a static lock with this*/  @ RequiresLock ( # ) public void bad_thisQualified_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_typeQualified_staticLock() {  }   /*is UNASSOCIATED: type-qualified instance lock*/  @ RequiresLock ( # ) public void bad_typeQualifiedInstance() {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_doesntExist() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_implicit_this() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_explicit_this() {  }   /*is UNBOUND: Parameter doesn't exist*/  @ RequiresLock ( # ) public void bad_param_doesnt_exist(# final # o) {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_param_lock_doesnt_exist(# final # p) {  }   /* is CONSISTENT: parameter is non-final but unchanged*/  @ RequiresLock ( # ) public void good_param_nonfinal(# # p) {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_param_is_good(# final # p) {  }   /*is UNASSOCIATED: cannot use 'this' on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_explicit_this() {  }   /*is UNASSOCIATED: cannot use 'this' (implicit) on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_implicit_this() {  }   /*is CONSISTENT*/  @ RequiresLock ( # ) public static void good_staticMethod_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void good_staticMethod_typeQualified_staticLock() {  }   /*is UNBOUND: static use of this with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionWithThis() {  }   /*is UNBOUND: static use of this (implicit) with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionImplicitThis() {  }   /*is UNBOUND: No such class (default package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1() {  }   /*is UNBOUND: No such class (non-existent package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1a() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void staticMethod_paramLock(# final # p) {  } }
for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
[2012-10-31 11:25:36    INFO] Couldn't find lock DoesntExist in com.surelogic.tree.SyntaxTreeNode@2157a5c3 -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } ) @ RegionLocks ( { @ RegionLock ( # ) , @ RegionLock ( # ) , @ RegionLock ( # ) } ) public class StateLock_LockNames extends java.lang.Object { public  StateLock_LockNames () { # }   /*is UNASSOCIATED: cannot qualify a static lock with this*/  @ RequiresLock ( # ) public void bad_thisQualified_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_typeQualified_staticLock() {  }   /*is UNASSOCIATED: type-qualified instance lock*/  @ RequiresLock ( # ) public void bad_typeQualifiedInstance() {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_doesntExist() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_implicit_this() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_explicit_this() {  }   /*is UNBOUND: Parameter doesn't exist*/  @ RequiresLock ( # ) public void bad_param_doesnt_exist(# final # o) {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_param_lock_doesnt_exist(# final # p) {  }   /* is CONSISTENT: parameter is non-final but unchanged*/  @ RequiresLock ( # ) public void good_param_nonfinal(# # p) {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_param_is_good(# final # p) {  }   /*is UNASSOCIATED: cannot use 'this' on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_explicit_this() {  }   /*is UNASSOCIATED: cannot use 'this' (implicit) on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_implicit_this() {  }   /*is CONSISTENT*/  @ RequiresLock ( # ) public static void good_staticMethod_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void good_staticMethod_typeQualified_staticLock() {  }   /*is UNBOUND: static use of this with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionWithThis() {  }   /*is UNBOUND: static use of this (implicit) with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionImplicitThis() {  }   /*is UNBOUND: No such class (default package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1() {  }   /*is UNBOUND: No such class (non-existent package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1a() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void staticMethod_paramLock(# final # p) {  } }
for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
[2012-10-31 11:25:36    INFO] Couldn't find lock DoesntExist in com.surelogic.tree.SyntaxTreeNode@2157a5c3 -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } ) @ RegionLocks ( { @ RegionLock ( # ) , @ RegionLock ( # ) , @ RegionLock ( # ) } ) public class StateLock_LockNames extends java.lang.Object { public  StateLock_LockNames () { # }   /*is UNASSOCIATED: cannot qualify a static lock with this*/  @ RequiresLock ( # ) public void bad_thisQualified_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_typeQualified_staticLock() {  }   /*is UNASSOCIATED: type-qualified instance lock*/  @ RequiresLock ( # ) public void bad_typeQualifiedInstance() {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_doesntExist() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_implicit_this() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_explicit_this() {  }   /*is UNBOUND: Parameter doesn't exist*/  @ RequiresLock ( # ) public void bad_param_doesnt_exist(# final # o) {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_param_lock_doesnt_exist(# final # p) {  }   /* is CONSISTENT: parameter is non-final but unchanged*/  @ RequiresLock ( # ) public void good_param_nonfinal(# # p) {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_param_is_good(# final # p) {  }   /*is UNASSOCIATED: cannot use 'this' on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_explicit_this() {  }   /*is UNASSOCIATED: cannot use 'this' (implicit) on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_implicit_this() {  }   /*is CONSISTENT*/  @ RequiresLock ( # ) public static void good_staticMethod_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void good_staticMethod_typeQualified_staticLock() {  }   /*is UNBOUND: static use of this with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionWithThis() {  }   /*is UNBOUND: static use of this (implicit) with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionImplicitThis() {  }   /*is UNBOUND: No such class (default package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1() {  }   /*is UNBOUND: No such class (non-existent package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1a() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void staticMethod_paramLock(# final # p) {  } }
for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
[2012-10-31 11:25:36    INFO] Couldn't find lock DoesntExist in com.surelogic.tree.SyntaxTreeNode@1b91ce2a -- @ PolicyLocks ( { @ PolicyLock ( # ) , @ PolicyLock ( # ) , @ PolicyLock ( # ) } ) public class PolicyLock_LockNames extends java.lang.Object { public  PolicyLock_LockNames () { # }   /*is UNASSOCIATED: cannot qualify a static lock with this*/  @ RequiresLock ( # ) public void bad_thisQualified_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_typeQualified_staticLock() {  }   /*is UNASSOCIATED: type-qualified instance lock*/  @ RequiresLock ( # ) public void bad_typeQualifiedInstance() {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_doesntExist() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_implicit_this() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_explicit_this() {  }   /*is UNBOUND: Parameter doesn't exist*/  @ RequiresLock ( # ) public void bad_param_doesnt_exist(# final # o) {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_param_lock_doesnt_exist(# final # p) {  }   /* is CONSISTENT: parameter is non-final, but not changed */  @ RequiresLock ( # ) public void good_param_nonfinal(# # p) {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_param_is_good(# final # p) {  }   /*is UNASSOCIATED: cannot use 'this' on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_explicit_this() {  }   /*is UNASSOCIATED: cannot use 'this' (implicit) on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_implicit_this() {  }   /*is CONSISTENT*/  @ RequiresLock ( # ) public static void good_staticMethod_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void good_staticMethod_typeQualified_staticLock() {  }   /*is UNBOUND: static use of this with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionWithThis() {  }   /*is UNBOUND: static use of this (implicit) with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionImplicitThis() {  }   /*is UNBOUND: No such class (default package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1() {  }   /*is UNBOUND: No such class (non-existent package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1a() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void staticMethod_paramLock(# final # p) {  } }
for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
[2012-10-31 11:25:36    INFO] Couldn't find lock DoesntExist in com.surelogic.tree.SyntaxTreeNode@1b91ce2a -- @ PolicyLocks ( { @ PolicyLock ( # ) , @ PolicyLock ( # ) , @ PolicyLock ( # ) } ) public class PolicyLock_LockNames extends java.lang.Object { public  PolicyLock_LockNames () { # }   /*is UNASSOCIATED: cannot qualify a static lock with this*/  @ RequiresLock ( # ) public void bad_thisQualified_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_typeQualified_staticLock() {  }   /*is UNASSOCIATED: type-qualified instance lock*/  @ RequiresLock ( # ) public void bad_typeQualifiedInstance() {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_doesntExist() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_implicit_this() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_explicit_this() {  }   /*is UNBOUND: Parameter doesn't exist*/  @ RequiresLock ( # ) public void bad_param_doesnt_exist(# final # o) {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_param_lock_doesnt_exist(# final # p) {  }   /* is CONSISTENT: parameter is non-final, but not changed */  @ RequiresLock ( # ) public void good_param_nonfinal(# # p) {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_param_is_good(# final # p) {  }   /*is UNASSOCIATED: cannot use 'this' on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_explicit_this() {  }   /*is UNASSOCIATED: cannot use 'this' (implicit) on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_implicit_this() {  }   /*is CONSISTENT*/  @ RequiresLock ( # ) public static void good_staticMethod_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void good_staticMethod_typeQualified_staticLock() {  }   /*is UNBOUND: static use of this with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionWithThis() {  }   /*is UNBOUND: static use of this (implicit) with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionImplicitThis() {  }   /*is UNBOUND: No such class (default package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1() {  }   /*is UNBOUND: No such class (non-existent package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1a() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void staticMethod_paramLock(# final # p) {  } }
for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
[2012-10-31 11:25:36    INFO] Couldn't find lock DoesntExist in com.surelogic.tree.SyntaxTreeNode@1b91ce2a -- @ PolicyLocks ( { @ PolicyLock ( # ) , @ PolicyLock ( # ) , @ PolicyLock ( # ) } ) public class PolicyLock_LockNames extends java.lang.Object { public  PolicyLock_LockNames () { # }   /*is UNASSOCIATED: cannot qualify a static lock with this*/  @ RequiresLock ( # ) public void bad_thisQualified_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_typeQualified_staticLock() {  }   /*is UNASSOCIATED: type-qualified instance lock*/  @ RequiresLock ( # ) public void bad_typeQualifiedInstance() {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_doesntExist() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_implicit_this() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_explicit_this() {  }   /*is UNBOUND: Parameter doesn't exist*/  @ RequiresLock ( # ) public void bad_param_doesnt_exist(# final # o) {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_param_lock_doesnt_exist(# final # p) {  }   /* is CONSISTENT: parameter is non-final, but not changed */  @ RequiresLock ( # ) public void good_param_nonfinal(# # p) {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_param_is_good(# final # p) {  }   /*is UNASSOCIATED: cannot use 'this' on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_explicit_this() {  }   /*is UNASSOCIATED: cannot use 'this' (implicit) on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_implicit_this() {  }   /*is CONSISTENT*/  @ RequiresLock ( # ) public static void good_staticMethod_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void good_staticMethod_typeQualified_staticLock() {  }   /*is UNBOUND: static use of this with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionWithThis() {  }   /*is UNBOUND: static use of this (implicit) with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionImplicitThis() {  }   /*is UNBOUND: No such class (default package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1() {  }   /*is UNBOUND: No such class (non-existent package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1a() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void staticMethod_paramLock(# final # p) {  } }
for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
[2012-10-31 11:25:36    INFO] Couldn't find lock DoesntExist in com.surelogic.tree.SyntaxTreeNode@1b91ce2a -- @ PolicyLocks ( { @ PolicyLock ( # ) , @ PolicyLock ( # ) , @ PolicyLock ( # ) } ) public class PolicyLock_LockNames extends java.lang.Object { public  PolicyLock_LockNames () { # }   /*is UNASSOCIATED: cannot qualify a static lock with this*/  @ RequiresLock ( # ) public void bad_thisQualified_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_typeQualified_staticLock() {  }   /*is UNASSOCIATED: type-qualified instance lock*/  @ RequiresLock ( # ) public void bad_typeQualifiedInstance() {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_doesntExist() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_implicit_this() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_explicit_this() {  }   /*is UNBOUND: Parameter doesn't exist*/  @ RequiresLock ( # ) public void bad_param_doesnt_exist(# final # o) {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_param_lock_doesnt_exist(# final # p) {  }   /* is CONSISTENT: parameter is non-final, but not changed */  @ RequiresLock ( # ) public void good_param_nonfinal(# # p) {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_param_is_good(# final # p) {  }   /*is UNASSOCIATED: cannot use 'this' on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_explicit_this() {  }   /*is UNASSOCIATED: cannot use 'this' (implicit) on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_implicit_this() {  }   /*is CONSISTENT*/  @ RequiresLock ( # ) public static void good_staticMethod_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void good_staticMethod_typeQualified_staticLock() {  }   /*is UNBOUND: static use of this with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionWithThis() {  }   /*is UNBOUND: static use of this (implicit) with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionImplicitThis() {  }   /*is UNBOUND: No such class (default package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1() {  }   /*is UNBOUND: No such class (non-existent package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1a() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void staticMethod_paramLock(# final # p) {  } }
for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
##SUBTASK_DONE
##WORK, 1
Total nodes     : 0
Starting analyses
Starting parallel ThreadEffectsModule [0]: 55 for org.eclipse.jdt.launching.JRE_CONTAINER
##SUBTASK, Starting parallel ThreadEffectsModule [0]: 55 for org.eclipse.jdt.launching.JRE_CONTAINER
##SUBTASK_DONE
##WORK, 1
Starting parallel ThreadEffectsModule [0]: 55 for TestLockSanityChecks
##SUBTASK, Starting parallel ThreadEffectsModule [0]: 55 for TestLockSanityChecks
##SUBTASK_DONE
##WORK, 1
Starting parallel LayersAnalysis [1]: 55 for org.eclipse.jdt.launching.JRE_CONTAINER
##SUBTASK, Starting parallel LayersAnalysis [1]: 55 for org.eclipse.jdt.launching.JRE_CONTAINER
##SUBTASK_DONE
##WORK, 1
Starting parallel LayersAnalysis [1]: 55 for TestLockSanityChecks
##SUBTASK, Starting parallel LayersAnalysis [1]: 55 for TestLockSanityChecks
##SUBTASK_DONE
##WORK, 1
Starting parallel EffectsAnalysis [2]: 55 for org.eclipse.jdt.launching.JRE_CONTAINER
##SUBTASK, Starting parallel EffectsAnalysis [2]: 55 for org.eclipse.jdt.launching.JRE_CONTAINER
##SUBTASK_DONE
##WORK, 1
Starting parallel EffectsAnalysis [2]: 55 for TestLockSanityChecks
##SUBTASK, Starting parallel EffectsAnalysis [2]: 55 for TestLockSanityChecks
##SUBTASK_DONE
##WORK, 1
Starting parallel ParameterizedTypeAnalysis [3]: 55 for org.eclipse.jdt.launching.JRE_CONTAINER
##SUBTASK, Starting parallel ParameterizedTypeAnalysis [3]: 55 for org.eclipse.jdt.launching.JRE_CONTAINER
##SUBTASK_DONE
##WORK, 1
Starting parallel ParameterizedTypeAnalysis [3]: 55 for TestLockSanityChecks
##SUBTASK, Starting parallel ParameterizedTypeAnalysis [3]: 55 for TestLockSanityChecks
##SUBTASK_DONE
##WORK, 1
Starting parallel LockAnalysis [4]: 55 for org.eclipse.jdt.launching.JRE_CONTAINER
##SUBTASK, Starting parallel LockAnalysis [4]: 55 for org.eclipse.jdt.launching.JRE_CONTAINER
##SUBTASK_DONE
##WORK, 1
Starting parallel LockAnalysis [4]: 55 for TestLockSanityChecks
##SUBTASK, Starting parallel LockAnalysis [4]: 55 for TestLockSanityChecks
##SUBTASK_DONE
##WORK, 1
Starting parallel EqualityAnalysis [5]: 55 for org.eclipse.jdt.launching.JRE_CONTAINER
##SUBTASK, Starting parallel EqualityAnalysis [5]: 55 for org.eclipse.jdt.launching.JRE_CONTAINER
##SUBTASK_DONE
##WORK, 1
Starting parallel EqualityAnalysis [5]: 55 for TestLockSanityChecks
##SUBTASK, Starting parallel EqualityAnalysis [5]: 55 for TestLockSanityChecks
##SUBTASK_DONE
##WORK, 1
Starting PARALLEL UniquenessAnalysisModule [6]: 55 for org.eclipse.jdt.launching.JRE_CONTAINER
##SUBTASK, Starting PARALLEL UniquenessAnalysisModule [6]: 55 for org.eclipse.jdt.launching.JRE_CONTAINER
##SUBTASK_DONE
##WORK, 1
Starting PARALLEL UniquenessAnalysisModule [6]: 55 for TestLockSanityChecks
##SUBTASK, Starting PARALLEL UniquenessAnalysisModule [6]: 55 for TestLockSanityChecks
##SUBTASK_DONE
##WORK, 1
Starting parallel UtilityAnalysis [7]: 55 for org.eclipse.jdt.launching.JRE_CONTAINER
##SUBTASK, Starting parallel UtilityAnalysis [7]: 55 for org.eclipse.jdt.launching.JRE_CONTAINER
##SUBTASK_DONE
##WORK, 1
Starting parallel UtilityAnalysis [7]: 55 for TestLockSanityChecks
##SUBTASK, Starting parallel UtilityAnalysis [7]: 55 for TestLockSanityChecks
##SUBTASK_DONE
##WORK, 1
Starting parallel SingletonAnalysis [8]: 55 for org.eclipse.jdt.launching.JRE_CONTAINER
##SUBTASK, Starting parallel SingletonAnalysis [8]: 55 for org.eclipse.jdt.launching.JRE_CONTAINER
##SUBTASK_DONE
##WORK, 1
Starting parallel SingletonAnalysis [8]: 55 for TestLockSanityChecks
##SUBTASK, Starting parallel SingletonAnalysis [8]: 55 for TestLockSanityChecks
##SUBTASK_DONE
##WORK, 1
Updating consistency proof
Done in 6022 ms.
Parsing         : 1310 ms
Rewriting       : 156 ms
Canonicalization: 266 ms
Cleanup         : 0 ms
Add required    : 0 ms
Drop creation   : 31 ms
Promise parsing : 733 ms
Promise scrub   : 2902 ms
ThreadEffectsModule	: 15 ms
LayersAnalysis	: 16 ms
EffectsAnalysis	: 140 ms
ParameterizedTypeAnalysis	: 16 ms
LockAnalysis	: 125 ms
EqualityAnalysis	: 15 ms
UniquenessAnalysisModule	: 78 ms
UtilityAnalysis	: 0 ms
SingletonAnalysis	: 16 ms
All analyses    : 421 ms
Sea update      : 203 ms
Sea export      : 0 ms
Destroyed nodes : 1141
Canonical nodes : 6640
Total nodes     : 0
Declarations    : 775
Statements      : 574
Blocks          : 375
Partial binding:  810 ms
Full binding:     812 ms
cached = 0
totalT = 0
[GC 186031K->61786K(372288K), 0.0176673 secs]
Project TestLockSanityChecks
	Inconsistent=6
	Promises=548
	Info=26
	Consistent=55
Project (standard library)
Finished summaries.zip
##DONE
Closing AnnotationRules log
Closed JUnitXMLOutput RemoteJSureRun.AnnotationRules
Scanning complete (8783 ms)
No socket to close
Closing std streams
Process result after waiting = 0
