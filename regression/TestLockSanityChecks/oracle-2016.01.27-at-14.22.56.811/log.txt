LOCAL vm : 1.8.0_05
Path: /Users/aarong/git/common/common/lib/runtime/guava-18.0.jar
Path: /Users/aarong/git/jsure/jsure-analysis/bin
Path: /Users/aarong/git/common/common/lib/runtime/ant-1.9.6.jar
Path: /Users/aarong/git/jsure/jsure-common
Path: /Users/aarong/git/common/common
Path: /Users/aarong/git/common/common/lib/runtime/javax.servlet-api-3.1.0.jar
Path: /Users/aarong/git/jsure/jsure-analysis
Path: /Users/aarong/git/common/common/lib/runtime/antlr-3.5.2-runtime.jar
Path: /Users/aarong/git/jsure/jsure-common/lib/runtime/diffutils-1.2.1.jar
Path: /Users/aarong/git/common/common/bin
Path: /Users/aarong/git/common/common/lib/runtime/asm-commons-5.0.4.jar
Path: /Users/aarong/git/jsure/jsure-analysis/lib/runtime/renamedJavac.jar
Path: /Users/aarong/git/common/common/lib/runtime/promises-5.6.0.jar
Path: /Users/aarong/git/common/common/lib/runtime/derby-10.11.1.1.jar
Path: /Users/aarong/git/jsure/jsure-common/bin
Path: /Users/aarong/git/common/common/lib/runtime/asm-5.0.4.jar
Path: /Users/aarong/git/common/common/lib/runtime/asm-tree-5.0.4.jar
Path: /Users/aarong/git/common/common/lib/runtime/hppc-0.7.1.jar
Path: /Users/aarong/git/common/common/lib/runtime/commons-lang3-3.4.jar
Starting process:
	/Library/Java/JavaVirtualMachines/jdk1.8.0_05.jdk/Contents/Home/jre/bin/java
	-Dsl.running.in.remote.vm=true
	-Dsurelogic.test.code=NONE
	-XX:MaxPermSize=512m
	-verbosegc
	-DSureLogicX=true
	-Dsl.run.dir=/Users/aarong/Work/Eclipse-Workspaces/Eclipse-luna/Fluid Regression/.jsure-data/TestLockSanityChecks-2016.01.27-at-14.22.56.811
	-Dfluid.ir.versioning=Versioning.Off
	-Djsure.analysis.directory.url=file:/Eclipses/eclipse-standard-luna-SR2-macosx-cocoa-x86_64/../../Users/aarong/git/jsure/jsure-analysis/
	-Xmx2048m
	-classpath
	/Users/aarong/git/common/common/lib/runtime/guava-18.0.jar:/Users/aarong/git/jsure/jsure-analysis/bin:/Users/aarong/git/common/common/lib/runtime/ant-1.9.6.jar:/Users/aarong/git/jsure/jsure-common:/Users/aarong/git/common/common:/Users/aarong/git/common/common/lib/runtime/javax.servlet-api-3.1.0.jar:/Users/aarong/git/jsure/jsure-analysis:/Users/aarong/git/common/common/lib/runtime/antlr-3.5.2-runtime.jar:/Users/aarong/git/jsure/jsure-common/lib/runtime/diffutils-1.2.1.jar:/Users/aarong/git/common/common/bin:/Users/aarong/git/common/common/lib/runtime/asm-commons-5.0.4.jar:/Users/aarong/git/jsure/jsure-analysis/lib/runtime/renamedJavac.jar:/Users/aarong/git/common/common/lib/runtime/promises-5.6.0.jar:/Users/aarong/git/common/common/lib/runtime/derby-10.11.1.1.jar:/Users/aarong/git/jsure/jsure-common/bin:/Users/aarong/git/common/common/lib/runtime/asm-5.0.4.jar:/Users/aarong/git/common/common/lib/runtime/asm-tree-5.0.4.jar:/Users/aarong/git/common/common/lib/runtime/hppc-0.7.1.jar:/Users/aarong/git/common/common/lib/runtime/commons-lang3-3.4.jar
	com.surelogic.javac.jobs.RemoteJSureRun

First line in REMOTE vm = Java HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=512m; support was removed in 8.0
REMOTE: [GC (Allocation Failure)  512K->504K(327168K), 0.0012850 secs]
REMOTE: [GC (Allocation Failure)  1002K->576K(327680K), 0.0008370 secs]
REMOTE: [GC (Allocation Failure)  1600K->688K(327680K), 0.0014190 secs]
REMOTE: [GC (Allocation Failure)  1712K->800K(328704K), 0.0014360 secs]
REMOTE: [GC (Allocation Failure)  2848K->1059K(328704K), 0.0015920 secs]
REMOTE: JVM started: 1.8.0_05
REMOTE: Log level: INFO
REMOTE: Created reader
REMOTE: Created monitor
REMOTE: Created log handler
REMOTE: Running RemoteJSureRun
REMOTE: [GC (Allocation Failure)  3107K->1243K(331264K), 0.0009580 secs]
REMOTE: [GC (Allocation Failure)  5339K->1675K(331264K), 0.0014440 secs]
REMOTE: [GC (Allocation Failure)  5771K->1731K(335360K), 0.0012870 secs]
REMOTE: runPath = /Users/aarong/Work/Eclipse-Workspaces/Eclipse-luna/Fluid Regression/.jsure-data/TestLockSanityChecks-2016.01.27-at-14.22.56.811
REMOTE: Creating run: TestLockSanityChecks-2016.01.27-at-14.22.56.811
REMOTE: Defaulting project org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7 to Java 0
REMOTE: Created project org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7 from XML
REMOTE: Setting project TestLockSanityChecks to Java 7
REMOTE: [GC (Allocation Failure)  9923K->2386K(335360K), 0.0023140 secs]
REMOTE: Created project TestLockSanityChecks from XML
REMOTE: projects = TestLockSanityChecks
REMOTE: Loading edu.cmu.cs.fluid.make.nonabductive.proposals = false
REMOTE: Loading edu.cmu.cs.fluid.load.all.classes = false
REMOTE: Loading edu.cmu.cs.fluid.timeoutFlag = true
REMOTE: Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.BCA = false
REMOTE: Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.ConstantExpr = false
REMOTE: Loading edu.cmu.cs.fluid.physMemoryInMB = 20480
REMOTE: Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.EqualityAssurance = true
REMOTE: Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.ThreadSafe = true
REMOTE: Loading edu.cmu.cs.fluid.xml.diff.directory = /Users/aarong/Work/Eclipse-Workspaces/Eclipse-luna/Fluid Regression/.jsure-data/promises-xml
REMOTE: Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.IRConcurrencyDetector = true
REMOTE: Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.Singleton = true
REMOTE: Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.CALLS = false
REMOTE: Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.BenchmarkingUniquenessSE = false
REMOTE: Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.ThreadEffectAssurance2 = true
REMOTE: Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.Binder = false
REMOTE: Loading com.surelogic.jsure.active.com.surelogic.jsure.cliend.eclipse.TypeBasedAlias = false
REMOTE: Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.Nullable = true
REMOTE: Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.TestIsFunctional = false
REMOTE: Loading edu.cmu.cs.fluid.tool-memory-mb = 2048
REMOTE: Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.DefinitelyAssigned = false
REMOTE: Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.UniquenessAssuranceSE = true
REMOTE: Loading edu.cmu.cs.fluid.analysis.thread.count = 8
REMOTE: Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.LockModelBuilder = true
REMOTE: Loading edu.cmu.cs.fluid.timeoutSec = 11
REMOTE: Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.NonNullRawTypes = false
REMOTE: Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.EffectsAndLocks = false
REMOTE: Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.LayersAssurance = true
REMOTE: Loading edu.cmu.cs.fluid.default.JRE = org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: Loading edu.cmu.cs.fluid.timeoutWarningSec = 30
REMOTE: Loading edu.cmu.cs.fluid.modeling.problem.filters = 00000012com\.apple.*00000013com\.oracle.*00000010com\.sun.*00000014.*\.internal.*00000023.*BakedArrayList\.class00000007apple.*00000008oracle.*00000011quicktime.*00000005sun.*
REMOTE: Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.Utility = true
REMOTE: Loading edu.cmu.cs.fluid.scan.may.use.compression = true
REMOTE: Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.ParameterizedType = true
REMOTE: Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.Final = false
REMOTE: Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.LockAssurance4 = true
REMOTE: Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.LockAssurance3 = false
REMOTE: Loading edu.cmu.cs.fluid.data.directory = /Users/aarong/Work/Eclipse-Workspaces/Eclipse-luna/Fluid Regression/.jsure-data
REMOTE: Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.NullablePreprocessor = true
REMOTE: Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.EffectAssurance2 = true
REMOTE: Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.LV = false
REMOTE: Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.StructureAssurance = true
REMOTE: Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.Types = false
REMOTE: JSure data dir = /Users/aarong/Work/Eclipse-Workspaces/Eclipse-luna/Fluid Regression/.jsure-data
REMOTE: XML diff dir   = /Users/aarong/Work/Eclipse-Workspaces/Eclipse-luna/Fluid Regression/.jsure-data/promises-xml
REMOTE: Looking for JRE in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: default JRE = org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: Initialized job
REMOTE: Created com.surelogic.analysis.concurrency.detector.ConcurrencyDetector
REMOTE: Starting a new group for ConcurrencyDetector
REMOTE: Created com.surelogic.analysis.threads.ThreadEffectsModule
REMOTE: Created com.surelogic.analysis.structure.StructureAnalysis
REMOTE: Created com.surelogic.analysis.annotationbounds.ParameterizedTypeAnalysis
REMOTE: Created com.surelogic.analysis.equality.EqualityAnalysis
REMOTE: Created com.surelogic.analysis.layers.LayersAnalysis
REMOTE: Created com.surelogic.analysis.utility.UtilityAnalysis
REMOTE: Starting a new group for UtilityAnalysis
REMOTE: Group: EXTERNALLY
REMOTE: 	ConcurrencyDetector
REMOTE: 	ThreadEffectsModule
REMOTE: 	StructureAnalysis
REMOTE: 	ParameterizedTypeAnalysis
REMOTE: 	EqualityAnalysis
REMOTE: 	LayersAnalysis
REMOTE: Created com.surelogic.analysis.singleton.SingletonAnalysis
REMOTE: Created com.surelogic.analysis.concurrency.driver.LockModelBuilder
REMOTE: Starting a new group for LockModelBuilder
REMOTE: Group: com.surelogic.analysis.visitors.TopLevelAnalysisVisitor$1@3d012ddd, EXTERNALLY
REMOTE: 	UtilityAnalysis
REMOTE: 	SingletonAnalysis
REMOTE: Created com.surelogic.analysis.concurrency.driver.ThreadSafeAnalysis
REMOTE: Starting a new group for ThreadSafeAnalysis
REMOTE: Group: EXTERNALLY
REMOTE: 	LockModelBuilder
REMOTE: Created com.surelogic.analysis.concurrency.driver.NewLockAnalysis
REMOTE: Starting a new group for NewLockAnalysis
REMOTE: Group: com.surelogic.analysis.visitors.TopLevelAnalysisVisitor$1@3d012ddd, EXTERNALLY
REMOTE: 	ThreadSafeAnalysis
REMOTE: Created com.surelogic.analysis.effects.EffectsAnalysis
REMOTE: Starting a new group for EffectsAnalysis
REMOTE: Group: class com.surelogic.analysis.bca.BindingContextAnalysis, EXTERNALLY
REMOTE: 	NewLockAnalysis
REMOTE: Created com.surelogic.analysis.uniqueness.classic.sideeffecting.UniquenessAnalysisModule
REMOTE: Starting a new group for UniquenessAnalysisModule
REMOTE: Group: com.surelogic.analysis.visitors.TopLevelAnalysisVisitor$1@3d012ddd, class com.surelogic.analysis.bca.BindingContextAnalysis, EXTERNALLY
REMOTE: 	EffectsAnalysis
REMOTE: Created com.surelogic.analysis.nullable.NullablePreprocessorModule
REMOTE: Starting a new group for NullablePreprocessorModule
REMOTE: Group: com.surelogic.analysis.uniqueness.classic.sideeffecting.UniquenessAnalysisModule$1@6f2b958e, class com.surelogic.analysis.bca.BindingContextAnalysis, INTERNALLY
REMOTE: 	UniquenessAnalysisModule
REMOTE: Created com.surelogic.analysis.nullable.NullableModule2
REMOTE: Starting a new group for NullableModule2
REMOTE: Group: EXTERNALLY
REMOTE: 	NullablePreprocessorModule
REMOTE: Group: com.surelogic.analysis.granules.FlowUnitGranulator@1eb44e46, EXTERNALLY
REMOTE: 	NullableModule2
REMOTE: ##TASK, Scan, 1000
REMOTE: Initializing ...
REMOTE: ##SUBTASK, Initializing ...
REMOTE: monitor = com.surelogic.common.jobs.remote.AbstractRemoteSLJob$Monitor@6504e3b2
REMOTE: process() using 8 threads
REMOTE: [GC (Allocation Failure)  10578K->3114K(340992K), 0.0020060 secs]
REMOTE: [GC (Allocation Failure)  16426K->3255K(340992K), 0.0018910 secs]
REMOTE: [GC (Allocation Failure)  16522K->15991K(344576K), 0.0079810 secs]
REMOTE: [GC (Allocation Failure)  32773K->32405K(349184K), 0.0104140 secs]
REMOTE: Done initializing org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: 0
REMOTE: org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: Done initializing with /jre1.7.0_55.jre/Contents/Home/lib/resources.jar : 2465399
REMOTE: [GC (Allocation Failure)  49301K->45191K(354816K), 0.0088630 secs]
REMOTE: [GC (Allocation Failure)  66695K->49124K(360448K), 0.0069790 secs]
REMOTE: org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: Done initializing with /jre1.7.0_55.jre/Contents/Home/lib/rt.jar : 64311652
REMOTE: org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: Done initializing with /jre1.7.0_55.jre/Contents/Home/lib/jsse.jar : 582478
REMOTE: org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: Done initializing with /jre1.7.0_55.jre/Contents/Home/lib/jce.jar : 109504
REMOTE: org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: Done initializing with /jre1.7.0_55.jre/Contents/Home/lib/charsets.jar : 3696271
REMOTE: org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: Done initializing with /jre1.7.0_55.jre/Contents/Home/lib/jfr.jar : 532548
REMOTE: org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: Done initializing with /jre1.7.0_55.jre/Contents/Home/lib/ext/dnsns.jar : 8923
REMOTE: org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: Done initializing with /jre1.7.0_55.jre/Contents/Home/lib/ext/localedata.jar : 550578
REMOTE: org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: Done initializing with /jre1.7.0_55.jre/Contents/Home/lib/ext/sunec.jar : 15941
REMOTE: org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: Done initializing with /jre1.7.0_55.jre/Contents/Home/lib/ext/sunjce_provider.jar : 198101
REMOTE: org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: Done initializing with /jre1.7.0_55.jre/Contents/Home/lib/ext/sunpkcs11.jar : 237244
REMOTE: org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: Done initializing with /jre1.7.0_55.jre/Contents/Home/lib/ext/zipfs.jar : 68751
REMOTE: org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: Done initializing with /System/Library/Java/Extensions/MRJToolkit.jar : 12849
REMOTE: Done initializing TestLockSanityChecks: 55
REMOTE: Trying to find /Users/aarong/Work/Eclipse-Workspaces/Eclipse-luna/Fluid Regression/.jsure-data/TestLockSanityChecks-2016.01.27-at-14.22.56.811/source/TestLockSanityChecks.bin.zip
REMOTE: TestLockSanityChecks: TestLockSanityChecks -> org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: Done initializing org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: 0
REMOTE: TestLockSanityChecks: Done initializing with /jre1.7.0_55.jre/Contents/Home/lib/resources.jar : 2465399
REMOTE: Replacing CUDrop: (default)
REMOTE: Replacing CUDrop: apple.applescript
REMOTE: Replacing CUDrop: apple.laf
REMOTE: Replacing CUDrop: apple.launcher
REMOTE: Replacing CUDrop: apple.security
REMOTE: Replacing CUDrop: com.apple.concurrent
REMOTE: Replacing CUDrop: com.apple.eawt
REMOTE: Replacing CUDrop: com.apple.eawt.event
REMOTE: Replacing CUDrop: com.apple.eio
REMOTE: Replacing CUDrop: com.apple.laf
REMOTE: Replacing CUDrop: com.apple.laf.resources
REMOTE: Replacing CUDrop: com.oracle.net
REMOTE: Replacing CUDrop: com.oracle.nio
REMOTE: Replacing CUDrop: com.oracle.util
REMOTE: Replacing CUDrop: com.sun.accessibility.internal.resources
REMOTE: Replacing CUDrop: com.sun.activation.registries
REMOTE: Replacing CUDrop: com.sun.awt
REMOTE: Replacing CUDrop: com.sun.beans
REMOTE: Replacing CUDrop: com.sun.beans.decoder
REMOTE: Replacing CUDrop: com.sun.beans.editors
REMOTE: Replacing CUDrop: com.sun.beans.finder
REMOTE: Replacing CUDrop: com.sun.beans.infos
REMOTE: Replacing CUDrop: com.sun.corba.se.impl.activation
REMOTE: Replacing CUDrop: com.sun.corba.se.impl.copyobject
REMOTE: Replacing CUDrop: com.sun.corba.se.impl.corba
REMOTE: Replacing CUDrop: com.sun.corba.se.impl.dynamicany
REMOTE: Replacing CUDrop: com.sun.corba.se.impl.encoding
REMOTE: Replacing CUDrop: com.sun.corba.se.impl.interceptors
REMOTE: Replacing CUDrop: com.sun.corba.se.impl.io
REMOTE: Replacing CUDrop: com.sun.corba.se.impl.ior
REMOTE: Replacing CUDrop: com.sun.corba.se.impl.ior.iiop
REMOTE: Replacing CUDrop: com.sun.corba.se.impl.javax.rmi.CORBA
REMOTE: Replacing CUDrop: com.sun.corba.se.impl.javax.rmi
REMOTE: Replacing CUDrop: com.sun.corba.se.impl.legacy.connection
REMOTE: Replacing CUDrop: com.sun.corba.se.impl.logging
REMOTE: Replacing CUDrop: com.sun.corba.se.impl.monitoring
REMOTE: Replacing CUDrop: com.sun.corba.se.impl.naming.cosnaming
REMOTE: Replacing CUDrop: com.sun.corba.se.impl.naming.namingutil
REMOTE: Replacing CUDrop: com.sun.corba.se.impl.naming.pcosnaming
REMOTE: Replacing CUDrop: com.sun.corba.se.impl.oa
REMOTE: Replacing CUDrop: com.sun.corba.se.impl.oa.poa
REMOTE: Replacing CUDrop: com.sun.corba.se.impl.oa.toa
REMOTE: Replacing CUDrop: com.sun.corba.se.impl.orb
REMOTE: Replacing CUDrop: com.sun.corba.se.impl.orbutil
REMOTE: Replacing CUDrop: com.sun.corba.se.impl.orbutil.closure
REMOTE: Replacing CUDrop: com.sun.corba.se.impl.orbutil.concurrent
REMOTE: Replacing CUDrop: com.sun.corba.se.impl.orbutil.fsm
REMOTE: Replacing CUDrop: com.sun.corba.se.impl.orbutil.graph
REMOTE: Replacing CUDrop: com.sun.corba.se.impl.orbutil.threadpool
REMOTE: Replacing CUDrop: com.sun.corba.se.impl.presentation.rmi
REMOTE: Replacing CUDrop: com.sun.corba.se.impl.protocol
REMOTE: Replacing CUDrop: com.sun.corba.se.impl.protocol.giopmsgheaders
REMOTE: Replacing CUDrop: com.sun.corba.se.impl.resolver
REMOTE: Replacing CUDrop: com.sun.corba.se.impl.transport
REMOTE: Replacing CUDrop: com.sun.corba.se.impl.util
REMOTE: Replacing CUDrop: com.sun.corba.se.internal.CosNaming
REMOTE: Replacing CUDrop: com.sun.corba.se.internal.Interceptors
REMOTE: Replacing CUDrop: com.sun.corba.se.internal.POA
REMOTE: Replacing CUDrop: com.sun.corba.se.internal.corba
REMOTE: Replacing CUDrop: com.sun.corba.se.internal.iiop
REMOTE: Replacing CUDrop: com.sun.corba.se.org.omg.CORBA
REMOTE: Replacing CUDrop: com.sun.corba.se.pept.broker
REMOTE: Replacing CUDrop: com.sun.corba.se.pept.encoding
REMOTE: Replacing CUDrop: com.sun.corba.se.pept.protocol
REMOTE: Replacing CUDrop: com.sun.corba.se.pept.transport
REMOTE: Replacing CUDrop: com.sun.corba.se.spi.activation
REMOTE: Replacing CUDrop: com.sun.corba.se.spi.activation.InitialNameServicePackage
REMOTE: Replacing CUDrop: com.sun.corba.se.spi.activation.LocatorPackage
REMOTE: Replacing CUDrop: com.sun.corba.se.spi.activation.RepositoryPackage
REMOTE: Replacing CUDrop: com.sun.corba.se.spi.copyobject
REMOTE: Replacing CUDrop: com.sun.corba.se.spi.encoding
REMOTE: Replacing CUDrop: com.sun.corba.se.spi.extension
REMOTE: Replacing CUDrop: com.sun.corba.se.spi.ior
REMOTE: Replacing CUDrop: com.sun.corba.se.spi.ior.iiop
REMOTE: Replacing CUDrop: com.sun.corba.se.spi.legacy.connection
REMOTE: Replacing CUDrop: com.sun.corba.se.spi.legacy.interceptor
REMOTE: Replacing CUDrop: com.sun.corba.se.spi.logging
REMOTE: Replacing CUDrop: com.sun.corba.se.spi.monitoring
REMOTE: Replacing CUDrop: com.sun.corba.se.spi.oa
REMOTE: Replacing CUDrop: com.sun.corba.se.spi.orb
REMOTE: Replacing CUDrop: com.sun.corba.se.spi.orbutil.closure
REMOTE: Replacing CUDrop: com.sun.corba.se.spi.orbutil.fsm
REMOTE: Replacing CUDrop: com.sun.corba.se.spi.orbutil.proxy
REMOTE: Replacing CUDrop: com.sun.corba.se.spi.orbutil.threadpool
REMOTE: Replacing CUDrop: com.sun.corba.se.spi.presentation.rmi
REMOTE: Replacing CUDrop: com.sun.corba.se.spi.protocol
REMOTE: Replacing CUDrop: com.sun.corba.se.spi.resolver
REMOTE: Replacing CUDrop: com.sun.corba.se.spi.servicecontext
REMOTE: Replacing CUDrop: com.sun.corba.se.spi.transport
REMOTE: Replacing CUDrop: com.sun.demo.jvmti.hprof
REMOTE: Replacing CUDrop: com.sun.image.codec.jpeg
REMOTE: Replacing CUDrop: com.sun.imageio.plugins.bmp
REMOTE: Replacing CUDrop: com.sun.imageio.plugins.common
REMOTE: Replacing CUDrop: com.sun.imageio.plugins.gif
REMOTE: Replacing CUDrop: com.sun.imageio.plugins.jpeg
REMOTE: Replacing CUDrop: com.sun.imageio.plugins.png
REMOTE: Replacing CUDrop: com.sun.imageio.plugins.wbmp
REMOTE: Replacing CUDrop: com.sun.imageio.spi
REMOTE: Replacing CUDrop: com.sun.imageio.stream
REMOTE: Replacing CUDrop: com.sun.istack.internal
REMOTE: Replacing CUDrop: com.sun.istack.internal.localization
REMOTE: Replacing CUDrop: com.sun.istack.internal.logging
REMOTE: Replacing CUDrop: com.sun.java.browser.dom
REMOTE: Replacing CUDrop: com.sun.java.browser.net
REMOTE: Replacing CUDrop: com.sun.java.swing
REMOTE: Replacing CUDrop: com.sun.java.swing.plaf.gtk
REMOTE: Replacing CUDrop: com.sun.java.swing.plaf.gtk.resources
REMOTE: Replacing CUDrop: com.sun.java.swing.plaf.motif
REMOTE: Replacing CUDrop: com.sun.java.swing.plaf.motif.resources
REMOTE: Replacing CUDrop: com.sun.java.swing.plaf.nimbus
REMOTE: Replacing CUDrop: com.sun.java.swing.plaf.windows
REMOTE: Replacing CUDrop: com.sun.java.swing.plaf.windows.resources
REMOTE: Replacing CUDrop: com.sun.java.util.jar.pack
REMOTE: Replacing CUDrop: com.sun.java_cup.internal.runtime
REMOTE: Replacing CUDrop: com.sun.jmx.defaults
REMOTE: Replacing CUDrop: com.sun.jmx.interceptor
REMOTE: Replacing CUDrop: com.sun.jmx.mbeanserver
REMOTE: Replacing CUDrop: com.sun.jmx.remote.internal
REMOTE: Replacing CUDrop: com.sun.jmx.remote.protocol.iiop
REMOTE: Replacing CUDrop: com.sun.jmx.remote.protocol.rmi
REMOTE: Replacing CUDrop: com.sun.jmx.remote.security
REMOTE: Replacing CUDrop: com.sun.jmx.remote.util
REMOTE: Replacing CUDrop: com.sun.jmx.snmp
REMOTE: Replacing CUDrop: com.sun.jmx.snmp.IPAcl
REMOTE: Replacing CUDrop: com.sun.jmx.snmp.agent
REMOTE: Replacing CUDrop: com.sun.jmx.snmp.daemon
REMOTE: Replacing CUDrop: com.sun.jmx.snmp.defaults
REMOTE: Replacing CUDrop: com.sun.jmx.snmp.internal
REMOTE: Replacing CUDrop: com.sun.jmx.snmp.mpm
REMOTE: Replacing CUDrop: com.sun.jmx.snmp.tasks
REMOTE: Replacing CUDrop: com.sun.jmx.trace
REMOTE: Replacing CUDrop: com.sun.jndi.cosnaming
REMOTE: Replacing CUDrop: com.sun.jndi.dns
REMOTE: Replacing CUDrop: com.sun.jndi.ldap
REMOTE: Replacing CUDrop: com.sun.jndi.ldap.ext
REMOTE: Replacing CUDrop: com.sun.jndi.ldap.pool
REMOTE: Replacing CUDrop: com.sun.jndi.ldap.sasl
REMOTE: Replacing CUDrop: com.sun.jndi.rmi.registry
REMOTE: Replacing CUDrop: com.sun.jndi.toolkit.corba
REMOTE: Replacing CUDrop: com.sun.jndi.toolkit.ctx
REMOTE: Replacing CUDrop: com.sun.jndi.toolkit.dir
REMOTE: Replacing CUDrop: com.sun.jndi.toolkit.url
REMOTE: Replacing CUDrop: com.sun.jndi.url.corbaname
REMOTE: Replacing CUDrop: com.sun.jndi.url.dns
REMOTE: Replacing CUDrop: com.sun.jndi.url.iiop
REMOTE: Replacing CUDrop: com.sun.jndi.url.iiopname
REMOTE: Replacing CUDrop: com.sun.jndi.url.ldap
REMOTE: Replacing CUDrop: com.sun.jndi.url.ldaps
REMOTE: Replacing CUDrop: com.sun.jndi.url.rmi
REMOTE: Replacing CUDrop: com.sun.management
REMOTE: Replacing CUDrop: com.sun.management.jmx
REMOTE: Replacing CUDrop: com.sun.media.sound
REMOTE: Replacing CUDrop: com.sun.naming.internal
REMOTE: Replacing CUDrop: com.sun.net.httpserver
REMOTE: Replacing CUDrop: com.sun.net.httpserver.spi
REMOTE: Replacing CUDrop: com.sun.net.ssl
REMOTE: Replacing CUDrop: com.sun.net.ssl.internal.www.protocol.https
REMOTE: Replacing CUDrop: com.sun.nio.file
REMOTE: Replacing CUDrop: com.sun.org.apache.bcel.internal
REMOTE: Replacing CUDrop: com.sun.org.apache.bcel.internal.classfile
REMOTE: Replacing CUDrop: com.sun.org.apache.bcel.internal.generic
REMOTE: Replacing CUDrop: com.sun.org.apache.bcel.internal.util
REMOTE: Replacing CUDrop: com.sun.org.apache.regexp.internal
REMOTE: Replacing CUDrop: com.sun.org.apache.xalan.internal
REMOTE: Replacing CUDrop: com.sun.org.apache.xalan.internal.extensions
REMOTE: Replacing CUDrop: com.sun.org.apache.xalan.internal.lib
REMOTE: Replacing CUDrop: com.sun.org.apache.xalan.internal.res
REMOTE: Replacing CUDrop: com.sun.org.apache.xalan.internal.templates
REMOTE: Replacing CUDrop: com.sun.org.apache.xalan.internal.utils
REMOTE: Replacing CUDrop: com.sun.org.apache.xalan.internal.xslt
REMOTE: Replacing CUDrop: com.sun.org.apache.xalan.internal.xsltc
REMOTE: Replacing CUDrop: com.sun.org.apache.xalan.internal.xsltc.cmdline
REMOTE: Replacing CUDrop: com.sun.org.apache.xalan.internal.xsltc.cmdline.getopt
REMOTE: Replacing CUDrop: com.sun.org.apache.xalan.internal.xsltc.compiler
REMOTE: Replacing CUDrop: com.sun.org.apache.xalan.internal.xsltc.compiler.util
REMOTE: Replacing CUDrop: com.sun.org.apache.xalan.internal.xsltc.dom
REMOTE: Replacing CUDrop: com.sun.org.apache.xalan.internal.xsltc.runtime
REMOTE: Replacing CUDrop: com.sun.org.apache.xalan.internal.xsltc.runtime.output
REMOTE: Replacing CUDrop: com.sun.org.apache.xalan.internal.xsltc.trax
REMOTE: Replacing CUDrop: com.sun.org.apache.xalan.internal.xsltc.util
REMOTE: Replacing CUDrop: com.sun.org.apache.xerces.internal.dom
REMOTE: Replacing CUDrop: com.sun.org.apache.xerces.internal.dom.events
REMOTE: Replacing CUDrop: com.sun.org.apache.xerces.internal.impl
REMOTE: Replacing CUDrop: com.sun.org.apache.xerces.internal.impl.dtd
REMOTE: Replacing CUDrop: com.sun.org.apache.xerces.internal.impl.dtd.models
REMOTE: Replacing CUDrop: com.sun.org.apache.xerces.internal.impl.dv
REMOTE: Replacing CUDrop: com.sun.org.apache.xerces.internal.impl.dv.dtd
REMOTE: Replacing CUDrop: com.sun.org.apache.xerces.internal.impl.dv.util
REMOTE: Replacing CUDrop: com.sun.org.apache.xerces.internal.impl.dv.xs
REMOTE: Replacing CUDrop: com.sun.org.apache.xerces.internal.impl.io
REMOTE: Replacing CUDrop: com.sun.org.apache.xerces.internal.impl.msg
REMOTE: Replacing CUDrop: com.sun.org.apache.xerces.internal.impl.validation
REMOTE: Replacing CUDrop: com.sun.org.apache.xerces.internal.impl.xpath
REMOTE: Replacing CUDrop: com.sun.org.apache.xerces.internal.impl.xpath.regex
REMOTE: Replacing CUDrop: com.sun.org.apache.xerces.internal.impl.xs
REMOTE: Replacing CUDrop: com.sun.org.apache.xerces.internal.impl.xs.identity
REMOTE: Replacing CUDrop: com.sun.org.apache.xerces.internal.impl.xs.models
REMOTE: Replacing CUDrop: com.sun.org.apache.xerces.internal.impl.xs.opti
REMOTE: Replacing CUDrop: com.sun.org.apache.xerces.internal.impl.xs.traversers
REMOTE: Replacing CUDrop: com.sun.org.apache.xerces.internal.impl.xs.util
REMOTE: Replacing CUDrop: com.sun.org.apache.xerces.internal.jaxp
REMOTE: Replacing CUDrop: com.sun.org.apache.xerces.internal.jaxp.datatype
REMOTE: Replacing CUDrop: com.sun.org.apache.xerces.internal.jaxp.validation
REMOTE: Replacing CUDrop: com.sun.org.apache.xerces.internal.parsers
REMOTE: Replacing CUDrop: com.sun.org.apache.xerces.internal.util
REMOTE: Replacing CUDrop: com.sun.org.apache.xerces.internal.utils
REMOTE: Replacing CUDrop: com.sun.org.apache.xerces.internal.xinclude
REMOTE: Replacing CUDrop: com.sun.org.apache.xerces.internal.xni
REMOTE: Replacing CUDrop: com.sun.org.apache.xerces.internal.xni.grammars
REMOTE: Replacing CUDrop: com.sun.org.apache.xerces.internal.xni.parser
REMOTE: Replacing CUDrop: com.sun.org.apache.xerces.internal.xpointer
REMOTE: Replacing CUDrop: com.sun.org.apache.xerces.internal.xs
REMOTE: Replacing CUDrop: com.sun.org.apache.xerces.internal.xs.datatypes
REMOTE: Replacing CUDrop: com.sun.org.apache.xml.internal.dtm
REMOTE: Replacing CUDrop: com.sun.org.apache.xml.internal.dtm.ref
REMOTE: Replacing CUDrop: com.sun.org.apache.xml.internal.dtm.ref.dom2dtm
REMOTE: Replacing CUDrop: com.sun.org.apache.xml.internal.dtm.ref.sax2dtm
REMOTE: Replacing CUDrop: com.sun.org.apache.xml.internal.res
REMOTE: Replacing CUDrop: com.sun.org.apache.xml.internal.resolver
REMOTE: Replacing CUDrop: com.sun.org.apache.xml.internal.resolver.helpers
REMOTE: Replacing CUDrop: com.sun.org.apache.xml.internal.resolver.readers
REMOTE: Replacing CUDrop: com.sun.org.apache.xml.internal.resolver.tools
REMOTE: Replacing CUDrop: com.sun.org.apache.xml.internal.security
REMOTE: Replacing CUDrop: com.sun.org.apache.xml.internal.security.algorithms
REMOTE: Replacing CUDrop: com.sun.org.apache.xml.internal.security.algorithms.implementations
REMOTE: Replacing CUDrop: com.sun.org.apache.xml.internal.security.c14n
REMOTE: Replacing CUDrop: com.sun.org.apache.xml.internal.security.c14n.helper
REMOTE: Replacing CUDrop: com.sun.org.apache.xml.internal.security.c14n.implementations
REMOTE: Replacing CUDrop: com.sun.org.apache.xml.internal.security.encryption
REMOTE: Replacing CUDrop: com.sun.org.apache.xml.internal.security.exceptions
REMOTE: Replacing CUDrop: com.sun.org.apache.xml.internal.security.keys
REMOTE: Replacing CUDrop: com.sun.org.apache.xml.internal.security.keys.content
REMOTE: Replacing CUDrop: com.sun.org.apache.xml.internal.security.keys.content.keyvalues
REMOTE: Replacing CUDrop: com.sun.org.apache.xml.internal.security.keys.content.x509
REMOTE: Replacing CUDrop: com.sun.org.apache.xml.internal.security.keys.keyresolver
REMOTE: Replacing CUDrop: com.sun.org.apache.xml.internal.security.keys.keyresolver.implementations
REMOTE: Replacing CUDrop: com.sun.org.apache.xml.internal.security.keys.storage
REMOTE: Replacing CUDrop: com.sun.org.apache.xml.internal.security.keys.storage.implementations
REMOTE: Replacing CUDrop: com.sun.org.apache.xml.internal.security.signature
REMOTE: Replacing CUDrop: com.sun.org.apache.xml.internal.security.transforms
REMOTE: Replacing CUDrop: com.sun.org.apache.xml.internal.security.transforms.implementations
REMOTE: Replacing CUDrop: com.sun.org.apache.xml.internal.security.transforms.params
REMOTE: Replacing CUDrop: com.sun.org.apache.xml.internal.security.utils
REMOTE: Replacing CUDrop: com.sun.org.apache.xml.internal.security.utils.resolver
REMOTE: Replacing CUDrop: com.sun.org.apache.xml.internal.security.utils.resolver.implementations
REMOTE: Replacing CUDrop: com.sun.org.apache.xml.internal.serialize
REMOTE: Replacing CUDrop: com.sun.org.apache.xml.internal.serializer
REMOTE: Replacing CUDrop: com.sun.org.apache.xml.internal.serializer.utils
REMOTE: Replacing CUDrop: com.sun.org.apache.xml.internal.utils
REMOTE: Replacing CUDrop: com.sun.org.apache.xml.internal.utils.res
REMOTE: Replacing CUDrop: com.sun.org.apache.xpath.internal
REMOTE: Replacing CUDrop: com.sun.org.apache.xpath.internal.axes
REMOTE: Replacing CUDrop: com.sun.org.apache.xpath.internal.compiler
REMOTE: Replacing CUDrop: com.sun.org.apache.xpath.internal.domapi
REMOTE: Replacing CUDrop: com.sun.org.apache.xpath.internal.functions
REMOTE: Replacing CUDrop: com.sun.org.apache.xpath.internal.jaxp
REMOTE: Replacing CUDrop: com.sun.org.apache.xpath.internal.objects
REMOTE: Replacing CUDrop: com.sun.org.apache.xpath.internal.operations
REMOTE: Replacing CUDrop: com.sun.org.apache.xpath.internal.patterns
REMOTE: Replacing CUDrop: com.sun.org.apache.xpath.internal.res
REMOTE: Replacing CUDrop: com.sun.org.glassfish.external.amx
REMOTE: Replacing CUDrop: com.sun.org.glassfish.external.arc
REMOTE: Replacing CUDrop: com.sun.org.glassfish.external.probe.provider
REMOTE: Replacing CUDrop: com.sun.org.glassfish.external.probe.provider.annotations
REMOTE: Replacing CUDrop: com.sun.org.glassfish.external.statistics
REMOTE: Replacing CUDrop: com.sun.org.glassfish.external.statistics.annotations
REMOTE: Replacing CUDrop: com.sun.org.glassfish.external.statistics.impl
REMOTE: Replacing CUDrop: com.sun.org.glassfish.gmbal
REMOTE: Replacing CUDrop: com.sun.org.glassfish.gmbal.util
REMOTE: Replacing CUDrop: com.sun.org.omg.CORBA
REMOTE: Replacing CUDrop: com.sun.org.omg.CORBA.ValueDefPackage
REMOTE: Replacing CUDrop: com.sun.org.omg.CORBA.portable
REMOTE: Replacing CUDrop: com.sun.org.omg.SendingContext
REMOTE: Replacing CUDrop: com.sun.org.omg.SendingContext.CodeBasePackage
REMOTE: Replacing CUDrop: com.sun.rmi.rmid
REMOTE: Replacing CUDrop: com.sun.rowset
REMOTE: Replacing CUDrop: com.sun.rowset.internal
REMOTE: Replacing CUDrop: com.sun.rowset.providers
REMOTE: Replacing CUDrop: com.sun.script.javascript
REMOTE: Replacing CUDrop: com.sun.script.util
REMOTE: Replacing CUDrop: com.sun.security.auth
REMOTE: Replacing CUDrop: com.sun.security.auth.callback
REMOTE: Replacing CUDrop: com.sun.security.auth.login
REMOTE: Replacing CUDrop: com.sun.security.auth.module
REMOTE: Replacing CUDrop: com.sun.security.cert.internal.x509
REMOTE: Replacing CUDrop: com.sun.security.jgss
REMOTE: Replacing CUDrop: com.sun.security.ntlm
REMOTE: Replacing CUDrop: com.sun.security.sasl
REMOTE: Replacing CUDrop: com.sun.security.sasl.digest
REMOTE: Replacing CUDrop: com.sun.security.sasl.gsskerb
REMOTE: Replacing CUDrop: com.sun.security.sasl.ntlm
REMOTE: Replacing CUDrop: com.sun.security.sasl.util
REMOTE: Replacing CUDrop: com.sun.swing.internal.plaf.basic.resources
REMOTE: Replacing CUDrop: com.sun.swing.internal.plaf.metal.resources
REMOTE: Replacing CUDrop: com.sun.swing.internal.plaf.synth.resources
REMOTE: Replacing CUDrop: com.sun.tracing
REMOTE: Replacing CUDrop: com.sun.tracing.dtrace
REMOTE: Replacing CUDrop: com.sun.xml.internal.bind
REMOTE: Replacing CUDrop: com.sun.xml.internal.bind.annotation
REMOTE: Replacing CUDrop: com.sun.xml.internal.bind.api
REMOTE: Replacing CUDrop: com.sun.xml.internal.bind.api.impl
REMOTE: Replacing CUDrop: com.sun.xml.internal.bind.marshaller
REMOTE: Replacing CUDrop: com.sun.xml.internal.bind.unmarshaller
REMOTE: Replacing CUDrop: com.sun.xml.internal.bind.util
REMOTE: Replacing CUDrop: com.sun.xml.internal.bind.v2
REMOTE: Replacing CUDrop: com.sun.xml.internal.bind.v2.bytecode
REMOTE: Replacing CUDrop: com.sun.xml.internal.bind.v2.model.annotation
REMOTE: Replacing CUDrop: com.sun.xml.internal.bind.v2.model.core
REMOTE: Replacing CUDrop: com.sun.xml.internal.bind.v2.model.impl
REMOTE: Replacing CUDrop: com.sun.xml.internal.bind.v2.model.nav
REMOTE: Replacing CUDrop: com.sun.xml.internal.bind.v2.model.runtime
REMOTE: Replacing CUDrop: com.sun.xml.internal.bind.v2.runtime
REMOTE: Replacing CUDrop: com.sun.xml.internal.bind.v2.runtime.output
REMOTE: Replacing CUDrop: com.sun.xml.internal.bind.v2.runtime.property
REMOTE: Replacing CUDrop: com.sun.xml.internal.bind.v2.runtime.reflect
REMOTE: Replacing CUDrop: com.sun.xml.internal.bind.v2.runtime.reflect.opt
REMOTE: Replacing CUDrop: com.sun.xml.internal.bind.v2.runtime.unmarshaller
REMOTE: Replacing CUDrop: com.sun.xml.internal.bind.v2.schemagen
REMOTE: Replacing CUDrop: com.sun.xml.internal.bind.v2.schemagen.episode
REMOTE: Replacing CUDrop: com.sun.xml.internal.bind.v2.schemagen.xmlschema
REMOTE: Replacing CUDrop: com.sun.xml.internal.bind.v2.util
REMOTE: Replacing CUDrop: com.sun.xml.internal.fastinfoset
REMOTE: [GC (Allocation Failure)  70628K->53444K(371200K), 0.0085400 secs]
REMOTE: Replacing CUDrop: com.sun.xml.internal.fastinfoset.algorithm
REMOTE: Replacing CUDrop: com.sun.xml.internal.fastinfoset.alphabet
REMOTE: Replacing CUDrop: com.sun.xml.internal.fastinfoset.dom
REMOTE: Replacing CUDrop: com.sun.xml.internal.fastinfoset.org.apache.xerces.util
REMOTE: Replacing CUDrop: com.sun.xml.internal.fastinfoset.sax
REMOTE: Replacing CUDrop: com.sun.xml.internal.fastinfoset.stax
REMOTE: Replacing CUDrop: com.sun.xml.internal.fastinfoset.stax.events
REMOTE: Replacing CUDrop: com.sun.xml.internal.fastinfoset.stax.factory
REMOTE: Replacing CUDrop: com.sun.xml.internal.fastinfoset.stax.util
REMOTE: Replacing CUDrop: com.sun.xml.internal.fastinfoset.tools
REMOTE: Replacing CUDrop: com.sun.xml.internal.fastinfoset.util
REMOTE: Replacing CUDrop: com.sun.xml.internal.fastinfoset.vocab
REMOTE: Replacing CUDrop: com.sun.xml.internal.messaging.saaj
REMOTE: Replacing CUDrop: com.sun.xml.internal.messaging.saaj.client.p2p
REMOTE: Replacing CUDrop: com.sun.xml.internal.messaging.saaj.packaging.mime
REMOTE: Replacing CUDrop: com.sun.xml.internal.messaging.saaj.packaging.mime.internet
REMOTE: Replacing CUDrop: com.sun.xml.internal.messaging.saaj.packaging.mime.util
REMOTE: Replacing CUDrop: com.sun.xml.internal.messaging.saaj.soap
REMOTE: Replacing CUDrop: com.sun.xml.internal.messaging.saaj.soap.dynamic
REMOTE: Replacing CUDrop: com.sun.xml.internal.messaging.saaj.soap.impl
REMOTE: Replacing CUDrop: com.sun.xml.internal.messaging.saaj.soap.name
REMOTE: Replacing CUDrop: com.sun.xml.internal.messaging.saaj.soap.ver1_1
REMOTE: Replacing CUDrop: com.sun.xml.internal.messaging.saaj.soap.ver1_2
REMOTE: Replacing CUDrop: com.sun.xml.internal.messaging.saaj.util
REMOTE: Replacing CUDrop: com.sun.xml.internal.messaging.saaj.util.transform
REMOTE: Replacing CUDrop: com.sun.xml.internal.org.jvnet.fastinfoset
REMOTE: Replacing CUDrop: com.sun.xml.internal.org.jvnet.fastinfoset.sax
REMOTE: Replacing CUDrop: com.sun.xml.internal.org.jvnet.fastinfoset.sax.helpers
REMOTE: Replacing CUDrop: com.sun.xml.internal.org.jvnet.fastinfoset.stax
REMOTE: Replacing CUDrop: com.sun.xml.internal.org.jvnet.mimepull
REMOTE: Replacing CUDrop: com.sun.xml.internal.org.jvnet.staxex
REMOTE: Replacing CUDrop: com.sun.xml.internal.stream
REMOTE: Replacing CUDrop: com.sun.xml.internal.stream.buffer
REMOTE: Replacing CUDrop: com.sun.xml.internal.stream.buffer.sax
REMOTE: Replacing CUDrop: com.sun.xml.internal.stream.buffer.stax
REMOTE: Replacing CUDrop: com.sun.xml.internal.stream.dtd
REMOTE: Replacing CUDrop: com.sun.xml.internal.stream.dtd.nonvalidating
REMOTE: Replacing CUDrop: com.sun.xml.internal.stream.events
REMOTE: Replacing CUDrop: com.sun.xml.internal.stream.util
REMOTE: Replacing CUDrop: com.sun.xml.internal.stream.writers
REMOTE: Replacing CUDrop: com.sun.xml.internal.txw2
REMOTE: Replacing CUDrop: com.sun.xml.internal.txw2.annotation
REMOTE: Replacing CUDrop: com.sun.xml.internal.txw2.output
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.addressing
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.addressing.model
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.addressing.policy
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.addressing.v200408
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.api
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.api.addressing
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.api.client
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.api.config.management
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.api.config.management.policy
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.api.fastinfoset
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.api.ha
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.api.handler
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.api.message
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.api.message.stream
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.api.model
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.api.model.soap
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.api.model.wsdl
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.api.pipe
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.api.pipe.helper
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.api.policy
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.api.server
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.api.streaming
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.api.wsdl.parser
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.api.wsdl.writer
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.binding
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.client
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.client.dispatch
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.client.sei
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.config.management.policy
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.developer
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.encoding
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.encoding.fastinfoset
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.encoding.policy
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.encoding.soap
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.encoding.soap.streaming
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.encoding.xml
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.fault
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.handler
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.message
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.message.jaxb
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.message.saaj
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.message.source
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.message.stream
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.model
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.model.soap
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.model.wsdl
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.org.objectweb.asm
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.policy
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.policy.jaxws
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.policy.jaxws.spi
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.policy.privateutil
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.policy.sourcemodel
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.policy.sourcemodel.attach
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.policy.sourcemodel.wspolicy
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.policy.spi
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.policy.subject
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.protocol.soap
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.protocol.xml
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.resources
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.server
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.server.provider
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.server.sei
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.spi
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.streaming
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.transport
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.transport.http
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.transport.http.client
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.transport.http.server
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.util
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.util.exception
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.util.localization
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.util.pipe
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.util.xml
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.wsdl
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.wsdl.parser
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.wsdl.writer
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.wsdl.writer.document
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.wsdl.writer.document.http
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.wsdl.writer.document.soap
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.wsdl.writer.document.soap12
REMOTE: Replacing CUDrop: com.sun.xml.internal.ws.wsdl.writer.document.xsd
REMOTE: Replacing CUDrop: java.applet
REMOTE: Replacing CUDrop: java.awt
REMOTE: Replacing CUDrop: java.awt.color
REMOTE: Replacing CUDrop: java.awt.datatransfer
REMOTE: Replacing CUDrop: java.awt.dnd
REMOTE: Replacing CUDrop: java.awt.event
REMOTE: Replacing CUDrop: java.awt.font
REMOTE: Replacing CUDrop: java.awt.geom
REMOTE: Replacing CUDrop: java.awt.im
REMOTE: Replacing CUDrop: java.awt.im.spi
REMOTE: Replacing CUDrop: java.awt.image
REMOTE: Replacing CUDrop: java.awt.image.renderable
REMOTE: Replacing CUDrop: java.awt.peer
REMOTE: Replacing CUDrop: java.awt.print
REMOTE: Replacing CUDrop: java.beans
REMOTE: Replacing CUDrop: java.beans.beancontext
REMOTE: Replacing CUDrop: java.io
REMOTE: Replacing CUDrop: java.lang
REMOTE: Replacing CUDrop: java.lang.annotation
REMOTE: Replacing CUDrop: java.lang.instrument
REMOTE: Replacing CUDrop: java.lang.invoke
REMOTE: Replacing CUDrop: java.lang.management
REMOTE: Replacing CUDrop: java.lang.reflect
REMOTE: Replacing CUDrop: java.math
REMOTE: Replacing CUDrop: java.net
REMOTE: Replacing CUDrop: java.nio
REMOTE: Replacing CUDrop: java.nio.channels
REMOTE: Replacing CUDrop: java.nio.channels.spi
REMOTE: Replacing CUDrop: java.nio.charset
REMOTE: Replacing CUDrop: java.nio.file
REMOTE: Replacing CUDrop: java.nio.file.attribute
REMOTE: Replacing CUDrop: java.nio.file.spi
REMOTE: Replacing CUDrop: java.rmi
REMOTE: Replacing CUDrop: java.rmi.activation
REMOTE: Replacing CUDrop: java.rmi.dgc
REMOTE: Replacing CUDrop: java.rmi.registry
REMOTE: Replacing CUDrop: java.rmi.server
REMOTE: Replacing CUDrop: java.security
REMOTE: Replacing CUDrop: java.security.acl
REMOTE: Replacing CUDrop: java.security.cert
REMOTE: Replacing CUDrop: java.security.interfaces
REMOTE: Replacing CUDrop: java.security.spec
REMOTE: Replacing CUDrop: java.sql
REMOTE: Replacing CUDrop: java.text
REMOTE: Replacing CUDrop: java.text.spi
REMOTE: Replacing CUDrop: java.util
REMOTE: Replacing CUDrop: java.util.concurrent
REMOTE: Replacing CUDrop: java.util.concurrent.atomic
REMOTE: Replacing CUDrop: java.util.concurrent.locks
REMOTE: Replacing CUDrop: java.util.jar
REMOTE: Replacing CUDrop: java.util.logging
REMOTE: Replacing CUDrop: java.util.prefs
REMOTE: Replacing CUDrop: java.util.regex
REMOTE: Replacing CUDrop: java.util.spi
REMOTE: Replacing CUDrop: java.util.zip
REMOTE: Replacing CUDrop: javax.accessibility
REMOTE: Replacing CUDrop: javax.activation
REMOTE: Replacing CUDrop: javax.activity
REMOTE: Replacing CUDrop: javax.annotation
REMOTE: Replacing CUDrop: javax.annotation.processing
REMOTE: Replacing CUDrop: javax.imageio
REMOTE: Replacing CUDrop: javax.imageio.event
REMOTE: Replacing CUDrop: javax.imageio.metadata
REMOTE: Replacing CUDrop: javax.imageio.plugins.bmp
REMOTE: Replacing CUDrop: javax.imageio.plugins.jpeg
REMOTE: Replacing CUDrop: javax.imageio.spi
REMOTE: Replacing CUDrop: javax.imageio.stream
REMOTE: Replacing CUDrop: javax.jws
REMOTE: Replacing CUDrop: javax.jws.soap
REMOTE: Replacing CUDrop: javax.lang.model
REMOTE: Replacing CUDrop: javax.lang.model.element
REMOTE: Replacing CUDrop: javax.lang.model.type
REMOTE: Replacing CUDrop: javax.lang.model.util
REMOTE: Replacing CUDrop: javax.management
REMOTE: Replacing CUDrop: javax.management.loading
REMOTE: Replacing CUDrop: javax.management.modelmbean
REMOTE: Replacing CUDrop: javax.management.monitor
REMOTE: Replacing CUDrop: javax.management.openmbean
REMOTE: Replacing CUDrop: javax.management.relation
REMOTE: Replacing CUDrop: javax.management.remote
REMOTE: Replacing CUDrop: javax.management.remote.rmi
REMOTE: Replacing CUDrop: javax.management.timer
REMOTE: Replacing CUDrop: javax.naming
REMOTE: Replacing CUDrop: javax.naming.directory
REMOTE: Replacing CUDrop: javax.naming.event
REMOTE: Replacing CUDrop: javax.naming.ldap
REMOTE: Replacing CUDrop: javax.naming.spi
REMOTE: Replacing CUDrop: javax.net
REMOTE: Replacing CUDrop: javax.net.ssl
REMOTE: Replacing CUDrop: javax.print
REMOTE: Replacing CUDrop: javax.print.attribute
REMOTE: Replacing CUDrop: javax.print.attribute.standard
REMOTE: Replacing CUDrop: javax.print.event
REMOTE: Replacing CUDrop: javax.rmi.CORBA
REMOTE: Replacing CUDrop: javax.rmi
REMOTE: Replacing CUDrop: javax.rmi.ssl
REMOTE: Replacing CUDrop: javax.script
REMOTE: Replacing CUDrop: javax.security.auth
REMOTE: Replacing CUDrop: javax.security.auth.callback
REMOTE: Replacing CUDrop: javax.security.auth.kerberos
REMOTE: Replacing CUDrop: javax.security.auth.login
REMOTE: Replacing CUDrop: javax.security.auth.spi
REMOTE: Replacing CUDrop: javax.security.auth.x500
REMOTE: Replacing CUDrop: javax.security.cert
REMOTE: Replacing CUDrop: javax.security.sasl
REMOTE: Replacing CUDrop: javax.smartcardio
REMOTE: Replacing CUDrop: javax.sound.midi
REMOTE: Replacing CUDrop: javax.sound.midi.spi
REMOTE: Replacing CUDrop: javax.sound.sampled
REMOTE: Replacing CUDrop: javax.sound.sampled.spi
REMOTE: Replacing CUDrop: javax.sql
REMOTE: Replacing CUDrop: javax.sql.rowset
REMOTE: Replacing CUDrop: javax.sql.rowset.serial
REMOTE: Replacing CUDrop: javax.sql.rowset.spi
REMOTE: Replacing CUDrop: javax.swing
REMOTE: Replacing CUDrop: javax.swing.border
REMOTE: Replacing CUDrop: javax.swing.colorchooser
REMOTE: Replacing CUDrop: javax.swing.event
REMOTE: Replacing CUDrop: javax.swing.filechooser
REMOTE: Replacing CUDrop: javax.swing.plaf
REMOTE: Replacing CUDrop: javax.swing.plaf.basic
REMOTE: Replacing CUDrop: javax.swing.plaf.metal
REMOTE: Replacing CUDrop: javax.swing.plaf.multi
REMOTE: Replacing CUDrop: javax.swing.plaf.nimbus
REMOTE: Replacing CUDrop: javax.swing.plaf.synth
REMOTE: Replacing CUDrop: javax.swing.table
REMOTE: Replacing CUDrop: javax.swing.text
REMOTE: Replacing CUDrop: javax.swing.text.html
REMOTE: Replacing CUDrop: javax.swing.text.html.parser
REMOTE: Replacing CUDrop: javax.swing.text.rtf
REMOTE: Replacing CUDrop: javax.swing.tree
REMOTE: Replacing CUDrop: javax.swing.undo
REMOTE: Replacing CUDrop: javax.tools
REMOTE: Replacing CUDrop: javax.transaction
REMOTE: Replacing CUDrop: javax.transaction.xa
REMOTE: Replacing CUDrop: javax.xml
REMOTE: Replacing CUDrop: javax.xml.bind
REMOTE: Replacing CUDrop: javax.xml.bind.annotation
REMOTE: Replacing CUDrop: javax.xml.bind.annotation.adapters
REMOTE: Replacing CUDrop: javax.xml.bind.attachment
REMOTE: Replacing CUDrop: javax.xml.bind.helpers
REMOTE: Replacing CUDrop: javax.xml.bind.util
REMOTE: Replacing CUDrop: javax.xml.crypto
REMOTE: Replacing CUDrop: javax.xml.crypto.dom
REMOTE: Replacing CUDrop: javax.xml.crypto.dsig
REMOTE: Replacing CUDrop: javax.xml.crypto.dsig.dom
REMOTE: Replacing CUDrop: javax.xml.crypto.dsig.keyinfo
REMOTE: Replacing CUDrop: javax.xml.crypto.dsig.spec
REMOTE: Replacing CUDrop: javax.xml.datatype
REMOTE: Replacing CUDrop: javax.xml.namespace
REMOTE: Replacing CUDrop: javax.xml.parsers
REMOTE: Replacing CUDrop: javax.xml.soap
REMOTE: Replacing CUDrop: javax.xml.stream
REMOTE: Replacing CUDrop: javax.xml.stream.events
REMOTE: Replacing CUDrop: javax.xml.stream.util
REMOTE: Replacing CUDrop: javax.xml.transform
REMOTE: Replacing CUDrop: javax.xml.transform.dom
REMOTE: Replacing CUDrop: javax.xml.transform.sax
REMOTE: Replacing CUDrop: javax.xml.transform.stax
REMOTE: Replacing CUDrop: javax.xml.transform.stream
REMOTE: Replacing CUDrop: javax.xml.validation
REMOTE: Replacing CUDrop: javax.xml.ws
REMOTE: Replacing CUDrop: javax.xml.ws.handler
REMOTE: Replacing CUDrop: javax.xml.ws.handler.soap
REMOTE: Replacing CUDrop: javax.xml.ws.http
REMOTE: Replacing CUDrop: javax.xml.ws.soap
REMOTE: Replacing CUDrop: javax.xml.ws.spi
REMOTE: Replacing CUDrop: javax.xml.ws.spi.http
REMOTE: Replacing CUDrop: javax.xml.ws.wsaddressing
REMOTE: Replacing CUDrop: javax.xml.xpath
REMOTE: Replacing CUDrop: org.ietf.jgss
REMOTE: Replacing CUDrop: org.jcp.xml.dsig.internal
REMOTE: Replacing CUDrop: org.jcp.xml.dsig.internal.dom
REMOTE: Replacing CUDrop: org.omg.CORBA
REMOTE: Replacing CUDrop: org.omg.CORBA.DynAnyPackage
REMOTE: Replacing CUDrop: org.omg.CORBA.ORBPackage
REMOTE: Replacing CUDrop: org.omg.CORBA.TypeCodePackage
REMOTE: Replacing CUDrop: org.omg.CORBA.portable
REMOTE: Replacing CUDrop: org.omg.CORBA_2_3
REMOTE: Replacing CUDrop: org.omg.CORBA_2_3.portable
REMOTE: Replacing CUDrop: org.omg.CosNaming
REMOTE: Replacing CUDrop: org.omg.CosNaming.NamingContextExtPackage
REMOTE: Replacing CUDrop: org.omg.CosNaming.NamingContextPackage
REMOTE: Replacing CUDrop: org.omg.Dynamic
REMOTE: Replacing CUDrop: org.omg.DynamicAny
REMOTE: Replacing CUDrop: org.omg.DynamicAny.DynAnyFactoryPackage
REMOTE: Replacing CUDrop: org.omg.DynamicAny.DynAnyPackage
REMOTE: Replacing CUDrop: org.omg.IOP
REMOTE: Replacing CUDrop: org.omg.IOP.CodecFactoryPackage
REMOTE: Replacing CUDrop: org.omg.IOP.CodecPackage
REMOTE: Replacing CUDrop: org.omg.Messaging
REMOTE: Replacing CUDrop: org.omg.PortableInterceptor
REMOTE: Replacing CUDrop: org.omg.PortableInterceptor.ORBInitInfoPackage
REMOTE: Replacing CUDrop: org.omg.PortableServer
REMOTE: Replacing CUDrop: org.omg.PortableServer.CurrentPackage
REMOTE: Replacing CUDrop: org.omg.PortableServer.POAManagerPackage
REMOTE: Replacing CUDrop: org.omg.PortableServer.POAPackage
REMOTE: Replacing CUDrop: org.omg.PortableServer.ServantLocatorPackage
REMOTE: Replacing CUDrop: org.omg.PortableServer.portable
REMOTE: Replacing CUDrop: org.omg.SendingContext
REMOTE: Replacing CUDrop: org.omg.stub.java.rmi
REMOTE: Replacing CUDrop: org.omg.stub.javax.management.remote.rmi
REMOTE: Replacing CUDrop: org.w3c.dom
REMOTE: Replacing CUDrop: org.w3c.dom.bootstrap
REMOTE: Replacing CUDrop: org.w3c.dom.css
REMOTE: Replacing CUDrop: org.w3c.dom.events
REMOTE: Replacing CUDrop: org.w3c.dom.html
REMOTE: Replacing CUDrop: org.w3c.dom.ls
REMOTE: Replacing CUDrop: org.w3c.dom.ranges
REMOTE: Replacing CUDrop: org.w3c.dom.stylesheets
REMOTE: Replacing CUDrop: org.w3c.dom.traversal
REMOTE: Replacing CUDrop: org.w3c.dom.views
REMOTE: Replacing CUDrop: org.w3c.dom.xpath
REMOTE: Replacing CUDrop: org.xml.sax
REMOTE: Replacing CUDrop: org.xml.sax.ext
REMOTE: Replacing CUDrop: org.xml.sax.helpers
REMOTE: Replacing CUDrop: sun.applet
REMOTE: Replacing CUDrop: sun.applet.resources
REMOTE: Replacing CUDrop: sun.audio
REMOTE: Replacing CUDrop: sun.awt
REMOTE: Replacing CUDrop: sun.awt.X11
REMOTE: Replacing CUDrop: sun.awt.datatransfer
REMOTE: Replacing CUDrop: sun.awt.geom
REMOTE: Replacing CUDrop: sun.awt.im
REMOTE: Replacing CUDrop: sun.awt.image
REMOTE: Replacing CUDrop: sun.awt.image.codec
REMOTE: Replacing CUDrop: sun.awt.motif
REMOTE: Replacing CUDrop: sun.awt.resources
REMOTE: Replacing CUDrop: sun.awt.shell
REMOTE: Replacing CUDrop: sun.awt.util
REMOTE: Replacing CUDrop: sun.awt.windows
REMOTE: Replacing CUDrop: sun.beans.editors
REMOTE: Replacing CUDrop: sun.corba
REMOTE: Replacing CUDrop: sun.dc
REMOTE: Replacing CUDrop: sun.dc.path
REMOTE: Replacing CUDrop: sun.dc.pr
REMOTE: Replacing CUDrop: sun.font
REMOTE: Replacing CUDrop: sun.instrument
REMOTE: Replacing CUDrop: sun.invoke
REMOTE: Replacing CUDrop: sun.invoke.anon
REMOTE: Replacing CUDrop: sun.invoke.empty
REMOTE: Replacing CUDrop: sun.invoke.util
REMOTE: Replacing CUDrop: sun.io
REMOTE: Replacing CUDrop: sun.java2d
REMOTE: Replacing CUDrop: sun.java2d.cmm
REMOTE: Replacing CUDrop: sun.java2d.cmm.kcms
REMOTE: Replacing CUDrop: sun.java2d.cmm.lcms
REMOTE: Replacing CUDrop: sun.java2d.jules
REMOTE: Replacing CUDrop: sun.java2d.loops
REMOTE: Replacing CUDrop: sun.java2d.opengl
REMOTE: Replacing CUDrop: sun.java2d.pipe
REMOTE: Replacing CUDrop: sun.java2d.pipe.hw
REMOTE: Replacing CUDrop: sun.java2d.pisces
REMOTE: Replacing CUDrop: sun.java2d.x11
REMOTE: Replacing CUDrop: sun.java2d.xr
REMOTE: Replacing CUDrop: sun.launcher
REMOTE: Replacing CUDrop: sun.launcher.resources
REMOTE: Replacing CUDrop: sun.lwawt
REMOTE: Replacing CUDrop: sun.lwawt.macosx
REMOTE: Replacing CUDrop: sun.lwawt.macosx.event
REMOTE: Replacing CUDrop: sun.management
REMOTE: Replacing CUDrop: sun.management.counter
REMOTE: Replacing CUDrop: sun.management.counter.perf
REMOTE: Replacing CUDrop: sun.management.jdp
REMOTE: Replacing CUDrop: sun.management.jmxremote
REMOTE: Replacing CUDrop: sun.management.resources
REMOTE: Replacing CUDrop: sun.management.snmp
REMOTE: Replacing CUDrop: sun.management.snmp.jvminstr
REMOTE: Replacing CUDrop: sun.management.snmp.jvmmib
REMOTE: Replacing CUDrop: sun.management.snmp.util
REMOTE: Replacing CUDrop: sun.misc
REMOTE: Replacing CUDrop: sun.misc.resources
REMOTE: Replacing CUDrop: sun.net
REMOTE: Replacing CUDrop: sun.net.dns
REMOTE: Replacing CUDrop: sun.net.ftp
REMOTE: Replacing CUDrop: sun.net.ftp.impl
REMOTE: Replacing CUDrop: sun.net.httpserver
REMOTE: Replacing CUDrop: sun.net.idn
REMOTE: Replacing CUDrop: sun.net.sdp
REMOTE: Replacing CUDrop: sun.net.smtp
REMOTE: Replacing CUDrop: sun.net.spi.nameservice
REMOTE: Replacing CUDrop: sun.net.util
REMOTE: Replacing CUDrop: sun.net.www
REMOTE: Replacing CUDrop: sun.net.www.content.audio
REMOTE: Replacing CUDrop: sun.net.www.content.image
REMOTE: Replacing CUDrop: sun.net.www.content.text
REMOTE: Replacing CUDrop: sun.net.www.http
REMOTE: Replacing CUDrop: sun.net.www.protocol.ftp
REMOTE: Replacing CUDrop: sun.net.www.protocol.gopher
REMOTE: Replacing CUDrop: sun.net.www.protocol.http
REMOTE: Replacing CUDrop: sun.net.www.protocol.http.logging
REMOTE: Replacing CUDrop: sun.net.www.protocol.http.ntlm
REMOTE: Replacing CUDrop: sun.net.www.protocol.http.spnego
REMOTE: Replacing CUDrop: sun.net.www.protocol.https
REMOTE: Replacing CUDrop: sun.net.www.protocol.jar
REMOTE: Replacing CUDrop: sun.net.www.protocol.mailto
REMOTE: Replacing CUDrop: sun.net.www.protocol.netdoc
REMOTE: Replacing CUDrop: sun.nio.ch
REMOTE: Replacing CUDrop: sun.nio.cs
REMOTE: Replacing CUDrop: sun.nio.fs
REMOTE: Replacing CUDrop: sun.org.mozilla.javascript.internal
REMOTE: Replacing CUDrop: sun.org.mozilla.javascript.internal.annotations
REMOTE: Replacing CUDrop: sun.org.mozilla.javascript.internal.ast
REMOTE: Replacing CUDrop: sun.org.mozilla.javascript.internal.debug
REMOTE: Replacing CUDrop: sun.org.mozilla.javascript.internal.jdk13
REMOTE: Replacing CUDrop: sun.org.mozilla.javascript.internal.jdk15
REMOTE: Replacing CUDrop: sun.org.mozilla.javascript.internal.json
REMOTE: Replacing CUDrop: sun.org.mozilla.javascript.internal.regexp
REMOTE: Replacing CUDrop: sun.org.mozilla.javascript.internal.xml
REMOTE: Replacing CUDrop: sun.org.mozilla.javascript.internal.xmlimpl
REMOTE: Replacing CUDrop: sun.print
REMOTE: Replacing CUDrop: sun.print.resources
REMOTE: Replacing CUDrop: sun.reflect
REMOTE: Replacing CUDrop: sun.reflect.annotation
REMOTE: Replacing CUDrop: sun.reflect.generics.factory
REMOTE: Replacing CUDrop: sun.reflect.generics.parser
REMOTE: Replacing CUDrop: sun.reflect.generics.reflectiveObjects
REMOTE: Replacing CUDrop: sun.reflect.generics.repository
REMOTE: Replacing CUDrop: sun.reflect.generics.scope
REMOTE: Replacing CUDrop: sun.reflect.generics.tree
REMOTE: Replacing CUDrop: sun.reflect.generics.visitor
REMOTE: Replacing CUDrop: sun.reflect.misc
REMOTE: Replacing CUDrop: sun.rmi.log
REMOTE: Replacing CUDrop: sun.rmi.registry
REMOTE: Replacing CUDrop: sun.rmi.runtime
REMOTE: Replacing CUDrop: sun.rmi.server
REMOTE: Replacing CUDrop: sun.rmi.transport
REMOTE: Replacing CUDrop: sun.rmi.transport.proxy
REMOTE: Replacing CUDrop: sun.rmi.transport.tcp
REMOTE: Replacing CUDrop: sun.security.acl
REMOTE: Replacing CUDrop: sun.security.action
REMOTE: Replacing CUDrop: sun.security.ec
REMOTE: Replacing CUDrop: sun.security.jca
REMOTE: Replacing CUDrop: sun.security.jgss
REMOTE: Replacing CUDrop: sun.security.jgss.krb5
REMOTE: Replacing CUDrop: sun.security.jgss.spi
REMOTE: Replacing CUDrop: sun.security.jgss.spnego
REMOTE: Replacing CUDrop: sun.security.jgss.wrapper
REMOTE: Replacing CUDrop: sun.security.krb5
REMOTE: Replacing CUDrop: sun.security.krb5.internal
REMOTE: Replacing CUDrop: sun.security.krb5.internal.ccache
REMOTE: Replacing CUDrop: sun.security.krb5.internal.crypto
REMOTE: Replacing CUDrop: sun.security.krb5.internal.crypto.dk
REMOTE: Replacing CUDrop: sun.security.krb5.internal.ktab
REMOTE: Replacing CUDrop: sun.security.krb5.internal.rcache
REMOTE: Replacing CUDrop: sun.security.krb5.internal.util
REMOTE: Replacing CUDrop: sun.security.pkcs
REMOTE: Replacing CUDrop: sun.security.pkcs12
REMOTE: Replacing CUDrop: sun.security.provider
REMOTE: Replacing CUDrop: sun.security.provider.certpath
REMOTE: Replacing CUDrop: sun.security.provider.certpath.ldap
REMOTE: Replacing CUDrop: sun.security.rsa
REMOTE: Replacing CUDrop: sun.security.smartcardio
REMOTE: Replacing CUDrop: sun.security.timestamp
REMOTE: Replacing CUDrop: sun.security.tools
REMOTE: Replacing CUDrop: sun.security.tools.policytool
REMOTE: Replacing CUDrop: sun.security.util
REMOTE: Replacing CUDrop: sun.security.validator
REMOTE: Replacing CUDrop: sun.security.x509
REMOTE: Replacing CUDrop: sun.swing
REMOTE: Replacing CUDrop: sun.swing.icon
REMOTE: Replacing CUDrop: sun.swing.plaf
REMOTE: Replacing CUDrop: sun.swing.plaf.synth
REMOTE: Replacing CUDrop: sun.swing.plaf.windows
REMOTE: Replacing CUDrop: sun.swing.text
REMOTE: Replacing CUDrop: sun.swing.text.html
REMOTE: Replacing CUDrop: sun.text
REMOTE: Replacing CUDrop: sun.text.bidi
REMOTE: Replacing CUDrop: sun.text.normalizer
REMOTE: Replacing CUDrop: sun.text.resources
REMOTE: Replacing CUDrop: sun.tools.jar
REMOTE: Replacing CUDrop: sun.tools.jar.resources
REMOTE: Replacing CUDrop: sun.tracing
REMOTE: Replacing CUDrop: sun.tracing.dtrace
REMOTE: Replacing CUDrop: sun.usagetracker
REMOTE: Replacing CUDrop: sun.util
REMOTE: Replacing CUDrop: sun.util.calendar
REMOTE: Replacing CUDrop: sun.util.locale
REMOTE: Replacing CUDrop: sun.util.logging
REMOTE: Replacing CUDrop: sun.util.logging.resources
REMOTE: Replacing CUDrop: sun.util.resources
REMOTE: Replacing CUDrop: sunw.io
REMOTE: Replacing CUDrop: sunw.util
REMOTE: Replacing CUDrop: java.awt.dnd.peer
REMOTE: Replacing CUDrop: sun.awt.dnd
REMOTE: Replacing CUDrop: sun.swing.table
REMOTE: Replacing CUDrop: sun.awt.event
REMOTE: Replacing CUDrop: sun.net.spi
REMOTE: Replacing CUDrop: sun.net.www.protocol.file
REMOTE: Replacing CUDrop: sun.nio
REMOTE: Replacing CUDrop: java.nio.charset.spi
REMOTE: Replacing CUDrop: java.lang.ref
REMOTE: TestLockSanityChecks: Done initializing with /jre1.7.0_55.jre/Contents/Home/lib/rt.jar : 64311652
REMOTE: Replacing CUDrop: sun.security.ssl
REMOTE: Replacing CUDrop: sun.security.ssl.krb5
REMOTE: Replacing CUDrop: com.sun.net.ssl.internal.ssl
REMOTE: TestLockSanityChecks: Done initializing with /jre1.7.0_55.jre/Contents/Home/lib/jsse.jar : 582478
REMOTE: Replacing CUDrop: javax.crypto
REMOTE: Replacing CUDrop: javax.crypto.interfaces
REMOTE: Replacing CUDrop: javax.crypto.spec
REMOTE: Replacing CUDrop: sun.security.internal.interfaces
REMOTE: Replacing CUDrop: sun.security.internal.spec
REMOTE: TestLockSanityChecks: Done initializing with /jre1.7.0_55.jre/Contents/Home/lib/jce.jar : 109504
REMOTE: Replacing CUDrop: sun.nio.cs.ext
REMOTE: TestLockSanityChecks: Done initializing with /jre1.7.0_55.jre/Contents/Home/lib/charsets.jar : 3696271
REMOTE: Replacing CUDrop: com.oracle.jrockit.jfr.client
REMOTE: Replacing CUDrop: com.oracle.jrockit.jfr
REMOTE: Replacing CUDrop: com.oracle.jrockit.jfr.management
REMOTE: Replacing CUDrop: oracle.jrockit.jfr
REMOTE: Replacing CUDrop: oracle.jrockit.jfr.events
REMOTE: Replacing CUDrop: oracle.jrockit.jfr.jdkevents
REMOTE: Replacing CUDrop: oracle.jrockit.jfr.jdkevents.throwabletransform
REMOTE: Replacing CUDrop: oracle.jrockit.jfr.openmbean
REMOTE: Replacing CUDrop: oracle.jrockit.jfr.parser
REMOTE: Replacing CUDrop: oracle.jrockit.jfr.settings
REMOTE: Replacing CUDrop: oracle.jrockit.jfr.tools
REMOTE: Replacing CUDrop: jdk.internal.jfr.events
REMOTE: TestLockSanityChecks: Done initializing with /jre1.7.0_55.jre/Contents/Home/lib/jfr.jar : 532548
REMOTE: Replacing CUDrop: sun.net.spi.nameservice.dns
REMOTE: TestLockSanityChecks: Done initializing with /jre1.7.0_55.jre/Contents/Home/lib/ext/dnsns.jar : 8923
REMOTE: TestLockSanityChecks: Done initializing with /jre1.7.0_55.jre/Contents/Home/lib/ext/localedata.jar : 550578
REMOTE: TestLockSanityChecks: Done initializing with /jre1.7.0_55.jre/Contents/Home/lib/ext/sunec.jar : 15941
REMOTE: Replacing CUDrop: com.sun.crypto.provider
REMOTE: TestLockSanityChecks: Done initializing with /jre1.7.0_55.jre/Contents/Home/lib/ext/sunjce_provider.jar : 198101
REMOTE: Replacing CUDrop: sun.security.pkcs11
REMOTE: Replacing CUDrop: sun.security.pkcs11.wrapper
REMOTE: TestLockSanityChecks: Done initializing with /jre1.7.0_55.jre/Contents/Home/lib/ext/sunpkcs11.jar : 237244
REMOTE: Replacing CUDrop: com.sun.nio.zipfs
REMOTE: TestLockSanityChecks: Done initializing with /jre1.7.0_55.jre/Contents/Home/lib/ext/zipfs.jar : 68751
REMOTE: Replacing CUDrop: com.apple.mrj
REMOTE: TestLockSanityChecks: Done initializing with /System/Library/Java/Extensions/MRJToolkit.jar : 12849
REMOTE: TestLockSanityChecks: Done initializing with /Users/aarong/git/regression/regression/TestLockSanityChecks/promises-5.6.0.jar : 133034
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: Assuming that the projects are run in dependency order
REMOTE: Parsing ...
REMOTE: ##SUBTASK, Parsing ...
REMOTE: Done adapting 0 files for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: Parsing ...
REMOTE: ##SUBTASK, Parsing ...
REMOTE: [GC (Allocation Failure)  88260K->60251K(372224K), 0.0097510 secs]
REMOTE: JCP: warning: [options] bootstrap class path not set in conjunction with -source 1.7
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: Adapting 55 CUTs
REMOTE: [GC (Allocation Failure)  95067K->64129K(387072K), 0.0114740 secs]
REMOTE: Done adapting 55 files for TestLockSanityChecks
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: Handling references for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: ##SUBTASK, Handling references for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: Handling 21 dangling refs for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: Setting project for Object from org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: Handling 44 dangling refs for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: Handling 55 dangling refs for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: Handling 51 dangling refs for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: Handling 32 dangling refs for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: Handling 17 dangling refs for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: Handling 8 dangling refs for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: Handling 12 dangling refs for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: Handling 15 dangling refs for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: Handling 4 dangling refs for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: [GC (Allocation Failure)  113281K->70292K(387072K), 0.0115450 secs]
REMOTE: Handling 2 dangling refs for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: Handling references for TestLockSanityChecks
REMOTE: ##SUBTASK, Handling references for TestLockSanityChecks
REMOTE: Handling 33 dangling refs for TestLockSanityChecks
REMOTE: Handling 5 dangling refs for TestLockSanityChecks
REMOTE: Handling 1 dangling refs for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: Handling 2 dangling refs for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: Parsing ASTs  = 534 ms
REMOTE: Handling refs = 407 ms
REMOTE: [2016-01-27 14:22:59    INFO] partial bindings = 0 (in method edu.cmu.cs.fluid.java.bind.AbstractJavaBinder.printStats(-) thread "main")
REMOTE: [2016-01-27 14:22:59    INFO] full bindings = 0 (in method edu.cmu.cs.fluid.java.bind.AbstractJavaBinder.printStats(-) thread "main")
REMOTE: Canonicalizing ASTs
REMOTE: ##SUBTASK, Canonicalizing ASTs
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: [GC (Metadata GC Threshold)  86008K->71021K(407552K), 0.0097180 secs]
REMOTE: [Full GC (Metadata GC Threshold)  71021K->68100K(161792K), 0.2371920 secs]
REMOTE: ##WORK, 1
REMOTE: ##WORK, 1
REMOTE: [2016-01-27 14:22:59    INFO] partial bindings = 1690 (in method edu.cmu.cs.fluid.java.bind.AbstractJavaBinder.printStats(-) thread "main")
REMOTE: [2016-01-27 14:22:59    INFO] full bindings = 1516 (in method edu.cmu.cs.fluid.java.bind.AbstractJavaBinder.printStats(-) thread "main")
REMOTE: Canonicalizing TestLockSanityChecks/src/test_lock_field/B.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/test_unique_names/GoodC2.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/test_lock_region/B.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/test_returns_lock/PLock.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/twoLocksOneRegion/inherited/Super.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/test_returns_lock/C.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/test_lock_region/Grandparent.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/test_returns_lock/StateLock.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/inherited_region/Subregion/Bad3.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/test_lock_field/Other.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/test_lock_region/C.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/test_lock_region/Other.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/inherited_region/Instance/Bad1.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/test_requires_lock/Other1.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/test_requires_lock/StateLock_visibility.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/test_returns_lock/C_Policy.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/twoLocksOneRegion/unrelatedClasses/Test2.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/test_requires_lock/Root.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/inherited_region/good/Good4.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/test_lock_region/D.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/inherited_region/Subregion/BadRoot2.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/test_requires_lock/C_Policy.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/inherited_region/good/GoodRoot.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/twoLocksOneRegion/inherited/Duper.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/test_lock_field/D.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/qualified_receivers_as_locks/Outer.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/test_unique_names/GoodC3.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/test_lock_field/C.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/twoLocksOneRegion/sameClass/Bad.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/inherited_region/good/Good2.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/inherited_region/good/Good3.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/test_lock_region/LockVizJUC.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/test_requires_lock/D.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/test_unique_names/BadC2.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/test_unique_names/StateVsPolicyLocks.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/test_lock_region/Parent.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/test_requires_lock/StateLock_Constructor.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/twoLocksOneRegion/unrelatedClasses/Test.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/inherited_region/baseCase/Good1.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/inherited_region/Instance/BadRoot1.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/test_requires_lock/TestDuplicates.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/test_requires_lock/PolicyLock_Constructor.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/test_requires_lock/CannotRequireRWLock.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/test_lock_region/LockViz.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/test_lock_region/ProtectInheritedRegion.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/test_requires_lock/StateLock_LockNames.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/test_requires_lock/TestImprovedMessages.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/inherited_region/Subregion/Bad2.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/test_lock_region/GreatGrandparent.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/test_requires_lock/PolicyLock_LockNames.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/test_lock_field/A.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/test_unique_names/C1.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/test_unique_names/BadC3.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/test_requires_lock/PolicyLock_visibility.java
REMOTE: ##WORK, 1
REMOTE: Canonicalizing TestLockSanityChecks/src/test_requires_lock/C.java
REMOTE: ##WORK, 1
REMOTE: Binding = 360 ms
REMOTE: Cleaned 0 in 14 ms
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: [GC (System.gc())  76861K->68556K(161792K), 0.0019800 secs]
REMOTE: [Full GC (System.gc())  68556K->56322K(161792K), 0.0937640 secs]
REMOTE: Creating drops
REMOTE: ##SUBTASK, Creating drops
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/B.java
REMOTE: Created binary drop for java.nio.Buffer
REMOTE: Created binary drop for java.nio.ByteOrder
REMOTE: Created binary drop for java.util.Locale
REMOTE: Created binary drop for java.lang.ReflectiveOperationException
REMOTE: Created binary drop for java.lang.Runnable
REMOTE: Created binary drop for java.util.concurrent.ConcurrentMap
REMOTE: Created binary drop for sun.reflect.FieldAccessor
REMOTE: Created binary drop for java.security.SignatureException
REMOTE: Created binary drop for java.lang.Exception
REMOTE: Created binary drop for java.util.MissingResourceException
REMOTE: Created binary drop for java.io.Writer
REMOTE: Created binary drop for java.util.Collection
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/GoodC2.java
REMOTE: Created binary drop for java.security.Timestamp
REMOTE: Created binary drop for java.security.PermissionCollection
REMOTE: Created binary drop for java.util.Hashtable
REMOTE: Created binary drop for java.nio.channels.AsynchronousFileChannel
REMOTE: Created binary drop for java.util.zip.InflaterInputStream
REMOTE: Created binary drop for java.security.ProtectionDomain
REMOTE: Created binary drop for java.io.DataOutputStream
REMOTE: Created binary drop for java.nio.file.FileSystem
REMOTE: Created binary drop for java.io.OutputStream
REMOTE: Created binary drop for java.nio.channels.ReadableByteChannel
REMOTE: Created binary drop for java.lang.Void
REMOTE: Created binary drop for java.io.Flushable
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/B.java
REMOTE: Created binary drop for java.nio.channels.FileChannel
REMOTE: Created binary drop for java.lang.Number
REMOTE: Created binary drop for java.nio.channels.spi.AbstractInterruptibleChannel
REMOTE: Created binary drop for java.lang.Throwable
REMOTE: Created binary drop for java.lang.Appendable
REMOTE: Created binary drop for sun.util.LocaleServiceProviderPool
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_returns_lock/PLock.java
REMOTE: Created binary drop for java.security.CodeSource
REMOTE: Created binary drop for java.lang.Object
REMOTE: Created binary drop for java.lang.Iterable
REMOTE: Created binary drop for java.nio.file.FileStore
REMOTE: Created binary drop for sun.security.util.Debug
REMOTE: Created binary drop for java.util.HashMap
REMOTE: Created binary drop for java.nio.file.Watchable
REMOTE: Created binary drop for java.util.jar.Manifest
REMOTE: Created binary drop for java.nio.file.OpenOption
REMOTE: Created binary drop for java.util.ListIterator
REMOTE: Created binary drop for java.util.WeakHashMap
REMOTE: Created binary drop for java.lang.ref.Reference
REMOTE: Created binary drop for java.nio.file.attribute.FileTime
REMOTE: Created binary drop for java.util.zip.ZipEntry
REMOTE: Created binary drop for java.lang.Character
REMOTE: Created binary drop for java.lang.Enum
REMOTE: Created binary drop for com.surelogic.RegionLock
REMOTE: Created binary drop for java.util.AbstractCollection
REMOTE: Created binary drop for java.util.concurrent.TimeUnit
REMOTE: Created binary drop for sun.misc.JarIndex
REMOTE: Created binary drop for java.net.URLStreamHandlerFactory
REMOTE: Created binary drop for java.util.Random
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/inherited/Super.java
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_returns_lock/C.java
REMOTE: Created binary drop for java.nio.channels.AsynchronousChannel
REMOTE: Created binary drop for java.lang.InstantiationException
REMOTE: Created binary drop for java.nio.channels.Channel
REMOTE: Created binary drop for java.nio.file.spi.FileSystemProvider
REMOTE: Created binary drop for java.security.CodeSigner
REMOTE: Created binary drop for com.surelogic.Regions
REMOTE: Created binary drop for sun.util.locale.LocaleObjectCache
REMOTE: Created binary drop for java.nio.DoubleBuffer
REMOTE: Created binary drop for java.util.Dictionary
REMOTE: Created binary drop for java.lang.reflect.Member
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/Grandparent.java
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_returns_lock/StateLock.java
REMOTE: Created binary drop for java.nio.IntBuffer
REMOTE: Created binary drop for java.nio.channels.ClosedChannelException
REMOTE: Created binary drop for java.lang.Package
REMOTE: Created binary drop for sun.misc.URLClassPath
REMOTE: Created binary drop for java.lang.InterruptedException
REMOTE: Created binary drop for java.nio.file.WatchService
REMOTE: Created binary drop for sun.misc.MetaIndex
REMOTE: Created binary drop for com.surelogic.PolicyLocks
REMOTE: Created binary drop for java.lang.annotation.ElementType
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Subregion/Bad3.java
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/Other.java
REMOTE: Created binary drop for java.nio.channels.CompletionHandler
REMOTE: Created binary drop for java.nio.file.attribute.UserPrincipalLookupService
REMOTE: Created binary drop for java.util.zip.DataFormatException
REMOTE: Created binary drop for java.lang.ThreadLocal
REMOTE: Created binary drop for java.nio.file.AccessMode
REMOTE: Created binary drop for java.nio.FloatBuffer
REMOTE: Created binary drop for java.io.FileDescriptor
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/C.java
REMOTE: Created binary drop for java.nio.channels.GatheringByteChannel
REMOTE: Created binary drop for sun.reflect.MethodAccessor
REMOTE: Created binary drop for com.surelogic.InRegion
REMOTE: Created binary drop for java.nio.MappedByteBuffer
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Instance/Bad1.java
REMOTE: Created binary drop for java.util.SortedMap
REMOTE: Created binary drop for java.util.zip.ZipException
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/Other.java
REMOTE: Created binary drop for java.security.PublicKey
REMOTE: Created binary drop for java.util.Map
REMOTE: Created binary drop for java.nio.file.WatchEvent
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/StateLock_visibility.java
REMOTE: Created binary drop for java.util.LinkedList
REMOTE: Created binary drop for java.nio.file.attribute.AttributeView
REMOTE: Created binary drop for java.nio.channels.ByteChannel
REMOTE: Created binary drop for java.security.Principal
REMOTE: Created binary drop for java.util.concurrent.locks.Condition
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/Other1.java
REMOTE: Created binary drop for java.util.zip.ZipFile
REMOTE: Created binary drop for java.nio.ShortBuffer
REMOTE: Created binary drop for java.util.Date
REMOTE: Created binary drop for java.net.URISyntaxException
REMOTE: Created binary drop for sun.reflect.ReflectionFactory
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_returns_lock/C_Policy.java
REMOTE: Created binary drop for java.nio.charset.CharsetEncoder
REMOTE: Created binary drop for java.lang.Long
REMOTE: Created binary drop for java.util.Set
REMOTE: Created binary drop for java.lang.IllegalAccessException
REMOTE: Created binary drop for java.security.cert.CertPath
REMOTE: Created binary drop for java.lang.Thread
REMOTE: Created binary drop for java.lang.ClassLoader
REMOTE: Created binary drop for java.util.jar.JarEntry
REMOTE: Created binary drop for java.security.cert.CertificateException
REMOTE: Created binary drop for sun.misc.Resource
REMOTE: Created binary drop for java.net.URLConnection
REMOTE: Created binary drop for java.net.FileNameMap
REMOTE: Created binary drop for java.net.InterfaceAddress
REMOTE: Created binary drop for java.lang.ref.WeakReference
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Subregion/BadRoot2.java
REMOTE: Created binary drop for java.util.ArrayList
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/D.java
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/Root.java
REMOTE: Created binary drop for java.util.Iterator
REMOTE: Created binary drop for java.lang.ref.ReferenceQueue
REMOTE: Created binary drop for java.net.ContentHandlerFactory
REMOTE: Created binary drop for java.lang.reflect.GenericDeclaration
REMOTE: Created binary drop for java.io.DataOutput
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/good/Good4.java
REMOTE: Created binary drop for java.nio.file.attribute.FileStoreAttributeView
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/unrelatedClasses/Test2.java
REMOTE: Created binary drop for java.security.KeyException
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/good/GoodRoot.java
REMOTE: Created binary drop for java.io.SyncFailedException
REMOTE: Created binary drop for java.lang.reflect.AnnotatedElement
REMOTE: Created binary drop for java.security.Key
REMOTE: Created binary drop for java.net.InetAddress
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/C_Policy.java
REMOTE: Created binary drop for java.security.NoSuchAlgorithmException
REMOTE: Created binary drop for sun.util.locale.Extension
REMOTE: Created binary drop for java.net.NetworkInterface
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/inherited/Duper.java
REMOTE: Created binary drop for sun.util.locale.LocaleExtensions
REMOTE: Created binary drop for java.lang.Float
REMOTE: Created binary drop for java.lang.Class
REMOTE: Created binary drop for java.util.zip.Inflater
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/D.java
REMOTE: Created binary drop for java.util.Queue
REMOTE: Created binary drop for java.io.FilterOutputStream
REMOTE: Created binary drop for java.util.concurrent.Future
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/qualified_receivers_as_locks/Outer.java
REMOTE: Created binary drop for java.util.jar.JarFile
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/GoodC3.java
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/C.java
REMOTE: Created binary drop for java.util.jar.Attributes
REMOTE: Created binary drop for java.util.Enumeration
REMOTE: Created binary drop for java.util.spi.LocaleServiceProvider
REMOTE: Created binary drop for java.security.Permission
REMOTE: Created binary drop for java.util.concurrent.Executor
REMOTE: Created binary drop for java.nio.file.attribute.GroupPrincipal
REMOTE: Created binary drop for java.lang.AbstractStringBuilder
REMOTE: Created binary drop for com.surelogic.RegionLocks
REMOTE: Created binary drop for java.security.NoSuchProviderException
REMOTE: Created binary drop for com.surelogic.PolicyLock
REMOTE: Created binary drop for java.lang.StringBuilder
REMOTE: Created binary drop for java.math.BigInteger
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/sameClass/Bad.java
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/good/Good3.java
REMOTE: Created binary drop for java.util.concurrent.locks.Lock
REMOTE: Created binary drop for java.nio.file.attribute.BasicFileAttributes
REMOTE: Created binary drop for java.net.Proxy
REMOTE: Created binary drop for java.security.AccessControlException
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/good/Good2.java
REMOTE: Created binary drop for java.util.concurrent.locks.ReentrantLock
REMOTE: Created binary drop for java.lang.reflect.AccessibleObject
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/LockVizJUC.java
REMOTE: Created binary drop for java.lang.annotation.Target
REMOTE: Created binary drop for sun.nio.ch.Interruptible
REMOTE: Created binary drop for java.nio.charset.CharsetDecoder
REMOTE: Created binary drop for java.util.ResourceBundle
REMOTE: Created binary drop for java.lang.AutoCloseable
REMOTE: Created binary drop for java.net.URLStreamHandler
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/D.java
REMOTE: Created binary drop for java.net.UnknownHostException
REMOTE: Created binary drop for java.net.URI
REMOTE: Created binary drop for sun.util.resources.OpenListResourceBundle
REMOTE: Created binary drop for java.io.IOException
REMOTE: Created binary drop for java.lang.StringBuffer
REMOTE: Created binary drop for java.lang.annotation.Annotation
REMOTE: Created binary drop for java.util.AbstractSet
REMOTE: Created binary drop for java.io.InputStream
REMOTE: Created binary drop for java.lang.CloneNotSupportedException
REMOTE: Created binary drop for java.util.Stack
REMOTE: Created binary drop for java.util.AbstractSequentialList
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/BadC2.java
REMOTE: Created binary drop for java.lang.annotation.Retention
REMOTE: Created binary drop for java.lang.annotation.RetentionPolicy
REMOTE: Created binary drop for java.lang.Boolean
REMOTE: Created binary drop for java.nio.channels.AsynchronousCloseException
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/StateVsPolicyLocks.java
REMOTE: Created binary drop for java.util.Vector
REMOTE: Created binary drop for java.util.concurrent.ExecutorService
REMOTE: Created binary drop for java.nio.ByteBuffer
REMOTE: Created binary drop for java.nio.charset.Charset
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/Parent.java
REMOTE: Created binary drop for java.io.FileFilter
REMOTE: Created binary drop for java.net.InetAddressImpl
REMOTE: Created binary drop for java.lang.ref.SoftReference
REMOTE: Created binary drop for java.io.FileNotFoundException
REMOTE: Created binary drop for java.io.UnsupportedEncodingException
REMOTE: Created binary drop for java.util.Comparator
REMOTE: Created binary drop for java.nio.charset.CoderResult
REMOTE: Created binary drop for java.nio.channels.InterruptibleChannel
REMOTE: Created binary drop for java.lang.SuppressWarnings
REMOTE: Created binary drop for java.util.AbstractMap
REMOTE: Created binary drop for java.security.PrivilegedAction
REMOTE: Created binary drop for java.lang.reflect.TypeVariable
REMOTE: Created binary drop for java.nio.file.Path
REMOTE: Created binary drop for java.nio.channels.ScatteringByteChannel
REMOTE: Created binary drop for sun.reflect.ConstantPool
REMOTE: Created binary drop for java.nio.channels.FileLock
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/StateLock_Constructor.java
REMOTE: Created binary drop for java.util.concurrent.locks.ReentrantReadWriteLock
REMOTE: Created binary drop for java.util.zip.ZipConstants
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/unrelatedClasses/Test.java
REMOTE: Created binary drop for java.nio.file.DirectoryStream
REMOTE: Created binary drop for java.lang.StackTraceElement
REMOTE: Created binary drop for java.nio.channels.SeekableByteChannel
REMOTE: Created binary drop for java.util.spi.LocaleNameProvider
REMOTE: Created binary drop for sun.util.locale.LocaleSyntaxException
REMOTE: Created binary drop for java.security.InvalidKeyException
REMOTE: Created binary drop for java.lang.IllegalArgumentException
REMOTE: Created binary drop for java.lang.reflect.Method
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/baseCase/Good1.java
REMOTE: Created binary drop for java.lang.Comparable
REMOTE: Created binary drop for com.surelogic.ReturnsLock
REMOTE: Created binary drop for java.lang.NoSuchFieldException
REMOTE: Created binary drop for java.io.ObjectStreamException
REMOTE: Created binary drop for java.security.AccessControlContext
REMOTE: Created binary drop for java.net.SocketException
REMOTE: Created binary drop for java.lang.Byte
REMOTE: Created binary drop for java.net.ContentHandler
REMOTE: Created binary drop for java.security.cert.CertificateEncodingException
REMOTE: Created binary drop for sun.util.locale.BaseLocale
REMOTE: Created binary drop for java.net.URL
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/TestDuplicates.java
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Instance/BadRoot1.java
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/PolicyLock_Constructor.java
REMOTE: Created binary drop for java.lang.SecurityException
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/CannotRequireRWLock.java
REMOTE: Created binary drop for java.io.PrintStream
REMOTE: Created binary drop for java.io.File
REMOTE: Created binary drop for java.nio.file.PathMatcher
REMOTE: Created binary drop for java.nio.file.attribute.FileAttributeView
REMOTE: Created binary drop for java.lang.NullPointerException
REMOTE: Created binary drop for java.nio.charset.CharacterCodingException
REMOTE: Created binary drop for java.lang.Double
REMOTE: Created binary drop for sun.util.locale.InternalLocaleBuilder
REMOTE: Created binary drop for java.nio.file.attribute.FileAttribute
REMOTE: Created binary drop for java.lang.CharSequence
REMOTE: Created binary drop for java.lang.NumberFormatException
REMOTE: Created binary drop for java.security.DomainCombiner
REMOTE: Created binary drop for sun.reflect.ConstructorAccessor
REMOTE: Created binary drop for java.io.FilterInputStream
REMOTE: Created binary drop for java.net.UnknownServiceException
REMOTE: Created binary drop for java.lang.reflect.Field
REMOTE: Created binary drop for sun.reflect.CallerSensitive
REMOTE: Created binary drop for java.lang.reflect.Constructor
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/LockViz.java
REMOTE: Created binary drop for java.io.Closeable
REMOTE: Created binary drop for java.util.concurrent.locks.AbstractOwnableSynchronizer
REMOTE: Created binary drop for java.io.PrintWriter
REMOTE: Created binary drop for java.util.List
REMOTE: Created binary drop for java.util.concurrent.locks.ReadWriteLock
REMOTE: Created binary drop for java.io.Serializable
REMOTE: Created binary drop for java.nio.file.attribute.UserPrincipal
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/ProtectInheritedRegion.java
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/TestImprovedMessages.java
REMOTE: Created binary drop for java.lang.Integer
REMOTE: Created binary drop for java.util.concurrent.locks.AbstractQueuedSynchronizer
REMOTE: Created binary drop for java.util.AbstractList
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Subregion/Bad2.java
REMOTE: Created binary drop for java.nio.LongBuffer
REMOTE: Created binary drop for java.lang.ThreadGroup
REMOTE: Created binary drop for com.surelogic.Region
REMOTE: Created binary drop for java.nio.file.WatchKey
REMOTE: Created binary drop for java.net.MalformedURLException
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/StateLock_LockNames.java
REMOTE: Created binary drop for java.nio.CharBuffer
REMOTE: Created binary drop for java.lang.reflect.Type
REMOTE: Created binary drop for java.lang.ClassValue
REMOTE: Created binary drop for java.lang.RuntimeException
REMOTE: Created binary drop for java.lang.reflect.InvocationTargetException
REMOTE: Created binary drop for java.net.SocketAddress
REMOTE: Created binary drop for java.security.Guard
REMOTE: Created binary drop for java.util.RandomAccess
REMOTE: Created binary drop for java.lang.Cloneable
REMOTE: Created binary drop for sun.reflect.annotation.AnnotationType
REMOTE: Created binary drop for sun.util.locale.ParseStatus
REMOTE: Created binary drop for sun.reflect.LangReflectAccess
REMOTE: Created binary drop for java.util.Deque
REMOTE: Created binary drop for java.nio.charset.CodingErrorAction
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/GreatGrandparent.java
REMOTE: Created binary drop for sun.util.locale.LanguageTag
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/PolicyLock_LockNames.java
REMOTE: Created binary drop for java.nio.file.CopyOption
REMOTE: Created binary drop for java.security.cert.Certificate
REMOTE: Created binary drop for java.nio.channels.WritableByteChannel
REMOTE: Created binary drop for java.util.concurrent.Callable
REMOTE: Created binary drop for com.surelogic.RequiresLock
REMOTE: Created binary drop for java.lang.Short
REMOTE: Created binary drop for java.lang.Deprecated
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/A.java
REMOTE: Created binary drop for java.security.GeneralSecurityException
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/PolicyLock_visibility.java
REMOTE: Created binary drop for java.lang.String
REMOTE: Created binary drop for java.lang.Readable
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/BadC3.java
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/C.java
REMOTE: Created source drop for file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/C1.java
REMOTE: Created binary drop for java.nio.file.LinkOption
REMOTE: Created binary drop for java.io.FilenameFilter
REMOTE: Created binary drop for java.lang.annotation.Documented
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: Parsing promises
REMOTE: ##SUBTASK, Parsing promises
REMOTE: Added 3 promises for java.lang.[] in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@7e32c033
REMOTE: Added 3 promises for java.lang.[] in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@46612bfc
REMOTE: Added 12 promises for java.lang.Exception in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@3bdb53ab
REMOTE: Javac making log: AnnotationRules
REMOTE: Added 6 promises for java.io.Writer in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@1b94f148
REMOTE: Added 3 promises for java.util.Locale in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@2aeea2d4
REMOTE: Added 1 promises for test_lock_region.B in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@73dc0009
REMOTE: Added 17 promises for java.util.concurrent.ConcurrentMap in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@e5d6a6d
REMOTE: Added 3 promises for java.lang.Iterable in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@482a772f
REMOTE: Added 6 promises for java.lang.Appendable in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@6ee71e4
REMOTE: Added 3 promises for test_unique_names.GoodC2 in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@379f57a9
REMOTE: Added 54 promises for java.util.Collection in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@52857d70
REMOTE: Added 22 promises for java.lang.Number in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@2c3a5317
REMOTE: Added 47 promises for java.lang.Throwable in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@78674e66
REMOTE: Added 31 promises for java.lang.Object in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@13bd6889
REMOTE: Added 3 promises for java.util.jar.Manifest in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@28134dd8
REMOTE: Added 83 promises for java.util.Hashtable in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@42456eb6
REMOTE: Added 24 promises for test_returns_lock.PLock in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@261891c4
REMOTE: Added 18 promises for java.util.ListIterator in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@764c7b25
REMOTE: Added 3 promises for java.util.zip.ZipEntry in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@50193631
REMOTE: Added 13 promises for java.lang.Enum in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@33786dc
REMOTE: Added 61 promises for java.util.HashMap in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@2beb471d
REMOTE: Added 2 promises for twoLocksOneRegion.inherited.Super in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@67efc04a
REMOTE: Added 6 promises for java.lang.InstantiationException in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@1335dd71
REMOTE: Added 29 promises for java.util.concurrent.TimeUnit in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@144a0f91
REMOTE: Added 56 promises for java.util.WeakHashMap in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@4113f1a2
REMOTE: Added 17 promises for test_returns_lock.C in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@21e196d
REMOTE: Added 1 promises for inherited_region.Subregion.Bad3 in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@57badf28
REMOTE: Added 6 promises for java.lang.InterruptedException in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@7d8b2803
REMOTE: Added 29 promises for java.util.Dictionary in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@4b7a94a2
REMOTE: Added 1 promises for test_lock_region.Other in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@619b1078
REMOTE: Added 10 promises for test_lock_region.Grandparent in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@4f440d4c
REMOTE: Added 1 promises for java.lang.ThreadLocal in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@273e538e
REMOTE: line 1:49 missing EOF at '.'
REMOTE: line 1:49 missing EOF at '.'
REMOTE: Added 3 promises for test_requires_lock.Other1 in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@1cd06a56
REMOTE: Added 26 promises for test_returns_lock.StateLock in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@32a8155d
REMOTE: Added 1 promises for inherited_region.Instance.Bad1 in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@3438239c
REMOTE: line 1:49 missing EOF at '.'
REMOTE: Added 18 promises for test_lock_region.C in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@3bc8370a
REMOTE: Added 55 promises for java.util.AbstractCollection in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@aac3f1c
REMOTE: Added 31 promises for java.util.SortedMap in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@35b059dc
REMOTE: Added 22 promises for java.util.concurrent.locks.Condition in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@5da8d68c
REMOTE: Added 15 promises for test_returns_lock.C_Policy in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@7f63de22
REMOTE: Added 3 promises for java.util.Date in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@63cef7b5
REMOTE: Added 6 promises for java.lang.IllegalAccessException in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@8988774
REMOTE: Added 18 promises for java.net.URISyntaxException in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@5062e6b3
REMOTE: Added 64 promises for java.util.Map in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@51418820
REMOTE: Added 87 promises for test_requires_lock.StateLock_visibility in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@6574714b
REMOTE: Added 1 promises for twoLocksOneRegion.unrelatedClasses.Test2 in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@6e56ff2
REMOTE: Added 3 promises for test_requires_lock.Root in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@379751ec
REMOTE: Added 1 promises for inherited_region.good.Good4 in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@6d8f132b
REMOTE: Added 1 promises for test_lock_region.D in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@5637cec4
REMOTE: Added 1 promises for java.lang.ref.ReferenceQueue in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@625c602f
REMOTE: Added 96 promises for java.lang.Long in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@334365ad
REMOTE: Added 2 promises for inherited_region.Subregion.BadRoot2 in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@2cc0c45f
REMOTE: Added 6 promises for java.util.Iterator in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@6a6c034a
REMOTE: Added 1 promises for inherited_region.good.GoodRoot in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@464fe0d4
REMOTE: Added 54 promises for java.util.Set in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@300860b9
REMOTE: Added 2 promises for twoLocksOneRegion.inherited.Duper in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@4c1284e7
REMOTE: Added 14 promises for test_requires_lock.C_Policy in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@2e8f60ba
REMOTE: Added 4 promises for qualified_receivers_as_locks.Outer in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@67f0257b
REMOTE: Added 141 promises for java.lang.Thread in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@23c1d22b
REMOTE: Added 139 promises for java.util.LinkedList in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@338da7ab
REMOTE: Added 3 promises for test_unique_names.GoodC3 in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@5e5878f8
REMOTE: WARNING: TreeAccessor couldn't find equals(java.lang.Object) in java.util.ArrayList
REMOTE: WARNING: TreeAccessor couldn't find hashCode() in java.util.ArrayList
REMOTE: Added 12 promises for java.lang.Class in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@3e86790a
REMOTE: Added 73 promises for java.lang.Float in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@121e1910
REMOTE: [GC (Allocation Failure)  125442K->59978K(168960K), 0.0054310 secs]
REMOTE: Added 18 promises for java.util.Queue in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@2004621a
REMOTE: Added 4 promises for java.util.Enumeration in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@6ff5fb37
REMOTE: Added 88 promises for java.util.jar.Attributes in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@4a4dbc18
REMOTE: Added 104 promises for java.util.ArrayList in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@2a30aa6
REMOTE: Added 2 promises for inherited_region.good.Good2 in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@589e7382
REMOTE: Added 64 promises for test_lock_field.C in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@6e8c51d8
REMOTE: Added 3 promises for twoLocksOneRegion.sameClass.Bad in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@62457031
REMOTE: Added 2 promises for inherited_region.good.Good3 in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@566a31f4
REMOTE: Added 20 promises for java.util.concurrent.locks.Lock in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@13e1a614
REMOTE: Added 3 promises for test_requires_lock.D in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@2c15ebbb
REMOTE: Added 21 promises for java.util.Stack in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@10095c9f
REMOTE: Added 45 promises for java.util.ResourceBundle in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@3efa96be
REMOTE: Added 58 promises for java.util.concurrent.locks.ReentrantLock in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@2b54f3ae
REMOTE: Added 66 promises for test_lock_region.LockVizJUC in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@c3f1f0
REMOTE: Added 138 promises for java.math.BigInteger in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@51579335
REMOTE: Added 16 promises for java.util.AbstractSet in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@538c06a9
REMOTE: Added 6 promises for java.lang.CloneNotSupportedException in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@6aab4eb2
REMOTE: Added 109 promises for java.lang.StringBuilder in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@a68606c
REMOTE: Added 144 promises for java.lang.AbstractStringBuilder in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@41a61c91
REMOTE: Added 29 promises for java.util.AbstractSequentialList in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@7abdc95c
REMOTE: Added 7 promises for test_unique_names.StateVsPolicyLocks in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@45b25db0
REMOTE: Added 3 promises for test_unique_names.BadC2 in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@787599ca
REMOTE: Added 2 promises for java.lang.ref.SoftReference in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@3ad55cec
REMOTE: Added 11 promises for test_lock_region.Parent in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@7b12ec75
REMOTE: Added 37 promises for java.lang.Boolean in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@8f8b1cf
REMOTE: Added 3 promises for java.nio.file.Path in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@1393fb31
REMOTE: Added 3 promises for java.nio.file.DirectoryStream in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@4c952bc7
REMOTE: Added 34 promises for java.util.concurrent.ExecutorService in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@4a512ea
REMOTE: Added 1 promises for twoLocksOneRegion.unrelatedClasses.Test in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@609c942a
REMOTE: Added 9 promises for test_requires_lock.StateLock_Constructor in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@20f323ed
REMOTE: Added 12 promises for java.lang.IllegalArgumentException in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@622b568a
REMOTE: Added 1 promises for inherited_region.baseCase.Good1 in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@25870e75
REMOTE: Added 170 promises for java.util.Vector in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@636a9d88
REMOTE: Added 6 promises for java.lang.NoSuchFieldException in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@f9d8d6
REMOTE: Added 7 promises for test_requires_lock.PolicyLock_Constructor in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@6bec8e19
REMOTE: Added 16 promises for test_requires_lock.TestDuplicates in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@387f1d5b
REMOTE: Added 3 promises for test_requires_lock.CannotRequireRWLock in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@792654a5
REMOTE: Added 108 promises for java.util.AbstractMap in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@5f2b3cc8
REMOTE: Added 12 promises for java.lang.SecurityException in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@58028740
REMOTE: Added 6 promises for java.io.PrintStream in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@cb9c9ec
REMOTE: Added 103 promises for java.util.concurrent.locks.ReentrantReadWriteLock in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@6fcbfb6c
REMOTE: Added 6 promises for java.io.PrintWriter in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@56508179
REMOTE: Added 59 promises for java.lang.Byte in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@ffaffac
REMOTE: Added 6 promises for java.lang.NullPointerException in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@466018d7
REMOTE: Added 158 promises for java.lang.StringBuffer in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@1ae9c66a
REMOTE: Added 7 promises for java.util.concurrent.locks.ReadWriteLock in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@1f4689a6
REMOTE: Added 6 promises for java.lang.NumberFormatException in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@4ec03226
REMOTE: Added 12 promises for java.lang.CharSequence in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@3c932998
REMOTE: Added 70 promises for java.lang.Double in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@6ff56dc3
REMOTE: Added 66 promises for test_lock_region.LockViz in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@6d706dc5
REMOTE: Added 22 promises for java.util.concurrent.locks.AbstractQueuedSynchronizer in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@673281b9
REMOTE: Added 16 promises for test_lock_region.ProtectInheritedRegion in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@1c65a80d
REMOTE: Added 1 promises for inherited_region.Subregion.Bad2 in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@79c3cca0
REMOTE: Added 26 promises for test_requires_lock.StateLock_LockNames in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@3edbbc74
REMOTE: Added 12 promises for java.lang.RuntimeException in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@35c5c062
REMOTE: Added 89 promises for java.util.List in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@4f68a269
REMOTE: Added 2 promises for test_requires_lock.TestImprovedMessages in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@75aa43f9
REMOTE: Added 60 promises for java.util.AbstractList in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@3a2011ea
REMOTE: Added 18 promises for java.nio.CharBuffer in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@1af5df5f
REMOTE: Added 11 promises for test_lock_region.GreatGrandparent in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@42e265fa
REMOTE: Added 12 promises for java.lang.reflect.InvocationTargetException in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@edb7dc
REMOTE: Added 3 promises for test_unique_names.BadC3 in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@3d7a41da
REMOTE: Added 3 promises for test_unique_names.C1 in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@37f0278f
REMOTE: Added 23 promises for test_requires_lock.PolicyLock_LockNames in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@27ebeb18
REMOTE: Added 61 promises for java.lang.Short in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@3a4880bf
REMOTE: Added 87 promises for java.util.Deque in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@2cea5920
REMOTE: Added 16 promises for test_requires_lock.C in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@7fd32a46
REMOTE: Added 96 promises for java.lang.Integer in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@5d83f65f
REMOTE: Added 79 promises for test_requires_lock.PolicyLock_visibility in TestLockSanityChecks: com.surelogic.tree.SyntaxTreeNode@6150de5a
REMOTE: [GC (Allocation Failure)  138826K->61915K(171008K), 0.0062850 secs]
REMOTE: Added 301 promises for java.lang.String in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@403017fe
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: Scrubbing promises
REMOTE: ##SUBTASK, Scrubbing promises
REMOTE: Creating RegionModel java.lang.Object.Instance for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: [2016-01-27 14:23:01    INFO] Couldn't find field unknownField in com.surelogic.tree.SyntaxTreeNode@6e8c51d8 -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } )   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLocks ( {   /* is UNBOUND: Field is undefined (Instance Region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: receiver (Instance Region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: known final field (Instance Region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: field is non-final (Instance Region) */  @ RegionLock ( # ) ,   /* is UNBOUND: Field is undefined (Static region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: class (Static region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: known final static field (static region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field (static region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: primitively typed field */  @ RegionLock ( # ) ,   /* is CONSISTENT: Static locks can use fields from other classes */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: Instance locks cannot use fields from other classes */  @ RegionLock ( # ) ,   /* is CONSISTENT: Can use field from GP */  @ RegionLock ( # ) ,   /* is CONSISTENT: Can use field from Parent */  @ RegionLock ( # ) ,   /* is UNBOUND: Field is unknown */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: Cannot use a field from a child */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from GP */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from parent */  @ RegionLock ( # ) ,   /* is UNBOUND: unknown field */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from child */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: class cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) } )   /* is UNASSOCIATED: non-final field from child */  @ PolicyLocks ( {   /* is UNBOUND: Field is undefined (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: receiver (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: known final field (Instance Region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: field is non-final (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: class (Static region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: known final static field (static region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field (static region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: primitively typed field */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Static locks can use fields from other classes */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: Instance locks cannot use fields from other classes */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Can use field from GP */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Can use field from Parent */  @ PolicyLock ( # ) ,   /* is UNBOUND: Field is unknown */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: Cannot use a field from a child */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from GP */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from parent */  @ PolicyLock ( # ) ,   /* is UNBOUND: unknown field */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from child */  @ PolicyLock ( # ) } ) public class C extends test_lock_field.B { public  C () { # } final java.lang.Object goodField #; java.lang.Object badField #; final int nonObjectField #; final static java.lang.Object goodStatic #; static java.lang.Object badStatic #; }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:01    INFO] Couldn't find field unknownField in com.surelogic.tree.SyntaxTreeNode@6e8c51d8 -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } )   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLocks ( {   /* is UNBOUND: Field is undefined (Instance Region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: receiver (Instance Region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: known final field (Instance Region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: field is non-final (Instance Region) */  @ RegionLock ( # ) ,   /* is UNBOUND: Field is undefined (Static region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: class (Static region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: known final static field (static region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field (static region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: primitively typed field */  @ RegionLock ( # ) ,   /* is CONSISTENT: Static locks can use fields from other classes */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: Instance locks cannot use fields from other classes */  @ RegionLock ( # ) ,   /* is CONSISTENT: Can use field from GP */  @ RegionLock ( # ) ,   /* is CONSISTENT: Can use field from Parent */  @ RegionLock ( # ) ,   /* is UNBOUND: Field is unknown */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: Cannot use a field from a child */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from GP */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from parent */  @ RegionLock ( # ) ,   /* is UNBOUND: unknown field */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from child */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: class cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) } )   /* is UNASSOCIATED: non-final field from child */  @ PolicyLocks ( {   /* is UNBOUND: Field is undefined (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: receiver (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: known final field (Instance Region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: field is non-final (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: class (Static region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: known final static field (static region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field (static region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: primitively typed field */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Static locks can use fields from other classes */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: Instance locks cannot use fields from other classes */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Can use field from GP */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Can use field from Parent */  @ PolicyLock ( # ) ,   /* is UNBOUND: Field is unknown */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: Cannot use a field from a child */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from GP */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from parent */  @ PolicyLock ( # ) ,   /* is UNBOUND: unknown field */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from child */  @ PolicyLock ( # ) } ) public class C extends test_lock_field.B { public  C () { # } final java.lang.Object goodField #; java.lang.Object badField #; final int nonObjectField #; final static java.lang.Object goodStatic #; static java.lang.Object badStatic #; }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:01    INFO] Couldn't find field fieldFromD in com.surelogic.tree.SyntaxTreeNode@6e8c51d8 -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } )   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLocks ( {   /* is UNBOUND: Field is undefined (Instance Region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: receiver (Instance Region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: known final field (Instance Region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: field is non-final (Instance Region) */  @ RegionLock ( # ) ,   /* is UNBOUND: Field is undefined (Static region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: class (Static region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: known final static field (static region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field (static region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: primitively typed field */  @ RegionLock ( # ) ,   /* is CONSISTENT: Static locks can use fields from other classes */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: Instance locks cannot use fields from other classes */  @ RegionLock ( # ) ,   /* is CONSISTENT: Can use field from GP */  @ RegionLock ( # ) ,   /* is CONSISTENT: Can use field from Parent */  @ RegionLock ( # ) ,   /* is UNBOUND: Field is unknown */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: Cannot use a field from a child */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from GP */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from parent */  @ RegionLock ( # ) ,   /* is UNBOUND: unknown field */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from child */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: class cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) } )   /* is UNASSOCIATED: non-final field from child */  @ PolicyLocks ( {   /* is UNBOUND: Field is undefined (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: receiver (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: known final field (Instance Region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: field is non-final (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: class (Static region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: known final static field (static region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field (static region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: primitively typed field */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Static locks can use fields from other classes */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: Instance locks cannot use fields from other classes */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Can use field from GP */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Can use field from Parent */  @ PolicyLock ( # ) ,   /* is UNBOUND: Field is unknown */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: Cannot use a field from a child */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from GP */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from parent */  @ PolicyLock ( # ) ,   /* is UNBOUND: unknown field */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from child */  @ PolicyLock ( # ) } ) public class C extends test_lock_field.B { public  C () { # } final java.lang.Object goodField #; java.lang.Object badField #; final int nonObjectField #; final static java.lang.Object goodStatic #; static java.lang.Object badStatic #; }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:01    INFO] Couldn't find field fieldFromD in com.surelogic.tree.SyntaxTreeNode@6e8c51d8 -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } )   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLocks ( {   /* is UNBOUND: Field is undefined (Instance Region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: receiver (Instance Region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: known final field (Instance Region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: field is non-final (Instance Region) */  @ RegionLock ( # ) ,   /* is UNBOUND: Field is undefined (Static region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: class (Static region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: known final static field (static region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field (static region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: primitively typed field */  @ RegionLock ( # ) ,   /* is CONSISTENT: Static locks can use fields from other classes */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: Instance locks cannot use fields from other classes */  @ RegionLock ( # ) ,   /* is CONSISTENT: Can use field from GP */  @ RegionLock ( # ) ,   /* is CONSISTENT: Can use field from Parent */  @ RegionLock ( # ) ,   /* is UNBOUND: Field is unknown */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: Cannot use a field from a child */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from GP */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from parent */  @ RegionLock ( # ) ,   /* is UNBOUND: unknown field */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from child */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: class cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) } )   /* is UNASSOCIATED: non-final field from child */  @ PolicyLocks ( {   /* is UNBOUND: Field is undefined (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: receiver (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: known final field (Instance Region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: field is non-final (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: class (Static region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: known final static field (static region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field (static region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: primitively typed field */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Static locks can use fields from other classes */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: Instance locks cannot use fields from other classes */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Can use field from GP */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Can use field from Parent */  @ PolicyLock ( # ) ,   /* is UNBOUND: Field is unknown */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: Cannot use a field from a child */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from GP */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from parent */  @ PolicyLock ( # ) ,   /* is UNBOUND: unknown field */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from child */  @ PolicyLock ( # ) } ) public class C extends test_lock_field.B { public  C () { # } final java.lang.Object goodField #; java.lang.Object badField #; final int nonObjectField #; final static java.lang.Object goodStatic #; static java.lang.Object badStatic #; }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:01    INFO] Couldn't find field badFieldFromD in com.surelogic.tree.SyntaxTreeNode@6e8c51d8 -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } )   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLocks ( {   /* is UNBOUND: Field is undefined (Instance Region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: receiver (Instance Region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: known final field (Instance Region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: field is non-final (Instance Region) */  @ RegionLock ( # ) ,   /* is UNBOUND: Field is undefined (Static region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: class (Static region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: known final static field (static region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field (static region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: primitively typed field */  @ RegionLock ( # ) ,   /* is CONSISTENT: Static locks can use fields from other classes */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: Instance locks cannot use fields from other classes */  @ RegionLock ( # ) ,   /* is CONSISTENT: Can use field from GP */  @ RegionLock ( # ) ,   /* is CONSISTENT: Can use field from Parent */  @ RegionLock ( # ) ,   /* is UNBOUND: Field is unknown */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: Cannot use a field from a child */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from GP */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from parent */  @ RegionLock ( # ) ,   /* is UNBOUND: unknown field */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from child */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: class cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) } )   /* is UNASSOCIATED: non-final field from child */  @ PolicyLocks ( {   /* is UNBOUND: Field is undefined (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: receiver (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: known final field (Instance Region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: field is non-final (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: class (Static region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: known final static field (static region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field (static region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: primitively typed field */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Static locks can use fields from other classes */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: Instance locks cannot use fields from other classes */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Can use field from GP */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Can use field from Parent */  @ PolicyLock ( # ) ,   /* is UNBOUND: Field is unknown */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: Cannot use a field from a child */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from GP */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from parent */  @ PolicyLock ( # ) ,   /* is UNBOUND: unknown field */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from child */  @ PolicyLock ( # ) } ) public class C extends test_lock_field.B { public  C () { # } final java.lang.Object goodField #; java.lang.Object badField #; final int nonObjectField #; final static java.lang.Object goodStatic #; static java.lang.Object badStatic #; }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:01    INFO] Couldn't find field badFieldFromD in com.surelogic.tree.SyntaxTreeNode@6e8c51d8 -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } )   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLocks ( {   /* is UNBOUND: Field is undefined (Instance Region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: receiver (Instance Region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: known final field (Instance Region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: field is non-final (Instance Region) */  @ RegionLock ( # ) ,   /* is UNBOUND: Field is undefined (Static region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: class (Static region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: known final static field (static region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field (static region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: primitively typed field */  @ RegionLock ( # ) ,   /* is CONSISTENT: Static locks can use fields from other classes */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: Instance locks cannot use fields from other classes */  @ RegionLock ( # ) ,   /* is CONSISTENT: Can use field from GP */  @ RegionLock ( # ) ,   /* is CONSISTENT: Can use field from Parent */  @ RegionLock ( # ) ,   /* is UNBOUND: Field is unknown */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: Cannot use a field from a child */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from GP */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from parent */  @ RegionLock ( # ) ,   /* is UNBOUND: unknown field */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from child */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: class cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) } )   /* is UNASSOCIATED: non-final field from child */  @ PolicyLocks ( {   /* is UNBOUND: Field is undefined (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: receiver (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: known final field (Instance Region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: field is non-final (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: class (Static region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: known final static field (static region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field (static region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: primitively typed field */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Static locks can use fields from other classes */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: Instance locks cannot use fields from other classes */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Can use field from GP */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Can use field from Parent */  @ PolicyLock ( # ) ,   /* is UNBOUND: Field is unknown */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: Cannot use a field from a child */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from GP */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from parent */  @ PolicyLock ( # ) ,   /* is UNBOUND: unknown field */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from child */  @ PolicyLock ( # ) } ) public class C extends test_lock_field.B { public  C () { # } final java.lang.Object goodField #; java.lang.Object badField #; final int nonObjectField #; final static java.lang.Object goodStatic #; static java.lang.Object badStatic #; }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:01    INFO] Couldn't find region UnknownRegion in com.surelogic.tree.SyntaxTreeNode@3bc8370a -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } )   /* is UNPARSEABLE: static region is from unrelated class (Other) */  @ RegionLocks ( {   /* is UNBOUND: Region is undefined */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: Cannot protect a static region with 'this' */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: Cannot protect a static region with a non-static field */  @ RegionLock ( # ) ,   /* is CONSISTENT: Static region protected by class */  @ RegionLock ( # ) ,   /* is CONSISTENT: Static region protected by static field */  @ RegionLock ( # ) ,   /* is CONSISTENT: Static region is from the protecting class; field is from the same */  @ RegionLock ( # ) ,   /* is CONSISTENT: Static region is from the protecting class; doesn't matter that field is from superclass (B) */  @ RegionLock ( # ) ,   /* is CONSISTENT: Static region is from the protecting class; doesn't matter that field is from subclass (D) */  @ RegionLock ( # ) ,   /* is CONSISTENT: Static region is from the protecting class; doesn't matter that field is from an unrelated class (Other) */  @ RegionLock ( # ) ,   /* is UNPARSEABLE: static region is from superclass (B) */  @ RegionLock ( # ) ,   /* is UNPARSEABLE: static region is from subclass (D) */  @ RegionLock ( # ) ,   /* is UNPARSEABLE: static region is from unrelated class (Other) */  @ RegionLock ( # ) } ) public class C extends test_lock_region.B { public  C () { # } final java.lang.Object nonStaticField #; final static java.lang.Object staticFieldFromC #; }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:01    INFO] Couldn't find region UnknownRegion in com.surelogic.tree.SyntaxTreeNode@3bc8370a -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } )   /* is UNPARSEABLE: static region is from unrelated class (Other) */  @ RegionLocks ( {   /* is UNBOUND: Region is undefined */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: Cannot protect a static region with 'this' */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: Cannot protect a static region with a non-static field */  @ RegionLock ( # ) ,   /* is CONSISTENT: Static region protected by class */  @ RegionLock ( # ) ,   /* is CONSISTENT: Static region protected by static field */  @ RegionLock ( # ) ,   /* is CONSISTENT: Static region is from the protecting class; field is from the same */  @ RegionLock ( # ) ,   /* is CONSISTENT: Static region is from the protecting class; doesn't matter that field is from superclass (B) */  @ RegionLock ( # ) ,   /* is CONSISTENT: Static region is from the protecting class; doesn't matter that field is from subclass (D) */  @ RegionLock ( # ) ,   /* is CONSISTENT: Static region is from the protecting class; doesn't matter that field is from an unrelated class (Other) */  @ RegionLock ( # ) ,   /* is UNPARSEABLE: static region is from superclass (B) */  @ RegionLock ( # ) ,   /* is UNPARSEABLE: static region is from subclass (D) */  @ RegionLock ( # ) ,   /* is UNPARSEABLE: static region is from unrelated class (Other) */  @ RegionLock ( # ) } ) public class C extends test_lock_region.B { public  C () { # } final java.lang.Object nonStaticField #; final static java.lang.Object staticFieldFromC #; }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:01    INFO] Couldn't find field unknownField in com.surelogic.tree.SyntaxTreeNode@6e8c51d8 -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } )   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLocks ( {   /* is UNBOUND: Field is undefined (Instance Region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: receiver (Instance Region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: known final field (Instance Region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: field is non-final (Instance Region) */  @ RegionLock ( # ) ,   /* is UNBOUND: Field is undefined (Static region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: class (Static region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: known final static field (static region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field (static region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: primitively typed field */  @ RegionLock ( # ) ,   /* is CONSISTENT: Static locks can use fields from other classes */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: Instance locks cannot use fields from other classes */  @ RegionLock ( # ) ,   /* is CONSISTENT: Can use field from GP */  @ RegionLock ( # ) ,   /* is CONSISTENT: Can use field from Parent */  @ RegionLock ( # ) ,   /* is UNBOUND: Field is unknown */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: Cannot use a field from a child */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from GP */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from parent */  @ RegionLock ( # ) ,   /* is UNBOUND: unknown field */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from child */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: class cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) } )   /* is UNASSOCIATED: non-final field from child */  @ PolicyLocks ( {   /* is UNBOUND: Field is undefined (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: receiver (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: known final field (Instance Region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: field is non-final (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: class (Static region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: known final static field (static region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field (static region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: primitively typed field */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Static locks can use fields from other classes */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: Instance locks cannot use fields from other classes */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Can use field from GP */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Can use field from Parent */  @ PolicyLock ( # ) ,   /* is UNBOUND: Field is unknown */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: Cannot use a field from a child */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from GP */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from parent */  @ PolicyLock ( # ) ,   /* is UNBOUND: unknown field */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from child */  @ PolicyLock ( # ) } ) public class C extends test_lock_field.B { public  C () { # } final java.lang.Object goodField #; java.lang.Object badField #; final int nonObjectField #; final static java.lang.Object goodStatic #; static java.lang.Object badStatic #; }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:01    INFO] Couldn't find field unknownField in com.surelogic.tree.SyntaxTreeNode@6e8c51d8 -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } )   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLocks ( {   /* is UNBOUND: Field is undefined (Instance Region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: receiver (Instance Region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: known final field (Instance Region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: field is non-final (Instance Region) */  @ RegionLock ( # ) ,   /* is UNBOUND: Field is undefined (Static region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: class (Static region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: known final static field (static region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field (static region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: primitively typed field */  @ RegionLock ( # ) ,   /* is CONSISTENT: Static locks can use fields from other classes */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: Instance locks cannot use fields from other classes */  @ RegionLock ( # ) ,   /* is CONSISTENT: Can use field from GP */  @ RegionLock ( # ) ,   /* is CONSISTENT: Can use field from Parent */  @ RegionLock ( # ) ,   /* is UNBOUND: Field is unknown */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: Cannot use a field from a child */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from GP */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from parent */  @ RegionLock ( # ) ,   /* is UNBOUND: unknown field */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from child */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: class cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) } )   /* is UNASSOCIATED: non-final field from child */  @ PolicyLocks ( {   /* is UNBOUND: Field is undefined (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: receiver (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: known final field (Instance Region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: field is non-final (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: class (Static region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: known final static field (static region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field (static region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: primitively typed field */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Static locks can use fields from other classes */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: Instance locks cannot use fields from other classes */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Can use field from GP */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Can use field from Parent */  @ PolicyLock ( # ) ,   /* is UNBOUND: Field is unknown */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: Cannot use a field from a child */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from GP */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from parent */  @ PolicyLock ( # ) ,   /* is UNBOUND: unknown field */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from child */  @ PolicyLock ( # ) } ) public class C extends test_lock_field.B { public  C () { # } final java.lang.Object goodField #; java.lang.Object badField #; final int nonObjectField #; final static java.lang.Object goodStatic #; static java.lang.Object badStatic #; }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:01    INFO] Couldn't find field unknownField in com.surelogic.tree.SyntaxTreeNode@6e8c51d8 -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } )   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLocks ( {   /* is UNBOUND: Field is undefined (Instance Region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: receiver (Instance Region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: known final field (Instance Region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: field is non-final (Instance Region) */  @ RegionLock ( # ) ,   /* is UNBOUND: Field is undefined (Static region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: class (Static region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: known final static field (static region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field (static region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: primitively typed field */  @ RegionLock ( # ) ,   /* is CONSISTENT: Static locks can use fields from other classes */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: Instance locks cannot use fields from other classes */  @ RegionLock ( # ) ,   /* is CONSISTENT: Can use field from GP */  @ RegionLock ( # ) ,   /* is CONSISTENT: Can use field from Parent */  @ RegionLock ( # ) ,   /* is UNBOUND: Field is unknown */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: Cannot use a field from a child */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from GP */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from parent */  @ RegionLock ( # ) ,   /* is UNBOUND: unknown field */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from child */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: class cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) } )   /* is UNASSOCIATED: non-final field from child */  @ PolicyLocks ( {   /* is UNBOUND: Field is undefined (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: receiver (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: known final field (Instance Region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: field is non-final (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: class (Static region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: known final static field (static region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field (static region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: primitively typed field */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Static locks can use fields from other classes */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: Instance locks cannot use fields from other classes */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Can use field from GP */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Can use field from Parent */  @ PolicyLock ( # ) ,   /* is UNBOUND: Field is unknown */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: Cannot use a field from a child */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from GP */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from parent */  @ PolicyLock ( # ) ,   /* is UNBOUND: unknown field */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from child */  @ PolicyLock ( # ) } ) public class C extends test_lock_field.B { public  C () { # } final java.lang.Object goodField #; java.lang.Object badField #; final int nonObjectField #; final static java.lang.Object goodStatic #; static java.lang.Object badStatic #; }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:01    INFO] Couldn't find field unknownField in com.surelogic.tree.SyntaxTreeNode@6e8c51d8 -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } )   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLocks ( {   /* is UNBOUND: Field is undefined (Instance Region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: receiver (Instance Region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: known final field (Instance Region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: field is non-final (Instance Region) */  @ RegionLock ( # ) ,   /* is UNBOUND: Field is undefined (Static region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: class (Static region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: known final static field (static region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field (static region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: primitively typed field */  @ RegionLock ( # ) ,   /* is CONSISTENT: Static locks can use fields from other classes */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: Instance locks cannot use fields from other classes */  @ RegionLock ( # ) ,   /* is CONSISTENT: Can use field from GP */  @ RegionLock ( # ) ,   /* is CONSISTENT: Can use field from Parent */  @ RegionLock ( # ) ,   /* is UNBOUND: Field is unknown */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: Cannot use a field from a child */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from GP */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from parent */  @ RegionLock ( # ) ,   /* is UNBOUND: unknown field */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from child */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: class cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) } )   /* is UNASSOCIATED: non-final field from child */  @ PolicyLocks ( {   /* is UNBOUND: Field is undefined (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: receiver (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: known final field (Instance Region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: field is non-final (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: class (Static region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: known final static field (static region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field (static region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: primitively typed field */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Static locks can use fields from other classes */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: Instance locks cannot use fields from other classes */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Can use field from GP */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Can use field from Parent */  @ PolicyLock ( # ) ,   /* is UNBOUND: Field is unknown */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: Cannot use a field from a child */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from GP */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from parent */  @ PolicyLock ( # ) ,   /* is UNBOUND: unknown field */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from child */  @ PolicyLock ( # ) } ) public class C extends test_lock_field.B { public  C () { # } final java.lang.Object goodField #; java.lang.Object badField #; final int nonObjectField #; final static java.lang.Object goodStatic #; static java.lang.Object badStatic #; }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:01    INFO] Couldn't find field fieldFromD in com.surelogic.tree.SyntaxTreeNode@6e8c51d8 -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } )   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLocks ( {   /* is UNBOUND: Field is undefined (Instance Region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: receiver (Instance Region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: known final field (Instance Region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: field is non-final (Instance Region) */  @ RegionLock ( # ) ,   /* is UNBOUND: Field is undefined (Static region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: class (Static region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: known final static field (static region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field (static region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: primitively typed field */  @ RegionLock ( # ) ,   /* is CONSISTENT: Static locks can use fields from other classes */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: Instance locks cannot use fields from other classes */  @ RegionLock ( # ) ,   /* is CONSISTENT: Can use field from GP */  @ RegionLock ( # ) ,   /* is CONSISTENT: Can use field from Parent */  @ RegionLock ( # ) ,   /* is UNBOUND: Field is unknown */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: Cannot use a field from a child */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from GP */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from parent */  @ RegionLock ( # ) ,   /* is UNBOUND: unknown field */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from child */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: class cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) } )   /* is UNASSOCIATED: non-final field from child */  @ PolicyLocks ( {   /* is UNBOUND: Field is undefined (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: receiver (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: known final field (Instance Region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: field is non-final (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: class (Static region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: known final static field (static region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field (static region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: primitively typed field */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Static locks can use fields from other classes */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: Instance locks cannot use fields from other classes */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Can use field from GP */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Can use field from Parent */  @ PolicyLock ( # ) ,   /* is UNBOUND: Field is unknown */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: Cannot use a field from a child */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from GP */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from parent */  @ PolicyLock ( # ) ,   /* is UNBOUND: unknown field */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from child */  @ PolicyLock ( # ) } ) public class C extends test_lock_field.B { public  C () { # } final java.lang.Object goodField #; java.lang.Object badField #; final int nonObjectField #; final static java.lang.Object goodStatic #; static java.lang.Object badStatic #; }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:01    INFO] Couldn't find field fieldFromD in com.surelogic.tree.SyntaxTreeNode@6e8c51d8 -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } )   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLocks ( {   /* is UNBOUND: Field is undefined (Instance Region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: receiver (Instance Region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: known final field (Instance Region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: field is non-final (Instance Region) */  @ RegionLock ( # ) ,   /* is UNBOUND: Field is undefined (Static region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: class (Static region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: known final static field (static region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field (static region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: primitively typed field */  @ RegionLock ( # ) ,   /* is CONSISTENT: Static locks can use fields from other classes */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: Instance locks cannot use fields from other classes */  @ RegionLock ( # ) ,   /* is CONSISTENT: Can use field from GP */  @ RegionLock ( # ) ,   /* is CONSISTENT: Can use field from Parent */  @ RegionLock ( # ) ,   /* is UNBOUND: Field is unknown */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: Cannot use a field from a child */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from GP */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from parent */  @ RegionLock ( # ) ,   /* is UNBOUND: unknown field */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from child */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: class cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) } )   /* is UNASSOCIATED: non-final field from child */  @ PolicyLocks ( {   /* is UNBOUND: Field is undefined (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: receiver (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: known final field (Instance Region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: field is non-final (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: class (Static region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: known final static field (static region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field (static region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: primitively typed field */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Static locks can use fields from other classes */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: Instance locks cannot use fields from other classes */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Can use field from GP */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Can use field from Parent */  @ PolicyLock ( # ) ,   /* is UNBOUND: Field is unknown */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: Cannot use a field from a child */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from GP */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from parent */  @ PolicyLock ( # ) ,   /* is UNBOUND: unknown field */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from child */  @ PolicyLock ( # ) } ) public class C extends test_lock_field.B { public  C () { # } final java.lang.Object goodField #; java.lang.Object badField #; final int nonObjectField #; final static java.lang.Object goodStatic #; static java.lang.Object badStatic #; }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:01    INFO] Couldn't find field badFieldFromD in com.surelogic.tree.SyntaxTreeNode@6e8c51d8 -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } )   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLocks ( {   /* is UNBOUND: Field is undefined (Instance Region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: receiver (Instance Region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: known final field (Instance Region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: field is non-final (Instance Region) */  @ RegionLock ( # ) ,   /* is UNBOUND: Field is undefined (Static region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: class (Static region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: known final static field (static region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field (static region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: primitively typed field */  @ RegionLock ( # ) ,   /* is CONSISTENT: Static locks can use fields from other classes */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: Instance locks cannot use fields from other classes */  @ RegionLock ( # ) ,   /* is CONSISTENT: Can use field from GP */  @ RegionLock ( # ) ,   /* is CONSISTENT: Can use field from Parent */  @ RegionLock ( # ) ,   /* is UNBOUND: Field is unknown */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: Cannot use a field from a child */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from GP */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from parent */  @ RegionLock ( # ) ,   /* is UNBOUND: unknown field */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from child */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: class cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) } )   /* is UNASSOCIATED: non-final field from child */  @ PolicyLocks ( {   /* is UNBOUND: Field is undefined (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: receiver (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: known final field (Instance Region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: field is non-final (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: class (Static region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: known final static field (static region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field (static region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: primitively typed field */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Static locks can use fields from other classes */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: Instance locks cannot use fields from other classes */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Can use field from GP */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Can use field from Parent */  @ PolicyLock ( # ) ,   /* is UNBOUND: Field is unknown */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: Cannot use a field from a child */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from GP */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from parent */  @ PolicyLock ( # ) ,   /* is UNBOUND: unknown field */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from child */  @ PolicyLock ( # ) } ) public class C extends test_lock_field.B { public  C () { # } final java.lang.Object goodField #; java.lang.Object badField #; final int nonObjectField #; final static java.lang.Object goodStatic #; static java.lang.Object badStatic #; }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:01    INFO] Couldn't find field badFieldFromD in com.surelogic.tree.SyntaxTreeNode@6e8c51d8 -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } )   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLocks ( {   /* is UNBOUND: Field is undefined (Instance Region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: receiver (Instance Region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: known final field (Instance Region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: field is non-final (Instance Region) */  @ RegionLock ( # ) ,   /* is UNBOUND: Field is undefined (Static region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: class (Static region) */  @ RegionLock ( # ) ,   /* is CONSISTENT: known final static field (static region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field (static region) */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: primitively typed field */  @ RegionLock ( # ) ,   /* is CONSISTENT: Static locks can use fields from other classes */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: Instance locks cannot use fields from other classes */  @ RegionLock ( # ) ,   /* is CONSISTENT: Can use field from GP */  @ RegionLock ( # ) ,   /* is CONSISTENT: Can use field from Parent */  @ RegionLock ( # ) ,   /* is UNBOUND: Field is unknown */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: Cannot use a field from a child */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from GP */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from parent */  @ RegionLock ( # ) ,   /* is UNBOUND: unknown field */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: non-final field from child */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: class cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) ,   /* is UNASSOCIATED: static field cannot protect an instance region */  @ RegionLock ( # ) } )   /* is UNASSOCIATED: non-final field from child */  @ PolicyLocks ( {   /* is UNBOUND: Field is undefined (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: receiver (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: known final field (Instance Region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: field is non-final (Instance Region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: class (Static region) */  @ PolicyLock ( # ) ,   /* is CONSISTENT: known final static field (static region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field (static region) */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: primitively typed field */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Static locks can use fields from other classes */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: Instance locks cannot use fields from other classes */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Can use field from GP */  @ PolicyLock ( # ) ,   /* is CONSISTENT: Can use field from Parent */  @ PolicyLock ( # ) ,   /* is UNBOUND: Field is unknown */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: Cannot use a field from a child */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from GP */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from parent */  @ PolicyLock ( # ) ,   /* is UNBOUND: unknown field */  @ PolicyLock ( # ) ,   /* is UNASSOCIATED: non-final field from child */  @ PolicyLock ( # ) } ) public class C extends test_lock_field.B { public  C () { # } final java.lang.Object goodField #; java.lang.Object badField #; final int nonObjectField #; final static java.lang.Object goodStatic #; static java.lang.Object badStatic #; }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [GC (Allocation Failure)  140763K->66456K(179200K), 0.0143060 secs]
REMOTE: [2016-01-27 14:23:02    INFO] Couldn't find lock DoesntExist in com.surelogic.tree.SyntaxTreeNode@32a8155d -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } ) @ RegionLocks ( { @ RegionLock ( # ) , @ RegionLock ( # ) , @ RegionLock ( # ) } ) public class StateLock extends java.lang.Object { public  StateLock () { # }   /*is UNASSOCIATED: Cannot qualify a static lock with this*/  @ ReturnsLock ( # ) public java.lang.Object getLock_thisQualified_staticLock() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_implicit_staticLock() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_typeQualified_staticLock() { # }   /*is UNASSOCIATED: Cannot type-qualify an instance lock*/  @ ReturnsLock ( # ) public java.lang.Object getLock_typeQualifiedInstance() { # }   /*is UNBOUND*/  @ ReturnsLock ( # ) public java.lang.Object getLock_doesntExist() { # }   /*is CONSISTENT*/  @ ReturnsLock ( # ) public java.lang.Object getLock_exists() { # }   /*is CONSISTENT*/  @ ReturnsLock ( # ) public java.lang.Object getLock_exists2() { # }   /* is UNBOUND: parameter p doesn't exist */  @ ReturnsLock ( # ) public java.lang.Object getLock_bad_param(# final # o) { # }   /*is UNBOUND*/  @ ReturnsLock ( # ) public java.lang.Object getLock_param_doesntExist(# final # p) { # }   /*is CONSISTENT: parameter is non-final, but unchanged*/  @ ReturnsLock ( # ) public java.lang.Object getLock_param_nonfinal(# # p) { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_good(# final # p) { # }   /*is UNASSOCIATED: Cannot refer to 'this' on static method*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1() { # }   /*is UNASSOCIATED: Cannot refer to 'this' (implicitly) on static method*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1a() { # }   /*is CONSISTENT*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1() { # }   /*is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1a() { # }   /*is UNBOUND: Lock does not exist*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegionWithThis() { # }   /*is UNBOUND: Lock doesn't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegion() { # }   /* is UNBOUND: Class doesn't exist (Default package)*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1() { # }   /* is UNBOUND: Package & Class don't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1a() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_paramLock(# final # p) { # } }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:02    INFO] Couldn't find lock DoesntExist in com.surelogic.tree.SyntaxTreeNode@32a8155d -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } ) @ RegionLocks ( { @ RegionLock ( # ) , @ RegionLock ( # ) , @ RegionLock ( # ) } ) public class StateLock extends java.lang.Object { public  StateLock () { # }   /*is UNASSOCIATED: Cannot qualify a static lock with this*/  @ ReturnsLock ( # ) public java.lang.Object getLock_thisQualified_staticLock() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_implicit_staticLock() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_typeQualified_staticLock() { # }   /*is UNASSOCIATED: Cannot type-qualify an instance lock*/  @ ReturnsLock ( # ) public java.lang.Object getLock_typeQualifiedInstance() { # }   /*is UNBOUND*/  @ ReturnsLock ( # ) public java.lang.Object getLock_doesntExist() { # }   /*is CONSISTENT*/  @ ReturnsLock ( # ) public java.lang.Object getLock_exists() { # }   /*is CONSISTENT*/  @ ReturnsLock ( # ) public java.lang.Object getLock_exists2() { # }   /* is UNBOUND: parameter p doesn't exist */  @ ReturnsLock ( # ) public java.lang.Object getLock_bad_param(# final # o) { # }   /*is UNBOUND*/  @ ReturnsLock ( # ) public java.lang.Object getLock_param_doesntExist(# final # p) { # }   /*is CONSISTENT: parameter is non-final, but unchanged*/  @ ReturnsLock ( # ) public java.lang.Object getLock_param_nonfinal(# # p) { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_good(# final # p) { # }   /*is UNASSOCIATED: Cannot refer to 'this' on static method*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1() { # }   /*is UNASSOCIATED: Cannot refer to 'this' (implicitly) on static method*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1a() { # }   /*is CONSISTENT*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1() { # }   /*is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1a() { # }   /*is UNBOUND: Lock does not exist*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegionWithThis() { # }   /*is UNBOUND: Lock doesn't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegion() { # }   /* is UNBOUND: Class doesn't exist (Default package)*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1() { # }   /* is UNBOUND: Package & Class don't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1a() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_paramLock(# final # p) { # } }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:02    INFO] Couldn't find field p in com.surelogic.tree.SyntaxTreeNode@32a8155d -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } ) @ RegionLocks ( { @ RegionLock ( # ) , @ RegionLock ( # ) , @ RegionLock ( # ) } ) public class StateLock extends java.lang.Object { public  StateLock () { # }   /*is UNASSOCIATED: Cannot qualify a static lock with this*/  @ ReturnsLock ( # ) public java.lang.Object getLock_thisQualified_staticLock() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_implicit_staticLock() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_typeQualified_staticLock() { # }   /*is UNASSOCIATED: Cannot type-qualify an instance lock*/  @ ReturnsLock ( # ) public java.lang.Object getLock_typeQualifiedInstance() { # }   /*is UNBOUND*/  @ ReturnsLock ( # ) public java.lang.Object getLock_doesntExist() { # }   /*is CONSISTENT*/  @ ReturnsLock ( # ) public java.lang.Object getLock_exists() { # }   /*is CONSISTENT*/  @ ReturnsLock ( # ) public java.lang.Object getLock_exists2() { # }   /* is UNBOUND: parameter p doesn't exist */  @ ReturnsLock ( # ) public java.lang.Object getLock_bad_param(# final # o) { # }   /*is UNBOUND*/  @ ReturnsLock ( # ) public java.lang.Object getLock_param_doesntExist(# final # p) { # }   /*is CONSISTENT: parameter is non-final, but unchanged*/  @ ReturnsLock ( # ) public java.lang.Object getLock_param_nonfinal(# # p) { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_good(# final # p) { # }   /*is UNASSOCIATED: Cannot refer to 'this' on static method*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1() { # }   /*is UNASSOCIATED: Cannot refer to 'this' (implicitly) on static method*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1a() { # }   /*is CONSISTENT*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1() { # }   /*is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1a() { # }   /*is UNBOUND: Lock does not exist*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegionWithThis() { # }   /*is UNBOUND: Lock doesn't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegion() { # }   /* is UNBOUND: Class doesn't exist (Default package)*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1() { # }   /* is UNBOUND: Package & Class don't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1a() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_paramLock(# final # p) { # } }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:02    INFO] Couldn't find field p in com.surelogic.tree.SyntaxTreeNode@32a8155d -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } ) @ RegionLocks ( { @ RegionLock ( # ) , @ RegionLock ( # ) , @ RegionLock ( # ) } ) public class StateLock extends java.lang.Object { public  StateLock () { # }   /*is UNASSOCIATED: Cannot qualify a static lock with this*/  @ ReturnsLock ( # ) public java.lang.Object getLock_thisQualified_staticLock() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_implicit_staticLock() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_typeQualified_staticLock() { # }   /*is UNASSOCIATED: Cannot type-qualify an instance lock*/  @ ReturnsLock ( # ) public java.lang.Object getLock_typeQualifiedInstance() { # }   /*is UNBOUND*/  @ ReturnsLock ( # ) public java.lang.Object getLock_doesntExist() { # }   /*is CONSISTENT*/  @ ReturnsLock ( # ) public java.lang.Object getLock_exists() { # }   /*is CONSISTENT*/  @ ReturnsLock ( # ) public java.lang.Object getLock_exists2() { # }   /* is UNBOUND: parameter p doesn't exist */  @ ReturnsLock ( # ) public java.lang.Object getLock_bad_param(# final # o) { # }   /*is UNBOUND*/  @ ReturnsLock ( # ) public java.lang.Object getLock_param_doesntExist(# final # p) { # }   /*is CONSISTENT: parameter is non-final, but unchanged*/  @ ReturnsLock ( # ) public java.lang.Object getLock_param_nonfinal(# # p) { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_good(# final # p) { # }   /*is UNASSOCIATED: Cannot refer to 'this' on static method*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1() { # }   /*is UNASSOCIATED: Cannot refer to 'this' (implicitly) on static method*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1a() { # }   /*is CONSISTENT*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1() { # }   /*is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1a() { # }   /*is UNBOUND: Lock does not exist*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegionWithThis() { # }   /*is UNBOUND: Lock doesn't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegion() { # }   /* is UNBOUND: Class doesn't exist (Default package)*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1() { # }   /* is UNBOUND: Package & Class don't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1a() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_paramLock(# final # p) { # } }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:02    INFO] Couldn't find lock DoesntExist in com.surelogic.tree.SyntaxTreeNode@32a8155d -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } ) @ RegionLocks ( { @ RegionLock ( # ) , @ RegionLock ( # ) , @ RegionLock ( # ) } ) public class StateLock extends java.lang.Object { public  StateLock () { # }   /*is UNASSOCIATED: Cannot qualify a static lock with this*/  @ ReturnsLock ( # ) public java.lang.Object getLock_thisQualified_staticLock() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_implicit_staticLock() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_typeQualified_staticLock() { # }   /*is UNASSOCIATED: Cannot type-qualify an instance lock*/  @ ReturnsLock ( # ) public java.lang.Object getLock_typeQualifiedInstance() { # }   /*is UNBOUND*/  @ ReturnsLock ( # ) public java.lang.Object getLock_doesntExist() { # }   /*is CONSISTENT*/  @ ReturnsLock ( # ) public java.lang.Object getLock_exists() { # }   /*is CONSISTENT*/  @ ReturnsLock ( # ) public java.lang.Object getLock_exists2() { # }   /* is UNBOUND: parameter p doesn't exist */  @ ReturnsLock ( # ) public java.lang.Object getLock_bad_param(# final # o) { # }   /*is UNBOUND*/  @ ReturnsLock ( # ) public java.lang.Object getLock_param_doesntExist(# final # p) { # }   /*is CONSISTENT: parameter is non-final, but unchanged*/  @ ReturnsLock ( # ) public java.lang.Object getLock_param_nonfinal(# # p) { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_good(# final # p) { # }   /*is UNASSOCIATED: Cannot refer to 'this' on static method*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1() { # }   /*is UNASSOCIATED: Cannot refer to 'this' (implicitly) on static method*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1a() { # }   /*is CONSISTENT*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1() { # }   /*is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1a() { # }   /*is UNBOUND: Lock does not exist*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegionWithThis() { # }   /*is UNBOUND: Lock doesn't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegion() { # }   /* is UNBOUND: Class doesn't exist (Default package)*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1() { # }   /* is UNBOUND: Package & Class don't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1a() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_paramLock(# final # p) { # } }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:02    INFO] Couldn't find lock DoesntExist in com.surelogic.tree.SyntaxTreeNode@32a8155d -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } ) @ RegionLocks ( { @ RegionLock ( # ) , @ RegionLock ( # ) , @ RegionLock ( # ) } ) public class StateLock extends java.lang.Object { public  StateLock () { # }   /*is UNASSOCIATED: Cannot qualify a static lock with this*/  @ ReturnsLock ( # ) public java.lang.Object getLock_thisQualified_staticLock() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_implicit_staticLock() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_typeQualified_staticLock() { # }   /*is UNASSOCIATED: Cannot type-qualify an instance lock*/  @ ReturnsLock ( # ) public java.lang.Object getLock_typeQualifiedInstance() { # }   /*is UNBOUND*/  @ ReturnsLock ( # ) public java.lang.Object getLock_doesntExist() { # }   /*is CONSISTENT*/  @ ReturnsLock ( # ) public java.lang.Object getLock_exists() { # }   /*is CONSISTENT*/  @ ReturnsLock ( # ) public java.lang.Object getLock_exists2() { # }   /* is UNBOUND: parameter p doesn't exist */  @ ReturnsLock ( # ) public java.lang.Object getLock_bad_param(# final # o) { # }   /*is UNBOUND*/  @ ReturnsLock ( # ) public java.lang.Object getLock_param_doesntExist(# final # p) { # }   /*is CONSISTENT: parameter is non-final, but unchanged*/  @ ReturnsLock ( # ) public java.lang.Object getLock_param_nonfinal(# # p) { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_good(# final # p) { # }   /*is UNASSOCIATED: Cannot refer to 'this' on static method*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1() { # }   /*is UNASSOCIATED: Cannot refer to 'this' (implicitly) on static method*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1a() { # }   /*is CONSISTENT*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1() { # }   /*is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1a() { # }   /*is UNBOUND: Lock does not exist*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegionWithThis() { # }   /*is UNBOUND: Lock doesn't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegion() { # }   /* is UNBOUND: Class doesn't exist (Default package)*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1() { # }   /* is UNBOUND: Package & Class don't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1a() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_paramLock(# final # p) { # } }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:02    INFO] Couldn't find lock DoesntExist in com.surelogic.tree.SyntaxTreeNode@32a8155d -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } ) @ RegionLocks ( { @ RegionLock ( # ) , @ RegionLock ( # ) , @ RegionLock ( # ) } ) public class StateLock extends java.lang.Object { public  StateLock () { # }   /*is UNASSOCIATED: Cannot qualify a static lock with this*/  @ ReturnsLock ( # ) public java.lang.Object getLock_thisQualified_staticLock() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_implicit_staticLock() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_typeQualified_staticLock() { # }   /*is UNASSOCIATED: Cannot type-qualify an instance lock*/  @ ReturnsLock ( # ) public java.lang.Object getLock_typeQualifiedInstance() { # }   /*is UNBOUND*/  @ ReturnsLock ( # ) public java.lang.Object getLock_doesntExist() { # }   /*is CONSISTENT*/  @ ReturnsLock ( # ) public java.lang.Object getLock_exists() { # }   /*is CONSISTENT*/  @ ReturnsLock ( # ) public java.lang.Object getLock_exists2() { # }   /* is UNBOUND: parameter p doesn't exist */  @ ReturnsLock ( # ) public java.lang.Object getLock_bad_param(# final # o) { # }   /*is UNBOUND*/  @ ReturnsLock ( # ) public java.lang.Object getLock_param_doesntExist(# final # p) { # }   /*is CONSISTENT: parameter is non-final, but unchanged*/  @ ReturnsLock ( # ) public java.lang.Object getLock_param_nonfinal(# # p) { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_good(# final # p) { # }   /*is UNASSOCIATED: Cannot refer to 'this' on static method*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1() { # }   /*is UNASSOCIATED: Cannot refer to 'this' (implicitly) on static method*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1a() { # }   /*is CONSISTENT*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1() { # }   /*is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1a() { # }   /*is UNBOUND: Lock does not exist*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegionWithThis() { # }   /*is UNBOUND: Lock doesn't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegion() { # }   /* is UNBOUND: Class doesn't exist (Default package)*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1() { # }   /* is UNBOUND: Package & Class don't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1a() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_paramLock(# final # p) { # } }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:02    INFO] Couldn't find lock DoesntExist in com.surelogic.tree.SyntaxTreeNode@32a8155d -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } ) @ RegionLocks ( { @ RegionLock ( # ) , @ RegionLock ( # ) , @ RegionLock ( # ) } ) public class StateLock extends java.lang.Object { public  StateLock () { # }   /*is UNASSOCIATED: Cannot qualify a static lock with this*/  @ ReturnsLock ( # ) public java.lang.Object getLock_thisQualified_staticLock() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_implicit_staticLock() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_typeQualified_staticLock() { # }   /*is UNASSOCIATED: Cannot type-qualify an instance lock*/  @ ReturnsLock ( # ) public java.lang.Object getLock_typeQualifiedInstance() { # }   /*is UNBOUND*/  @ ReturnsLock ( # ) public java.lang.Object getLock_doesntExist() { # }   /*is CONSISTENT*/  @ ReturnsLock ( # ) public java.lang.Object getLock_exists() { # }   /*is CONSISTENT*/  @ ReturnsLock ( # ) public java.lang.Object getLock_exists2() { # }   /* is UNBOUND: parameter p doesn't exist */  @ ReturnsLock ( # ) public java.lang.Object getLock_bad_param(# final # o) { # }   /*is UNBOUND*/  @ ReturnsLock ( # ) public java.lang.Object getLock_param_doesntExist(# final # p) { # }   /*is CONSISTENT: parameter is non-final, but unchanged*/  @ ReturnsLock ( # ) public java.lang.Object getLock_param_nonfinal(# # p) { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_good(# final # p) { # }   /*is UNASSOCIATED: Cannot refer to 'this' on static method*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1() { # }   /*is UNASSOCIATED: Cannot refer to 'this' (implicitly) on static method*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1a() { # }   /*is CONSISTENT*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1() { # }   /*is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1a() { # }   /*is UNBOUND: Lock does not exist*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegionWithThis() { # }   /*is UNBOUND: Lock doesn't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegion() { # }   /* is UNBOUND: Class doesn't exist (Default package)*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1() { # }   /* is UNBOUND: Package & Class don't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1a() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_paramLock(# final # p) { # } }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:02    INFO] Couldn't find lock DoesntExist in com.surelogic.tree.SyntaxTreeNode@32a8155d -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } ) @ RegionLocks ( { @ RegionLock ( # ) , @ RegionLock ( # ) , @ RegionLock ( # ) } ) public class StateLock extends java.lang.Object { public  StateLock () { # }   /*is UNASSOCIATED: Cannot qualify a static lock with this*/  @ ReturnsLock ( # ) public java.lang.Object getLock_thisQualified_staticLock() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_implicit_staticLock() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_typeQualified_staticLock() { # }   /*is UNASSOCIATED: Cannot type-qualify an instance lock*/  @ ReturnsLock ( # ) public java.lang.Object getLock_typeQualifiedInstance() { # }   /*is UNBOUND*/  @ ReturnsLock ( # ) public java.lang.Object getLock_doesntExist() { # }   /*is CONSISTENT*/  @ ReturnsLock ( # ) public java.lang.Object getLock_exists() { # }   /*is CONSISTENT*/  @ ReturnsLock ( # ) public java.lang.Object getLock_exists2() { # }   /* is UNBOUND: parameter p doesn't exist */  @ ReturnsLock ( # ) public java.lang.Object getLock_bad_param(# final # o) { # }   /*is UNBOUND*/  @ ReturnsLock ( # ) public java.lang.Object getLock_param_doesntExist(# final # p) { # }   /*is CONSISTENT: parameter is non-final, but unchanged*/  @ ReturnsLock ( # ) public java.lang.Object getLock_param_nonfinal(# # p) { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_good(# final # p) { # }   /*is UNASSOCIATED: Cannot refer to 'this' on static method*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1() { # }   /*is UNASSOCIATED: Cannot refer to 'this' (implicitly) on static method*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1a() { # }   /*is CONSISTENT*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1() { # }   /*is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1a() { # }   /*is UNBOUND: Lock does not exist*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegionWithThis() { # }   /*is UNBOUND: Lock doesn't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegion() { # }   /* is UNBOUND: Class doesn't exist (Default package)*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1() { # }   /* is UNBOUND: Package & Class don't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1a() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_paramLock(# final # p) { # } }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:02    INFO] Couldn't find lock DoesntExist in com.surelogic.tree.SyntaxTreeNode@32a8155d -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } ) @ RegionLocks ( { @ RegionLock ( # ) , @ RegionLock ( # ) , @ RegionLock ( # ) } ) public class StateLock extends java.lang.Object { public  StateLock () { # }   /*is UNASSOCIATED: Cannot qualify a static lock with this*/  @ ReturnsLock ( # ) public java.lang.Object getLock_thisQualified_staticLock() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_implicit_staticLock() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_typeQualified_staticLock() { # }   /*is UNASSOCIATED: Cannot type-qualify an instance lock*/  @ ReturnsLock ( # ) public java.lang.Object getLock_typeQualifiedInstance() { # }   /*is UNBOUND*/  @ ReturnsLock ( # ) public java.lang.Object getLock_doesntExist() { # }   /*is CONSISTENT*/  @ ReturnsLock ( # ) public java.lang.Object getLock_exists() { # }   /*is CONSISTENT*/  @ ReturnsLock ( # ) public java.lang.Object getLock_exists2() { # }   /* is UNBOUND: parameter p doesn't exist */  @ ReturnsLock ( # ) public java.lang.Object getLock_bad_param(# final # o) { # }   /*is UNBOUND*/  @ ReturnsLock ( # ) public java.lang.Object getLock_param_doesntExist(# final # p) { # }   /*is CONSISTENT: parameter is non-final, but unchanged*/  @ ReturnsLock ( # ) public java.lang.Object getLock_param_nonfinal(# # p) { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_good(# final # p) { # }   /*is UNASSOCIATED: Cannot refer to 'this' on static method*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1() { # }   /*is UNASSOCIATED: Cannot refer to 'this' (implicitly) on static method*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1a() { # }   /*is CONSISTENT*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1() { # }   /*is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1a() { # }   /*is UNBOUND: Lock does not exist*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegionWithThis() { # }   /*is UNBOUND: Lock doesn't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegion() { # }   /* is UNBOUND: Class doesn't exist (Default package)*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1() { # }   /* is UNBOUND: Package & Class don't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1a() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_paramLock(# final # p) { # } }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:02    INFO] Couldn't find field NoSuchClass in com.surelogic.tree.SyntaxTreeNode@32a8155d -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } ) @ RegionLocks ( { @ RegionLock ( # ) , @ RegionLock ( # ) , @ RegionLock ( # ) } ) public class StateLock extends java.lang.Object { public  StateLock () { # }   /*is UNASSOCIATED: Cannot qualify a static lock with this*/  @ ReturnsLock ( # ) public java.lang.Object getLock_thisQualified_staticLock() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_implicit_staticLock() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_typeQualified_staticLock() { # }   /*is UNASSOCIATED: Cannot type-qualify an instance lock*/  @ ReturnsLock ( # ) public java.lang.Object getLock_typeQualifiedInstance() { # }   /*is UNBOUND*/  @ ReturnsLock ( # ) public java.lang.Object getLock_doesntExist() { # }   /*is CONSISTENT*/  @ ReturnsLock ( # ) public java.lang.Object getLock_exists() { # }   /*is CONSISTENT*/  @ ReturnsLock ( # ) public java.lang.Object getLock_exists2() { # }   /* is UNBOUND: parameter p doesn't exist */  @ ReturnsLock ( # ) public java.lang.Object getLock_bad_param(# final # o) { # }   /*is UNBOUND*/  @ ReturnsLock ( # ) public java.lang.Object getLock_param_doesntExist(# final # p) { # }   /*is CONSISTENT: parameter is non-final, but unchanged*/  @ ReturnsLock ( # ) public java.lang.Object getLock_param_nonfinal(# # p) { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_good(# final # p) { # }   /*is UNASSOCIATED: Cannot refer to 'this' on static method*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1() { # }   /*is UNASSOCIATED: Cannot refer to 'this' (implicitly) on static method*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1a() { # }   /*is CONSISTENT*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1() { # }   /*is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1a() { # }   /*is UNBOUND: Lock does not exist*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegionWithThis() { # }   /*is UNBOUND: Lock doesn't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegion() { # }   /* is UNBOUND: Class doesn't exist (Default package)*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1() { # }   /* is UNBOUND: Package & Class don't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1a() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_paramLock(# final # p) { # } }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:02    INFO] Couldn't find field NoSuchClass in com.surelogic.tree.SyntaxTreeNode@32a8155d -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } ) @ RegionLocks ( { @ RegionLock ( # ) , @ RegionLock ( # ) , @ RegionLock ( # ) } ) public class StateLock extends java.lang.Object { public  StateLock () { # }   /*is UNASSOCIATED: Cannot qualify a static lock with this*/  @ ReturnsLock ( # ) public java.lang.Object getLock_thisQualified_staticLock() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_implicit_staticLock() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_typeQualified_staticLock() { # }   /*is UNASSOCIATED: Cannot type-qualify an instance lock*/  @ ReturnsLock ( # ) public java.lang.Object getLock_typeQualifiedInstance() { # }   /*is UNBOUND*/  @ ReturnsLock ( # ) public java.lang.Object getLock_doesntExist() { # }   /*is CONSISTENT*/  @ ReturnsLock ( # ) public java.lang.Object getLock_exists() { # }   /*is CONSISTENT*/  @ ReturnsLock ( # ) public java.lang.Object getLock_exists2() { # }   /* is UNBOUND: parameter p doesn't exist */  @ ReturnsLock ( # ) public java.lang.Object getLock_bad_param(# final # o) { # }   /*is UNBOUND*/  @ ReturnsLock ( # ) public java.lang.Object getLock_param_doesntExist(# final # p) { # }   /*is CONSISTENT: parameter is non-final, but unchanged*/  @ ReturnsLock ( # ) public java.lang.Object getLock_param_nonfinal(# # p) { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_good(# final # p) { # }   /*is UNASSOCIATED: Cannot refer to 'this' on static method*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1() { # }   /*is UNASSOCIATED: Cannot refer to 'this' (implicitly) on static method*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1a() { # }   /*is CONSISTENT*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1() { # }   /*is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1a() { # }   /*is UNBOUND: Lock does not exist*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegionWithThis() { # }   /*is UNBOUND: Lock doesn't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegion() { # }   /* is UNBOUND: Class doesn't exist (Default package)*/  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1() { # }   /* is UNBOUND: Package & Class don't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1a() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_paramLock(# final # p) { # } }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:02    INFO] Couldn't find lock DoesntExist in com.surelogic.tree.SyntaxTreeNode@261891c4 -- @ PolicyLocks ( { @ PolicyLock ( # ) , @ PolicyLock ( # ) , @ PolicyLock ( # ) } ) public class PLock extends java.lang.Object { public  PLock () { # }   /* is UNASSOCIATED: Cannot qualify a static lock with this */  @ ReturnsLock ( # ) public java.lang.Object getLock_thisQualified_staticLock() { # }   /* is CONSISTENT*/  @ ReturnsLock ( # ) public java.lang.Object getLock_implicit_staticLock() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_typeQualified_staticLock() { # }   /* is UNBOUND */  @ ReturnsLock ( # ) public java.lang.Object getLock_doesntExist() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_exists() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_exists2() { # }   /* is UNBOUND: parameter p doesn't exist */  @ ReturnsLock ( # ) public java.lang.Object getLock_bad_param(# final # o) { # }   /* is UNBOUND */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_doesntExist(# final # p) { # }   /* is CONSISTENT: parameter is non-final, but unchanged */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_nonfinal(# # p) { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_good(# final # p) { # }   /* is UNASSOCIATED: Cannot refer to 'this' on static method */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1() { # }   /* is UNASSOCIATED: Cannot refer to 'this' (implicitly) on static method */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1a() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1a() { # }   /* is UNBOUND: Lock does not exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegionWithThis() { # }   /* is UNBOUND: Lock doesn't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegion() { # }   /* is UNBOUND: Class doesn't exist (Default package) */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1() { # }   /* is UNBOUND: Package & Class don't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1a() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_paramLock(# final # p) { # } @ SuppressWarnings ( # ) private class Inner extends java.lang.Object { # public  # Inner # # # # public # # getLock_innerClassMethod_qualifiedThis_staticLock# # # # public # # getLock_innerClassMethod_qualifiedThis_nonStaticLock# # # } }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:02    INFO] Couldn't find lock DoesntExist in com.surelogic.tree.SyntaxTreeNode@261891c4 -- @ PolicyLocks ( { @ PolicyLock ( # ) , @ PolicyLock ( # ) , @ PolicyLock ( # ) } ) public class PLock extends java.lang.Object { public  PLock () { # }   /* is UNASSOCIATED: Cannot qualify a static lock with this */  @ ReturnsLock ( # ) public java.lang.Object getLock_thisQualified_staticLock() { # }   /* is CONSISTENT*/  @ ReturnsLock ( # ) public java.lang.Object getLock_implicit_staticLock() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_typeQualified_staticLock() { # }   /* is UNBOUND */  @ ReturnsLock ( # ) public java.lang.Object getLock_doesntExist() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_exists() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_exists2() { # }   /* is UNBOUND: parameter p doesn't exist */  @ ReturnsLock ( # ) public java.lang.Object getLock_bad_param(# final # o) { # }   /* is UNBOUND */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_doesntExist(# final # p) { # }   /* is CONSISTENT: parameter is non-final, but unchanged */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_nonfinal(# # p) { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_good(# final # p) { # }   /* is UNASSOCIATED: Cannot refer to 'this' on static method */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1() { # }   /* is UNASSOCIATED: Cannot refer to 'this' (implicitly) on static method */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1a() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1a() { # }   /* is UNBOUND: Lock does not exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegionWithThis() { # }   /* is UNBOUND: Lock doesn't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegion() { # }   /* is UNBOUND: Class doesn't exist (Default package) */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1() { # }   /* is UNBOUND: Package & Class don't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1a() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_paramLock(# final # p) { # } @ SuppressWarnings ( # ) private class Inner extends java.lang.Object { # public  # Inner # # # # public # # getLock_innerClassMethod_qualifiedThis_staticLock# # # # public # # getLock_innerClassMethod_qualifiedThis_nonStaticLock# # # } }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:02    INFO] Couldn't find field p in com.surelogic.tree.SyntaxTreeNode@261891c4 -- @ PolicyLocks ( { @ PolicyLock ( # ) , @ PolicyLock ( # ) , @ PolicyLock ( # ) } ) public class PLock extends java.lang.Object { public  PLock () { # }   /* is UNASSOCIATED: Cannot qualify a static lock with this */  @ ReturnsLock ( # ) public java.lang.Object getLock_thisQualified_staticLock() { # }   /* is CONSISTENT*/  @ ReturnsLock ( # ) public java.lang.Object getLock_implicit_staticLock() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_typeQualified_staticLock() { # }   /* is UNBOUND */  @ ReturnsLock ( # ) public java.lang.Object getLock_doesntExist() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_exists() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_exists2() { # }   /* is UNBOUND: parameter p doesn't exist */  @ ReturnsLock ( # ) public java.lang.Object getLock_bad_param(# final # o) { # }   /* is UNBOUND */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_doesntExist(# final # p) { # }   /* is CONSISTENT: parameter is non-final, but unchanged */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_nonfinal(# # p) { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_good(# final # p) { # }   /* is UNASSOCIATED: Cannot refer to 'this' on static method */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1() { # }   /* is UNASSOCIATED: Cannot refer to 'this' (implicitly) on static method */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1a() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1a() { # }   /* is UNBOUND: Lock does not exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegionWithThis() { # }   /* is UNBOUND: Lock doesn't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegion() { # }   /* is UNBOUND: Class doesn't exist (Default package) */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1() { # }   /* is UNBOUND: Package & Class don't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1a() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_paramLock(# final # p) { # } @ SuppressWarnings ( # ) private class Inner extends java.lang.Object { # public  # Inner # # # # public # # getLock_innerClassMethod_qualifiedThis_staticLock# # # # public # # getLock_innerClassMethod_qualifiedThis_nonStaticLock# # # } }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:02    INFO] Couldn't find field p in com.surelogic.tree.SyntaxTreeNode@261891c4 -- @ PolicyLocks ( { @ PolicyLock ( # ) , @ PolicyLock ( # ) , @ PolicyLock ( # ) } ) public class PLock extends java.lang.Object { public  PLock () { # }   /* is UNASSOCIATED: Cannot qualify a static lock with this */  @ ReturnsLock ( # ) public java.lang.Object getLock_thisQualified_staticLock() { # }   /* is CONSISTENT*/  @ ReturnsLock ( # ) public java.lang.Object getLock_implicit_staticLock() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_typeQualified_staticLock() { # }   /* is UNBOUND */  @ ReturnsLock ( # ) public java.lang.Object getLock_doesntExist() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_exists() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_exists2() { # }   /* is UNBOUND: parameter p doesn't exist */  @ ReturnsLock ( # ) public java.lang.Object getLock_bad_param(# final # o) { # }   /* is UNBOUND */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_doesntExist(# final # p) { # }   /* is CONSISTENT: parameter is non-final, but unchanged */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_nonfinal(# # p) { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_good(# final # p) { # }   /* is UNASSOCIATED: Cannot refer to 'this' on static method */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1() { # }   /* is UNASSOCIATED: Cannot refer to 'this' (implicitly) on static method */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1a() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1a() { # }   /* is UNBOUND: Lock does not exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegionWithThis() { # }   /* is UNBOUND: Lock doesn't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegion() { # }   /* is UNBOUND: Class doesn't exist (Default package) */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1() { # }   /* is UNBOUND: Package & Class don't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1a() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_paramLock(# final # p) { # } @ SuppressWarnings ( # ) private class Inner extends java.lang.Object { # public  # Inner # # # # public # # getLock_innerClassMethod_qualifiedThis_staticLock# # # # public # # getLock_innerClassMethod_qualifiedThis_nonStaticLock# # # } }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:02    INFO] Couldn't find lock DoesntExist in com.surelogic.tree.SyntaxTreeNode@261891c4 -- @ PolicyLocks ( { @ PolicyLock ( # ) , @ PolicyLock ( # ) , @ PolicyLock ( # ) } ) public class PLock extends java.lang.Object { public  PLock () { # }   /* is UNASSOCIATED: Cannot qualify a static lock with this */  @ ReturnsLock ( # ) public java.lang.Object getLock_thisQualified_staticLock() { # }   /* is CONSISTENT*/  @ ReturnsLock ( # ) public java.lang.Object getLock_implicit_staticLock() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_typeQualified_staticLock() { # }   /* is UNBOUND */  @ ReturnsLock ( # ) public java.lang.Object getLock_doesntExist() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_exists() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_exists2() { # }   /* is UNBOUND: parameter p doesn't exist */  @ ReturnsLock ( # ) public java.lang.Object getLock_bad_param(# final # o) { # }   /* is UNBOUND */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_doesntExist(# final # p) { # }   /* is CONSISTENT: parameter is non-final, but unchanged */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_nonfinal(# # p) { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_good(# final # p) { # }   /* is UNASSOCIATED: Cannot refer to 'this' on static method */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1() { # }   /* is UNASSOCIATED: Cannot refer to 'this' (implicitly) on static method */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1a() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1a() { # }   /* is UNBOUND: Lock does not exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegionWithThis() { # }   /* is UNBOUND: Lock doesn't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegion() { # }   /* is UNBOUND: Class doesn't exist (Default package) */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1() { # }   /* is UNBOUND: Package & Class don't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1a() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_paramLock(# final # p) { # } @ SuppressWarnings ( # ) private class Inner extends java.lang.Object { # public  # Inner # # # # public # # getLock_innerClassMethod_qualifiedThis_staticLock# # # # public # # getLock_innerClassMethod_qualifiedThis_nonStaticLock# # # } }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:02    INFO] Couldn't find lock DoesntExist in com.surelogic.tree.SyntaxTreeNode@261891c4 -- @ PolicyLocks ( { @ PolicyLock ( # ) , @ PolicyLock ( # ) , @ PolicyLock ( # ) } ) public class PLock extends java.lang.Object { public  PLock () { # }   /* is UNASSOCIATED: Cannot qualify a static lock with this */  @ ReturnsLock ( # ) public java.lang.Object getLock_thisQualified_staticLock() { # }   /* is CONSISTENT*/  @ ReturnsLock ( # ) public java.lang.Object getLock_implicit_staticLock() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_typeQualified_staticLock() { # }   /* is UNBOUND */  @ ReturnsLock ( # ) public java.lang.Object getLock_doesntExist() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_exists() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_exists2() { # }   /* is UNBOUND: parameter p doesn't exist */  @ ReturnsLock ( # ) public java.lang.Object getLock_bad_param(# final # o) { # }   /* is UNBOUND */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_doesntExist(# final # p) { # }   /* is CONSISTENT: parameter is non-final, but unchanged */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_nonfinal(# # p) { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_good(# final # p) { # }   /* is UNASSOCIATED: Cannot refer to 'this' on static method */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1() { # }   /* is UNASSOCIATED: Cannot refer to 'this' (implicitly) on static method */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1a() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1a() { # }   /* is UNBOUND: Lock does not exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegionWithThis() { # }   /* is UNBOUND: Lock doesn't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegion() { # }   /* is UNBOUND: Class doesn't exist (Default package) */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1() { # }   /* is UNBOUND: Package & Class don't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1a() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_paramLock(# final # p) { # } @ SuppressWarnings ( # ) private class Inner extends java.lang.Object { # public  # Inner # # # # public # # getLock_innerClassMethod_qualifiedThis_staticLock# # # # public # # getLock_innerClassMethod_qualifiedThis_nonStaticLock# # # } }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:02    INFO] Couldn't find lock DoesntExist in com.surelogic.tree.SyntaxTreeNode@261891c4 -- @ PolicyLocks ( { @ PolicyLock ( # ) , @ PolicyLock ( # ) , @ PolicyLock ( # ) } ) public class PLock extends java.lang.Object { public  PLock () { # }   /* is UNASSOCIATED: Cannot qualify a static lock with this */  @ ReturnsLock ( # ) public java.lang.Object getLock_thisQualified_staticLock() { # }   /* is CONSISTENT*/  @ ReturnsLock ( # ) public java.lang.Object getLock_implicit_staticLock() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_typeQualified_staticLock() { # }   /* is UNBOUND */  @ ReturnsLock ( # ) public java.lang.Object getLock_doesntExist() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_exists() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_exists2() { # }   /* is UNBOUND: parameter p doesn't exist */  @ ReturnsLock ( # ) public java.lang.Object getLock_bad_param(# final # o) { # }   /* is UNBOUND */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_doesntExist(# final # p) { # }   /* is CONSISTENT: parameter is non-final, but unchanged */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_nonfinal(# # p) { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_good(# final # p) { # }   /* is UNASSOCIATED: Cannot refer to 'this' on static method */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1() { # }   /* is UNASSOCIATED: Cannot refer to 'this' (implicitly) on static method */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1a() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1a() { # }   /* is UNBOUND: Lock does not exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegionWithThis() { # }   /* is UNBOUND: Lock doesn't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegion() { # }   /* is UNBOUND: Class doesn't exist (Default package) */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1() { # }   /* is UNBOUND: Package & Class don't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1a() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_paramLock(# final # p) { # } @ SuppressWarnings ( # ) private class Inner extends java.lang.Object { # public  # Inner # # # # public # # getLock_innerClassMethod_qualifiedThis_staticLock# # # # public # # getLock_innerClassMethod_qualifiedThis_nonStaticLock# # # } }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:02    INFO] Couldn't find lock DoesntExist in com.surelogic.tree.SyntaxTreeNode@261891c4 -- @ PolicyLocks ( { @ PolicyLock ( # ) , @ PolicyLock ( # ) , @ PolicyLock ( # ) } ) public class PLock extends java.lang.Object { public  PLock () { # }   /* is UNASSOCIATED: Cannot qualify a static lock with this */  @ ReturnsLock ( # ) public java.lang.Object getLock_thisQualified_staticLock() { # }   /* is CONSISTENT*/  @ ReturnsLock ( # ) public java.lang.Object getLock_implicit_staticLock() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_typeQualified_staticLock() { # }   /* is UNBOUND */  @ ReturnsLock ( # ) public java.lang.Object getLock_doesntExist() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_exists() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_exists2() { # }   /* is UNBOUND: parameter p doesn't exist */  @ ReturnsLock ( # ) public java.lang.Object getLock_bad_param(# final # o) { # }   /* is UNBOUND */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_doesntExist(# final # p) { # }   /* is CONSISTENT: parameter is non-final, but unchanged */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_nonfinal(# # p) { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_good(# final # p) { # }   /* is UNASSOCIATED: Cannot refer to 'this' on static method */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1() { # }   /* is UNASSOCIATED: Cannot refer to 'this' (implicitly) on static method */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1a() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1a() { # }   /* is UNBOUND: Lock does not exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegionWithThis() { # }   /* is UNBOUND: Lock doesn't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegion() { # }   /* is UNBOUND: Class doesn't exist (Default package) */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1() { # }   /* is UNBOUND: Package & Class don't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1a() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_paramLock(# final # p) { # } @ SuppressWarnings ( # ) private class Inner extends java.lang.Object { # public  # Inner # # # # public # # getLock_innerClassMethod_qualifiedThis_staticLock# # # # public # # getLock_innerClassMethod_qualifiedThis_nonStaticLock# # # } }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:02    INFO] Couldn't find lock DoesntExist in com.surelogic.tree.SyntaxTreeNode@261891c4 -- @ PolicyLocks ( { @ PolicyLock ( # ) , @ PolicyLock ( # ) , @ PolicyLock ( # ) } ) public class PLock extends java.lang.Object { public  PLock () { # }   /* is UNASSOCIATED: Cannot qualify a static lock with this */  @ ReturnsLock ( # ) public java.lang.Object getLock_thisQualified_staticLock() { # }   /* is CONSISTENT*/  @ ReturnsLock ( # ) public java.lang.Object getLock_implicit_staticLock() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_typeQualified_staticLock() { # }   /* is UNBOUND */  @ ReturnsLock ( # ) public java.lang.Object getLock_doesntExist() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_exists() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_exists2() { # }   /* is UNBOUND: parameter p doesn't exist */  @ ReturnsLock ( # ) public java.lang.Object getLock_bad_param(# final # o) { # }   /* is UNBOUND */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_doesntExist(# final # p) { # }   /* is CONSISTENT: parameter is non-final, but unchanged */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_nonfinal(# # p) { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_good(# final # p) { # }   /* is UNASSOCIATED: Cannot refer to 'this' on static method */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1() { # }   /* is UNASSOCIATED: Cannot refer to 'this' (implicitly) on static method */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1a() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1a() { # }   /* is UNBOUND: Lock does not exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegionWithThis() { # }   /* is UNBOUND: Lock doesn't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegion() { # }   /* is UNBOUND: Class doesn't exist (Default package) */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1() { # }   /* is UNBOUND: Package & Class don't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1a() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_paramLock(# final # p) { # } @ SuppressWarnings ( # ) private class Inner extends java.lang.Object { # public  # Inner # # # # public # # getLock_innerClassMethod_qualifiedThis_staticLock# # # # public # # getLock_innerClassMethod_qualifiedThis_nonStaticLock# # # } }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:02    INFO] Couldn't find lock DoesntExist in com.surelogic.tree.SyntaxTreeNode@261891c4 -- @ PolicyLocks ( { @ PolicyLock ( # ) , @ PolicyLock ( # ) , @ PolicyLock ( # ) } ) public class PLock extends java.lang.Object { public  PLock () { # }   /* is UNASSOCIATED: Cannot qualify a static lock with this */  @ ReturnsLock ( # ) public java.lang.Object getLock_thisQualified_staticLock() { # }   /* is CONSISTENT*/  @ ReturnsLock ( # ) public java.lang.Object getLock_implicit_staticLock() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_typeQualified_staticLock() { # }   /* is UNBOUND */  @ ReturnsLock ( # ) public java.lang.Object getLock_doesntExist() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_exists() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_exists2() { # }   /* is UNBOUND: parameter p doesn't exist */  @ ReturnsLock ( # ) public java.lang.Object getLock_bad_param(# final # o) { # }   /* is UNBOUND */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_doesntExist(# final # p) { # }   /* is CONSISTENT: parameter is non-final, but unchanged */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_nonfinal(# # p) { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_good(# final # p) { # }   /* is UNASSOCIATED: Cannot refer to 'this' on static method */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1() { # }   /* is UNASSOCIATED: Cannot refer to 'this' (implicitly) on static method */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1a() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1a() { # }   /* is UNBOUND: Lock does not exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegionWithThis() { # }   /* is UNBOUND: Lock doesn't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegion() { # }   /* is UNBOUND: Class doesn't exist (Default package) */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1() { # }   /* is UNBOUND: Package & Class don't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1a() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_paramLock(# final # p) { # } @ SuppressWarnings ( # ) private class Inner extends java.lang.Object { # public  # Inner # # # # public # # getLock_innerClassMethod_qualifiedThis_staticLock# # # # public # # getLock_innerClassMethod_qualifiedThis_nonStaticLock# # # } }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:02    INFO] Couldn't find field NoSuchClass in com.surelogic.tree.SyntaxTreeNode@261891c4 -- @ PolicyLocks ( { @ PolicyLock ( # ) , @ PolicyLock ( # ) , @ PolicyLock ( # ) } ) public class PLock extends java.lang.Object { public  PLock () { # }   /* is UNASSOCIATED: Cannot qualify a static lock with this */  @ ReturnsLock ( # ) public java.lang.Object getLock_thisQualified_staticLock() { # }   /* is CONSISTENT*/  @ ReturnsLock ( # ) public java.lang.Object getLock_implicit_staticLock() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_typeQualified_staticLock() { # }   /* is UNBOUND */  @ ReturnsLock ( # ) public java.lang.Object getLock_doesntExist() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_exists() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_exists2() { # }   /* is UNBOUND: parameter p doesn't exist */  @ ReturnsLock ( # ) public java.lang.Object getLock_bad_param(# final # o) { # }   /* is UNBOUND */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_doesntExist(# final # p) { # }   /* is CONSISTENT: parameter is non-final, but unchanged */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_nonfinal(# # p) { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_good(# final # p) { # }   /* is UNASSOCIATED: Cannot refer to 'this' on static method */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1() { # }   /* is UNASSOCIATED: Cannot refer to 'this' (implicitly) on static method */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1a() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1a() { # }   /* is UNBOUND: Lock does not exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegionWithThis() { # }   /* is UNBOUND: Lock doesn't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegion() { # }   /* is UNBOUND: Class doesn't exist (Default package) */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1() { # }   /* is UNBOUND: Package & Class don't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1a() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_paramLock(# final # p) { # } @ SuppressWarnings ( # ) private class Inner extends java.lang.Object { # public  # Inner # # # # public # # getLock_innerClassMethod_qualifiedThis_staticLock# # # # public # # getLock_innerClassMethod_qualifiedThis_nonStaticLock# # # } }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:02    INFO] Couldn't find field NoSuchClass in com.surelogic.tree.SyntaxTreeNode@261891c4 -- @ PolicyLocks ( { @ PolicyLock ( # ) , @ PolicyLock ( # ) , @ PolicyLock ( # ) } ) public class PLock extends java.lang.Object { public  PLock () { # }   /* is UNASSOCIATED: Cannot qualify a static lock with this */  @ ReturnsLock ( # ) public java.lang.Object getLock_thisQualified_staticLock() { # }   /* is CONSISTENT*/  @ ReturnsLock ( # ) public java.lang.Object getLock_implicit_staticLock() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_typeQualified_staticLock() { # }   /* is UNBOUND */  @ ReturnsLock ( # ) public java.lang.Object getLock_doesntExist() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_exists() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_exists2() { # }   /* is UNBOUND: parameter p doesn't exist */  @ ReturnsLock ( # ) public java.lang.Object getLock_bad_param(# final # o) { # }   /* is UNBOUND */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_doesntExist(# final # p) { # }   /* is CONSISTENT: parameter is non-final, but unchanged */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_nonfinal(# # p) { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public java.lang.Object getLock_param_good(# final # p) { # }   /* is UNASSOCIATED: Cannot refer to 'this' on static method */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1() { # }   /* is UNASSOCIATED: Cannot refer to 'this' (implicitly) on static method */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_instanceRegion1a() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_staticRegion1a() { # }   /* is UNBOUND: Lock does not exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegionWithThis() { # }   /* is UNBOUND: Lock doesn't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownRegion() { # }   /* is UNBOUND: Class doesn't exist (Default package) */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1() { # }   /* is UNBOUND: Package & Class don't exist */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_unknownClass1a() { # }   /* is CONSISTENT */  @ ReturnsLock ( # ) public static java.lang.Object getLock_staticMethod_paramLock(# final # p) { # } @ SuppressWarnings ( # ) private class Inner extends java.lang.Object { # public  # Inner # # # # public # # getLock_innerClassMethod_qualifiedThis_staticLock# # # # public # # getLock_innerClassMethod_qualifiedThis_nonStaticLock# # # } }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:02    INFO] Couldn't find lock DoesntExist in com.surelogic.tree.SyntaxTreeNode@3edbbc74 -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } ) @ RegionLocks ( { @ RegionLock ( # ) , @ RegionLock ( # ) , @ RegionLock ( # ) } ) public class StateLock_LockNames extends java.lang.Object { public  StateLock_LockNames () { # }   /*is UNASSOCIATED: cannot qualify a static lock with this*/  @ RequiresLock ( # ) public void bad_thisQualified_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_typeQualified_staticLock() {  }   /*is UNASSOCIATED: type-qualified instance lock*/  @ RequiresLock ( # ) public void bad_typeQualifiedInstance() {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_doesntExist() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_implicit_this() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_explicit_this() {  }   /*is UNBOUND: Parameter doesn't exist*/  @ RequiresLock ( # ) public void bad_param_doesnt_exist(# final # o) {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_param_lock_doesnt_exist(# final # p) {  }   /* is CONSISTENT: parameter is non-final but unchanged*/  @ RequiresLock ( # ) public void good_param_nonfinal(# # p) {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_param_is_good(# final # p) {  }   /*is UNASSOCIATED: cannot use 'this' on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_explicit_this() {  }   /*is UNASSOCIATED: cannot use 'this' (implicit) on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_implicit_this() {  }   /*is CONSISTENT*/  @ RequiresLock ( # ) public static void good_staticMethod_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void good_staticMethod_typeQualified_staticLock() {  }   /*is UNBOUND: static use of this with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionWithThis() {  }   /*is UNBOUND: static use of this (implicit) with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionImplicitThis() {  }   /*is UNBOUND: No such class (default package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1() {  }   /*is UNBOUND: No such class (non-existent package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1a() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void staticMethod_paramLock(# final # p) {  } }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:02    INFO] Couldn't find lock DoesntExist in com.surelogic.tree.SyntaxTreeNode@3edbbc74 -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } ) @ RegionLocks ( { @ RegionLock ( # ) , @ RegionLock ( # ) , @ RegionLock ( # ) } ) public class StateLock_LockNames extends java.lang.Object { public  StateLock_LockNames () { # }   /*is UNASSOCIATED: cannot qualify a static lock with this*/  @ RequiresLock ( # ) public void bad_thisQualified_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_typeQualified_staticLock() {  }   /*is UNASSOCIATED: type-qualified instance lock*/  @ RequiresLock ( # ) public void bad_typeQualifiedInstance() {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_doesntExist() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_implicit_this() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_explicit_this() {  }   /*is UNBOUND: Parameter doesn't exist*/  @ RequiresLock ( # ) public void bad_param_doesnt_exist(# final # o) {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_param_lock_doesnt_exist(# final # p) {  }   /* is CONSISTENT: parameter is non-final but unchanged*/  @ RequiresLock ( # ) public void good_param_nonfinal(# # p) {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_param_is_good(# final # p) {  }   /*is UNASSOCIATED: cannot use 'this' on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_explicit_this() {  }   /*is UNASSOCIATED: cannot use 'this' (implicit) on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_implicit_this() {  }   /*is CONSISTENT*/  @ RequiresLock ( # ) public static void good_staticMethod_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void good_staticMethod_typeQualified_staticLock() {  }   /*is UNBOUND: static use of this with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionWithThis() {  }   /*is UNBOUND: static use of this (implicit) with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionImplicitThis() {  }   /*is UNBOUND: No such class (default package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1() {  }   /*is UNBOUND: No such class (non-existent package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1a() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void staticMethod_paramLock(# final # p) {  } }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:02    INFO] Couldn't find field p in com.surelogic.tree.SyntaxTreeNode@3edbbc74 -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } ) @ RegionLocks ( { @ RegionLock ( # ) , @ RegionLock ( # ) , @ RegionLock ( # ) } ) public class StateLock_LockNames extends java.lang.Object { public  StateLock_LockNames () { # }   /*is UNASSOCIATED: cannot qualify a static lock with this*/  @ RequiresLock ( # ) public void bad_thisQualified_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_typeQualified_staticLock() {  }   /*is UNASSOCIATED: type-qualified instance lock*/  @ RequiresLock ( # ) public void bad_typeQualifiedInstance() {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_doesntExist() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_implicit_this() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_explicit_this() {  }   /*is UNBOUND: Parameter doesn't exist*/  @ RequiresLock ( # ) public void bad_param_doesnt_exist(# final # o) {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_param_lock_doesnt_exist(# final # p) {  }   /* is CONSISTENT: parameter is non-final but unchanged*/  @ RequiresLock ( # ) public void good_param_nonfinal(# # p) {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_param_is_good(# final # p) {  }   /*is UNASSOCIATED: cannot use 'this' on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_explicit_this() {  }   /*is UNASSOCIATED: cannot use 'this' (implicit) on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_implicit_this() {  }   /*is CONSISTENT*/  @ RequiresLock ( # ) public static void good_staticMethod_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void good_staticMethod_typeQualified_staticLock() {  }   /*is UNBOUND: static use of this with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionWithThis() {  }   /*is UNBOUND: static use of this (implicit) with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionImplicitThis() {  }   /*is UNBOUND: No such class (default package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1() {  }   /*is UNBOUND: No such class (non-existent package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1a() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void staticMethod_paramLock(# final # p) {  } }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:02    INFO] Couldn't find field p in com.surelogic.tree.SyntaxTreeNode@3edbbc74 -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } ) @ RegionLocks ( { @ RegionLock ( # ) , @ RegionLock ( # ) , @ RegionLock ( # ) } ) public class StateLock_LockNames extends java.lang.Object { public  StateLock_LockNames () { # }   /*is UNASSOCIATED: cannot qualify a static lock with this*/  @ RequiresLock ( # ) public void bad_thisQualified_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_typeQualified_staticLock() {  }   /*is UNASSOCIATED: type-qualified instance lock*/  @ RequiresLock ( # ) public void bad_typeQualifiedInstance() {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_doesntExist() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_implicit_this() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_explicit_this() {  }   /*is UNBOUND: Parameter doesn't exist*/  @ RequiresLock ( # ) public void bad_param_doesnt_exist(# final # o) {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_param_lock_doesnt_exist(# final # p) {  }   /* is CONSISTENT: parameter is non-final but unchanged*/  @ RequiresLock ( # ) public void good_param_nonfinal(# # p) {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_param_is_good(# final # p) {  }   /*is UNASSOCIATED: cannot use 'this' on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_explicit_this() {  }   /*is UNASSOCIATED: cannot use 'this' (implicit) on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_implicit_this() {  }   /*is CONSISTENT*/  @ RequiresLock ( # ) public static void good_staticMethod_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void good_staticMethod_typeQualified_staticLock() {  }   /*is UNBOUND: static use of this with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionWithThis() {  }   /*is UNBOUND: static use of this (implicit) with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionImplicitThis() {  }   /*is UNBOUND: No such class (default package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1() {  }   /*is UNBOUND: No such class (non-existent package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1a() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void staticMethod_paramLock(# final # p) {  } }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:02    INFO] Couldn't find lock DoesntExist in com.surelogic.tree.SyntaxTreeNode@3edbbc74 -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } ) @ RegionLocks ( { @ RegionLock ( # ) , @ RegionLock ( # ) , @ RegionLock ( # ) } ) public class StateLock_LockNames extends java.lang.Object { public  StateLock_LockNames () { # }   /*is UNASSOCIATED: cannot qualify a static lock with this*/  @ RequiresLock ( # ) public void bad_thisQualified_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_typeQualified_staticLock() {  }   /*is UNASSOCIATED: type-qualified instance lock*/  @ RequiresLock ( # ) public void bad_typeQualifiedInstance() {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_doesntExist() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_implicit_this() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_explicit_this() {  }   /*is UNBOUND: Parameter doesn't exist*/  @ RequiresLock ( # ) public void bad_param_doesnt_exist(# final # o) {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_param_lock_doesnt_exist(# final # p) {  }   /* is CONSISTENT: parameter is non-final but unchanged*/  @ RequiresLock ( # ) public void good_param_nonfinal(# # p) {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_param_is_good(# final # p) {  }   /*is UNASSOCIATED: cannot use 'this' on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_explicit_this() {  }   /*is UNASSOCIATED: cannot use 'this' (implicit) on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_implicit_this() {  }   /*is CONSISTENT*/  @ RequiresLock ( # ) public static void good_staticMethod_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void good_staticMethod_typeQualified_staticLock() {  }   /*is UNBOUND: static use of this with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionWithThis() {  }   /*is UNBOUND: static use of this (implicit) with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionImplicitThis() {  }   /*is UNBOUND: No such class (default package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1() {  }   /*is UNBOUND: No such class (non-existent package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1a() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void staticMethod_paramLock(# final # p) {  } }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:02    INFO] Couldn't find lock DoesntExist in com.surelogic.tree.SyntaxTreeNode@3edbbc74 -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } ) @ RegionLocks ( { @ RegionLock ( # ) , @ RegionLock ( # ) , @ RegionLock ( # ) } ) public class StateLock_LockNames extends java.lang.Object { public  StateLock_LockNames () { # }   /*is UNASSOCIATED: cannot qualify a static lock with this*/  @ RequiresLock ( # ) public void bad_thisQualified_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_typeQualified_staticLock() {  }   /*is UNASSOCIATED: type-qualified instance lock*/  @ RequiresLock ( # ) public void bad_typeQualifiedInstance() {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_doesntExist() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_implicit_this() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_explicit_this() {  }   /*is UNBOUND: Parameter doesn't exist*/  @ RequiresLock ( # ) public void bad_param_doesnt_exist(# final # o) {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_param_lock_doesnt_exist(# final # p) {  }   /* is CONSISTENT: parameter is non-final but unchanged*/  @ RequiresLock ( # ) public void good_param_nonfinal(# # p) {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_param_is_good(# final # p) {  }   /*is UNASSOCIATED: cannot use 'this' on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_explicit_this() {  }   /*is UNASSOCIATED: cannot use 'this' (implicit) on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_implicit_this() {  }   /*is CONSISTENT*/  @ RequiresLock ( # ) public static void good_staticMethod_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void good_staticMethod_typeQualified_staticLock() {  }   /*is UNBOUND: static use of this with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionWithThis() {  }   /*is UNBOUND: static use of this (implicit) with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionImplicitThis() {  }   /*is UNBOUND: No such class (default package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1() {  }   /*is UNBOUND: No such class (non-existent package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1a() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void staticMethod_paramLock(# final # p) {  } }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:02    INFO] Couldn't find lock DoesntExist in com.surelogic.tree.SyntaxTreeNode@3edbbc74 -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } ) @ RegionLocks ( { @ RegionLock ( # ) , @ RegionLock ( # ) , @ RegionLock ( # ) } ) public class StateLock_LockNames extends java.lang.Object { public  StateLock_LockNames () { # }   /*is UNASSOCIATED: cannot qualify a static lock with this*/  @ RequiresLock ( # ) public void bad_thisQualified_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_typeQualified_staticLock() {  }   /*is UNASSOCIATED: type-qualified instance lock*/  @ RequiresLock ( # ) public void bad_typeQualifiedInstance() {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_doesntExist() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_implicit_this() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_explicit_this() {  }   /*is UNBOUND: Parameter doesn't exist*/  @ RequiresLock ( # ) public void bad_param_doesnt_exist(# final # o) {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_param_lock_doesnt_exist(# final # p) {  }   /* is CONSISTENT: parameter is non-final but unchanged*/  @ RequiresLock ( # ) public void good_param_nonfinal(# # p) {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_param_is_good(# final # p) {  }   /*is UNASSOCIATED: cannot use 'this' on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_explicit_this() {  }   /*is UNASSOCIATED: cannot use 'this' (implicit) on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_implicit_this() {  }   /*is CONSISTENT*/  @ RequiresLock ( # ) public static void good_staticMethod_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void good_staticMethod_typeQualified_staticLock() {  }   /*is UNBOUND: static use of this with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionWithThis() {  }   /*is UNBOUND: static use of this (implicit) with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionImplicitThis() {  }   /*is UNBOUND: No such class (default package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1() {  }   /*is UNBOUND: No such class (non-existent package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1a() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void staticMethod_paramLock(# final # p) {  } }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:02    INFO] Couldn't find lock DoesntExist in com.surelogic.tree.SyntaxTreeNode@3edbbc74 -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } ) @ RegionLocks ( { @ RegionLock ( # ) , @ RegionLock ( # ) , @ RegionLock ( # ) } ) public class StateLock_LockNames extends java.lang.Object { public  StateLock_LockNames () { # }   /*is UNASSOCIATED: cannot qualify a static lock with this*/  @ RequiresLock ( # ) public void bad_thisQualified_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_typeQualified_staticLock() {  }   /*is UNASSOCIATED: type-qualified instance lock*/  @ RequiresLock ( # ) public void bad_typeQualifiedInstance() {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_doesntExist() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_implicit_this() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_explicit_this() {  }   /*is UNBOUND: Parameter doesn't exist*/  @ RequiresLock ( # ) public void bad_param_doesnt_exist(# final # o) {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_param_lock_doesnt_exist(# final # p) {  }   /* is CONSISTENT: parameter is non-final but unchanged*/  @ RequiresLock ( # ) public void good_param_nonfinal(# # p) {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_param_is_good(# final # p) {  }   /*is UNASSOCIATED: cannot use 'this' on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_explicit_this() {  }   /*is UNASSOCIATED: cannot use 'this' (implicit) on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_implicit_this() {  }   /*is CONSISTENT*/  @ RequiresLock ( # ) public static void good_staticMethod_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void good_staticMethod_typeQualified_staticLock() {  }   /*is UNBOUND: static use of this with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionWithThis() {  }   /*is UNBOUND: static use of this (implicit) with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionImplicitThis() {  }   /*is UNBOUND: No such class (default package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1() {  }   /*is UNBOUND: No such class (non-existent package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1a() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void staticMethod_paramLock(# final # p) {  } }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:02    INFO] Couldn't find lock DoesntExist in com.surelogic.tree.SyntaxTreeNode@3edbbc74 -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } ) @ RegionLocks ( { @ RegionLock ( # ) , @ RegionLock ( # ) , @ RegionLock ( # ) } ) public class StateLock_LockNames extends java.lang.Object { public  StateLock_LockNames () { # }   /*is UNASSOCIATED: cannot qualify a static lock with this*/  @ RequiresLock ( # ) public void bad_thisQualified_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_typeQualified_staticLock() {  }   /*is UNASSOCIATED: type-qualified instance lock*/  @ RequiresLock ( # ) public void bad_typeQualifiedInstance() {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_doesntExist() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_implicit_this() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_explicit_this() {  }   /*is UNBOUND: Parameter doesn't exist*/  @ RequiresLock ( # ) public void bad_param_doesnt_exist(# final # o) {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_param_lock_doesnt_exist(# final # p) {  }   /* is CONSISTENT: parameter is non-final but unchanged*/  @ RequiresLock ( # ) public void good_param_nonfinal(# # p) {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_param_is_good(# final # p) {  }   /*is UNASSOCIATED: cannot use 'this' on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_explicit_this() {  }   /*is UNASSOCIATED: cannot use 'this' (implicit) on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_implicit_this() {  }   /*is CONSISTENT*/  @ RequiresLock ( # ) public static void good_staticMethod_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void good_staticMethod_typeQualified_staticLock() {  }   /*is UNBOUND: static use of this with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionWithThis() {  }   /*is UNBOUND: static use of this (implicit) with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionImplicitThis() {  }   /*is UNBOUND: No such class (default package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1() {  }   /*is UNBOUND: No such class (non-existent package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1a() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void staticMethod_paramLock(# final # p) {  } }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:02    INFO] Couldn't find lock DoesntExist in com.surelogic.tree.SyntaxTreeNode@3edbbc74 -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } ) @ RegionLocks ( { @ RegionLock ( # ) , @ RegionLock ( # ) , @ RegionLock ( # ) } ) public class StateLock_LockNames extends java.lang.Object { public  StateLock_LockNames () { # }   /*is UNASSOCIATED: cannot qualify a static lock with this*/  @ RequiresLock ( # ) public void bad_thisQualified_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_typeQualified_staticLock() {  }   /*is UNASSOCIATED: type-qualified instance lock*/  @ RequiresLock ( # ) public void bad_typeQualifiedInstance() {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_doesntExist() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_implicit_this() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_explicit_this() {  }   /*is UNBOUND: Parameter doesn't exist*/  @ RequiresLock ( # ) public void bad_param_doesnt_exist(# final # o) {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_param_lock_doesnt_exist(# final # p) {  }   /* is CONSISTENT: parameter is non-final but unchanged*/  @ RequiresLock ( # ) public void good_param_nonfinal(# # p) {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_param_is_good(# final # p) {  }   /*is UNASSOCIATED: cannot use 'this' on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_explicit_this() {  }   /*is UNASSOCIATED: cannot use 'this' (implicit) on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_implicit_this() {  }   /*is CONSISTENT*/  @ RequiresLock ( # ) public static void good_staticMethod_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void good_staticMethod_typeQualified_staticLock() {  }   /*is UNBOUND: static use of this with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionWithThis() {  }   /*is UNBOUND: static use of this (implicit) with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionImplicitThis() {  }   /*is UNBOUND: No such class (default package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1() {  }   /*is UNBOUND: No such class (non-existent package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1a() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void staticMethod_paramLock(# final # p) {  } }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:02    INFO] Couldn't find field NoSuchClass in com.surelogic.tree.SyntaxTreeNode@3edbbc74 -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } ) @ RegionLocks ( { @ RegionLock ( # ) , @ RegionLock ( # ) , @ RegionLock ( # ) } ) public class StateLock_LockNames extends java.lang.Object { public  StateLock_LockNames () { # }   /*is UNASSOCIATED: cannot qualify a static lock with this*/  @ RequiresLock ( # ) public void bad_thisQualified_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_typeQualified_staticLock() {  }   /*is UNASSOCIATED: type-qualified instance lock*/  @ RequiresLock ( # ) public void bad_typeQualifiedInstance() {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_doesntExist() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_implicit_this() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_explicit_this() {  }   /*is UNBOUND: Parameter doesn't exist*/  @ RequiresLock ( # ) public void bad_param_doesnt_exist(# final # o) {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_param_lock_doesnt_exist(# final # p) {  }   /* is CONSISTENT: parameter is non-final but unchanged*/  @ RequiresLock ( # ) public void good_param_nonfinal(# # p) {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_param_is_good(# final # p) {  }   /*is UNASSOCIATED: cannot use 'this' on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_explicit_this() {  }   /*is UNASSOCIATED: cannot use 'this' (implicit) on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_implicit_this() {  }   /*is CONSISTENT*/  @ RequiresLock ( # ) public static void good_staticMethod_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void good_staticMethod_typeQualified_staticLock() {  }   /*is UNBOUND: static use of this with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionWithThis() {  }   /*is UNBOUND: static use of this (implicit) with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionImplicitThis() {  }   /*is UNBOUND: No such class (default package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1() {  }   /*is UNBOUND: No such class (non-existent package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1a() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void staticMethod_paramLock(# final # p) {  } }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:02    INFO] Couldn't find field NoSuchClass in com.surelogic.tree.SyntaxTreeNode@3edbbc74 -- @ Regions ( { @ Region ( # ) , @ Region ( # ) , @ Region ( # ) } ) @ RegionLocks ( { @ RegionLock ( # ) , @ RegionLock ( # ) , @ RegionLock ( # ) } ) public class StateLock_LockNames extends java.lang.Object { public  StateLock_LockNames () { # }   /*is UNASSOCIATED: cannot qualify a static lock with this*/  @ RequiresLock ( # ) public void bad_thisQualified_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_typeQualified_staticLock() {  }   /*is UNASSOCIATED: type-qualified instance lock*/  @ RequiresLock ( # ) public void bad_typeQualifiedInstance() {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_doesntExist() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_implicit_this() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_explicit_this() {  }   /*is UNBOUND: Parameter doesn't exist*/  @ RequiresLock ( # ) public void bad_param_doesnt_exist(# final # o) {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_param_lock_doesnt_exist(# final # p) {  }   /* is CONSISTENT: parameter is non-final but unchanged*/  @ RequiresLock ( # ) public void good_param_nonfinal(# # p) {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_param_is_good(# final # p) {  }   /*is UNASSOCIATED: cannot use 'this' on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_explicit_this() {  }   /*is UNASSOCIATED: cannot use 'this' (implicit) on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_implicit_this() {  }   /*is CONSISTENT*/  @ RequiresLock ( # ) public static void good_staticMethod_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void good_staticMethod_typeQualified_staticLock() {  }   /*is UNBOUND: static use of this with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionWithThis() {  }   /*is UNBOUND: static use of this (implicit) with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionImplicitThis() {  }   /*is UNBOUND: No such class (default package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1() {  }   /*is UNBOUND: No such class (non-existent package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1a() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void staticMethod_paramLock(# final # p) {  } }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:02    INFO] Couldn't find lock DoesntExist in com.surelogic.tree.SyntaxTreeNode@27ebeb18 -- @ PolicyLocks ( { @ PolicyLock ( # ) , @ PolicyLock ( # ) , @ PolicyLock ( # ) } ) public class PolicyLock_LockNames extends java.lang.Object { public  PolicyLock_LockNames () { # }   /*is UNASSOCIATED: cannot qualify a static lock with this*/  @ RequiresLock ( # ) public void bad_thisQualified_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_typeQualified_staticLock() {  }   /*is UNASSOCIATED: type-qualified instance lock*/  @ RequiresLock ( # ) public void bad_typeQualifiedInstance() {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_doesntExist() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_implicit_this() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_explicit_this() {  }   /*is UNBOUND: Parameter doesn't exist*/  @ RequiresLock ( # ) public void bad_param_doesnt_exist(# final # o) {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_param_lock_doesnt_exist(# final # p) {  }   /* is CONSISTENT: parameter is non-final, but not changed */  @ RequiresLock ( # ) public void good_param_nonfinal(# # p) {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_param_is_good(# final # p) {  }   /*is UNASSOCIATED: cannot use 'this' on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_explicit_this() {  }   /*is UNASSOCIATED: cannot use 'this' (implicit) on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_implicit_this() {  }   /*is CONSISTENT*/  @ RequiresLock ( # ) public static void good_staticMethod_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void good_staticMethod_typeQualified_staticLock() {  }   /*is UNBOUND: static use of this with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionWithThis() {  }   /*is UNBOUND: static use of this (implicit) with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionImplicitThis() {  }   /*is UNBOUND: No such class (default package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1() {  }   /*is UNBOUND: No such class (non-existent package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1a() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void staticMethod_paramLock(# final # p) {  } }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:02    INFO] Couldn't find lock DoesntExist in com.surelogic.tree.SyntaxTreeNode@27ebeb18 -- @ PolicyLocks ( { @ PolicyLock ( # ) , @ PolicyLock ( # ) , @ PolicyLock ( # ) } ) public class PolicyLock_LockNames extends java.lang.Object { public  PolicyLock_LockNames () { # }   /*is UNASSOCIATED: cannot qualify a static lock with this*/  @ RequiresLock ( # ) public void bad_thisQualified_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_typeQualified_staticLock() {  }   /*is UNASSOCIATED: type-qualified instance lock*/  @ RequiresLock ( # ) public void bad_typeQualifiedInstance() {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_doesntExist() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_implicit_this() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_explicit_this() {  }   /*is UNBOUND: Parameter doesn't exist*/  @ RequiresLock ( # ) public void bad_param_doesnt_exist(# final # o) {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_param_lock_doesnt_exist(# final # p) {  }   /* is CONSISTENT: parameter is non-final, but not changed */  @ RequiresLock ( # ) public void good_param_nonfinal(# # p) {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_param_is_good(# final # p) {  }   /*is UNASSOCIATED: cannot use 'this' on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_explicit_this() {  }   /*is UNASSOCIATED: cannot use 'this' (implicit) on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_implicit_this() {  }   /*is CONSISTENT*/  @ RequiresLock ( # ) public static void good_staticMethod_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void good_staticMethod_typeQualified_staticLock() {  }   /*is UNBOUND: static use of this with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionWithThis() {  }   /*is UNBOUND: static use of this (implicit) with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionImplicitThis() {  }   /*is UNBOUND: No such class (default package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1() {  }   /*is UNBOUND: No such class (non-existent package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1a() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void staticMethod_paramLock(# final # p) {  } }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:02    INFO] Couldn't find field p in com.surelogic.tree.SyntaxTreeNode@27ebeb18 -- @ PolicyLocks ( { @ PolicyLock ( # ) , @ PolicyLock ( # ) , @ PolicyLock ( # ) } ) public class PolicyLock_LockNames extends java.lang.Object { public  PolicyLock_LockNames () { # }   /*is UNASSOCIATED: cannot qualify a static lock with this*/  @ RequiresLock ( # ) public void bad_thisQualified_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_typeQualified_staticLock() {  }   /*is UNASSOCIATED: type-qualified instance lock*/  @ RequiresLock ( # ) public void bad_typeQualifiedInstance() {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_doesntExist() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_implicit_this() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_explicit_this() {  }   /*is UNBOUND: Parameter doesn't exist*/  @ RequiresLock ( # ) public void bad_param_doesnt_exist(# final # o) {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_param_lock_doesnt_exist(# final # p) {  }   /* is CONSISTENT: parameter is non-final, but not changed */  @ RequiresLock ( # ) public void good_param_nonfinal(# # p) {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_param_is_good(# final # p) {  }   /*is UNASSOCIATED: cannot use 'this' on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_explicit_this() {  }   /*is UNASSOCIATED: cannot use 'this' (implicit) on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_implicit_this() {  }   /*is CONSISTENT*/  @ RequiresLock ( # ) public static void good_staticMethod_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void good_staticMethod_typeQualified_staticLock() {  }   /*is UNBOUND: static use of this with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionWithThis() {  }   /*is UNBOUND: static use of this (implicit) with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionImplicitThis() {  }   /*is UNBOUND: No such class (default package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1() {  }   /*is UNBOUND: No such class (non-existent package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1a() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void staticMethod_paramLock(# final # p) {  } }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:02    INFO] Couldn't find field p in com.surelogic.tree.SyntaxTreeNode@27ebeb18 -- @ PolicyLocks ( { @ PolicyLock ( # ) , @ PolicyLock ( # ) , @ PolicyLock ( # ) } ) public class PolicyLock_LockNames extends java.lang.Object { public  PolicyLock_LockNames () { # }   /*is UNASSOCIATED: cannot qualify a static lock with this*/  @ RequiresLock ( # ) public void bad_thisQualified_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_typeQualified_staticLock() {  }   /*is UNASSOCIATED: type-qualified instance lock*/  @ RequiresLock ( # ) public void bad_typeQualifiedInstance() {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_doesntExist() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_implicit_this() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_explicit_this() {  }   /*is UNBOUND: Parameter doesn't exist*/  @ RequiresLock ( # ) public void bad_param_doesnt_exist(# final # o) {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_param_lock_doesnt_exist(# final # p) {  }   /* is CONSISTENT: parameter is non-final, but not changed */  @ RequiresLock ( # ) public void good_param_nonfinal(# # p) {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_param_is_good(# final # p) {  }   /*is UNASSOCIATED: cannot use 'this' on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_explicit_this() {  }   /*is UNASSOCIATED: cannot use 'this' (implicit) on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_implicit_this() {  }   /*is CONSISTENT*/  @ RequiresLock ( # ) public static void good_staticMethod_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void good_staticMethod_typeQualified_staticLock() {  }   /*is UNBOUND: static use of this with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionWithThis() {  }   /*is UNBOUND: static use of this (implicit) with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionImplicitThis() {  }   /*is UNBOUND: No such class (default package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1() {  }   /*is UNBOUND: No such class (non-existent package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1a() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void staticMethod_paramLock(# final # p) {  } }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:02    INFO] Couldn't find lock DoesntExist in com.surelogic.tree.SyntaxTreeNode@27ebeb18 -- @ PolicyLocks ( { @ PolicyLock ( # ) , @ PolicyLock ( # ) , @ PolicyLock ( # ) } ) public class PolicyLock_LockNames extends java.lang.Object { public  PolicyLock_LockNames () { # }   /*is UNASSOCIATED: cannot qualify a static lock with this*/  @ RequiresLock ( # ) public void bad_thisQualified_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_typeQualified_staticLock() {  }   /*is UNASSOCIATED: type-qualified instance lock*/  @ RequiresLock ( # ) public void bad_typeQualifiedInstance() {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_doesntExist() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_implicit_this() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_explicit_this() {  }   /*is UNBOUND: Parameter doesn't exist*/  @ RequiresLock ( # ) public void bad_param_doesnt_exist(# final # o) {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_param_lock_doesnt_exist(# final # p) {  }   /* is CONSISTENT: parameter is non-final, but not changed */  @ RequiresLock ( # ) public void good_param_nonfinal(# # p) {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_param_is_good(# final # p) {  }   /*is UNASSOCIATED: cannot use 'this' on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_explicit_this() {  }   /*is UNASSOCIATED: cannot use 'this' (implicit) on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_implicit_this() {  }   /*is CONSISTENT*/  @ RequiresLock ( # ) public static void good_staticMethod_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void good_staticMethod_typeQualified_staticLock() {  }   /*is UNBOUND: static use of this with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionWithThis() {  }   /*is UNBOUND: static use of this (implicit) with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionImplicitThis() {  }   /*is UNBOUND: No such class (default package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1() {  }   /*is UNBOUND: No such class (non-existent package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1a() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void staticMethod_paramLock(# final # p) {  } }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:02    INFO] Couldn't find lock DoesntExist in com.surelogic.tree.SyntaxTreeNode@27ebeb18 -- @ PolicyLocks ( { @ PolicyLock ( # ) , @ PolicyLock ( # ) , @ PolicyLock ( # ) } ) public class PolicyLock_LockNames extends java.lang.Object { public  PolicyLock_LockNames () { # }   /*is UNASSOCIATED: cannot qualify a static lock with this*/  @ RequiresLock ( # ) public void bad_thisQualified_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_typeQualified_staticLock() {  }   /*is UNASSOCIATED: type-qualified instance lock*/  @ RequiresLock ( # ) public void bad_typeQualifiedInstance() {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_doesntExist() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_implicit_this() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_explicit_this() {  }   /*is UNBOUND: Parameter doesn't exist*/  @ RequiresLock ( # ) public void bad_param_doesnt_exist(# final # o) {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_param_lock_doesnt_exist(# final # p) {  }   /* is CONSISTENT: parameter is non-final, but not changed */  @ RequiresLock ( # ) public void good_param_nonfinal(# # p) {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_param_is_good(# final # p) {  }   /*is UNASSOCIATED: cannot use 'this' on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_explicit_this() {  }   /*is UNASSOCIATED: cannot use 'this' (implicit) on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_implicit_this() {  }   /*is CONSISTENT*/  @ RequiresLock ( # ) public static void good_staticMethod_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void good_staticMethod_typeQualified_staticLock() {  }   /*is UNBOUND: static use of this with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionWithThis() {  }   /*is UNBOUND: static use of this (implicit) with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionImplicitThis() {  }   /*is UNBOUND: No such class (default package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1() {  }   /*is UNBOUND: No such class (non-existent package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1a() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void staticMethod_paramLock(# final # p) {  } }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:02    INFO] Couldn't find lock DoesntExist in com.surelogic.tree.SyntaxTreeNode@27ebeb18 -- @ PolicyLocks ( { @ PolicyLock ( # ) , @ PolicyLock ( # ) , @ PolicyLock ( # ) } ) public class PolicyLock_LockNames extends java.lang.Object { public  PolicyLock_LockNames () { # }   /*is UNASSOCIATED: cannot qualify a static lock with this*/  @ RequiresLock ( # ) public void bad_thisQualified_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_typeQualified_staticLock() {  }   /*is UNASSOCIATED: type-qualified instance lock*/  @ RequiresLock ( # ) public void bad_typeQualifiedInstance() {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_doesntExist() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_implicit_this() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_explicit_this() {  }   /*is UNBOUND: Parameter doesn't exist*/  @ RequiresLock ( # ) public void bad_param_doesnt_exist(# final # o) {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_param_lock_doesnt_exist(# final # p) {  }   /* is CONSISTENT: parameter is non-final, but not changed */  @ RequiresLock ( # ) public void good_param_nonfinal(# # p) {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_param_is_good(# final # p) {  }   /*is UNASSOCIATED: cannot use 'this' on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_explicit_this() {  }   /*is UNASSOCIATED: cannot use 'this' (implicit) on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_implicit_this() {  }   /*is CONSISTENT*/  @ RequiresLock ( # ) public static void good_staticMethod_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void good_staticMethod_typeQualified_staticLock() {  }   /*is UNBOUND: static use of this with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionWithThis() {  }   /*is UNBOUND: static use of this (implicit) with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionImplicitThis() {  }   /*is UNBOUND: No such class (default package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1() {  }   /*is UNBOUND: No such class (non-existent package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1a() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void staticMethod_paramLock(# final # p) {  } }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:02    INFO] Couldn't find lock DoesntExist in com.surelogic.tree.SyntaxTreeNode@27ebeb18 -- @ PolicyLocks ( { @ PolicyLock ( # ) , @ PolicyLock ( # ) , @ PolicyLock ( # ) } ) public class PolicyLock_LockNames extends java.lang.Object { public  PolicyLock_LockNames () { # }   /*is UNASSOCIATED: cannot qualify a static lock with this*/  @ RequiresLock ( # ) public void bad_thisQualified_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_typeQualified_staticLock() {  }   /*is UNASSOCIATED: type-qualified instance lock*/  @ RequiresLock ( # ) public void bad_typeQualifiedInstance() {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_doesntExist() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_implicit_this() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_explicit_this() {  }   /*is UNBOUND: Parameter doesn't exist*/  @ RequiresLock ( # ) public void bad_param_doesnt_exist(# final # o) {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_param_lock_doesnt_exist(# final # p) {  }   /* is CONSISTENT: parameter is non-final, but not changed */  @ RequiresLock ( # ) public void good_param_nonfinal(# # p) {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_param_is_good(# final # p) {  }   /*is UNASSOCIATED: cannot use 'this' on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_explicit_this() {  }   /*is UNASSOCIATED: cannot use 'this' (implicit) on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_implicit_this() {  }   /*is CONSISTENT*/  @ RequiresLock ( # ) public static void good_staticMethod_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void good_staticMethod_typeQualified_staticLock() {  }   /*is UNBOUND: static use of this with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionWithThis() {  }   /*is UNBOUND: static use of this (implicit) with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionImplicitThis() {  }   /*is UNBOUND: No such class (default package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1() {  }   /*is UNBOUND: No such class (non-existent package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1a() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void staticMethod_paramLock(# final # p) {  } }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:02    INFO] Couldn't find lock DoesntExist in com.surelogic.tree.SyntaxTreeNode@27ebeb18 -- @ PolicyLocks ( { @ PolicyLock ( # ) , @ PolicyLock ( # ) , @ PolicyLock ( # ) } ) public class PolicyLock_LockNames extends java.lang.Object { public  PolicyLock_LockNames () { # }   /*is UNASSOCIATED: cannot qualify a static lock with this*/  @ RequiresLock ( # ) public void bad_thisQualified_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_typeQualified_staticLock() {  }   /*is UNASSOCIATED: type-qualified instance lock*/  @ RequiresLock ( # ) public void bad_typeQualifiedInstance() {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_doesntExist() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_implicit_this() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_explicit_this() {  }   /*is UNBOUND: Parameter doesn't exist*/  @ RequiresLock ( # ) public void bad_param_doesnt_exist(# final # o) {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_param_lock_doesnt_exist(# final # p) {  }   /* is CONSISTENT: parameter is non-final, but not changed */  @ RequiresLock ( # ) public void good_param_nonfinal(# # p) {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_param_is_good(# final # p) {  }   /*is UNASSOCIATED: cannot use 'this' on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_explicit_this() {  }   /*is UNASSOCIATED: cannot use 'this' (implicit) on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_implicit_this() {  }   /*is CONSISTENT*/  @ RequiresLock ( # ) public static void good_staticMethod_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void good_staticMethod_typeQualified_staticLock() {  }   /*is UNBOUND: static use of this with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionWithThis() {  }   /*is UNBOUND: static use of this (implicit) with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionImplicitThis() {  }   /*is UNBOUND: No such class (default package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1() {  }   /*is UNBOUND: No such class (non-existent package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1a() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void staticMethod_paramLock(# final # p) {  } }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:02    INFO] Couldn't find lock DoesntExist in com.surelogic.tree.SyntaxTreeNode@27ebeb18 -- @ PolicyLocks ( { @ PolicyLock ( # ) , @ PolicyLock ( # ) , @ PolicyLock ( # ) } ) public class PolicyLock_LockNames extends java.lang.Object { public  PolicyLock_LockNames () { # }   /*is UNASSOCIATED: cannot qualify a static lock with this*/  @ RequiresLock ( # ) public void bad_thisQualified_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_typeQualified_staticLock() {  }   /*is UNASSOCIATED: type-qualified instance lock*/  @ RequiresLock ( # ) public void bad_typeQualifiedInstance() {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_doesntExist() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_implicit_this() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_explicit_this() {  }   /*is UNBOUND: Parameter doesn't exist*/  @ RequiresLock ( # ) public void bad_param_doesnt_exist(# final # o) {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_param_lock_doesnt_exist(# final # p) {  }   /* is CONSISTENT: parameter is non-final, but not changed */  @ RequiresLock ( # ) public void good_param_nonfinal(# # p) {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_param_is_good(# final # p) {  }   /*is UNASSOCIATED: cannot use 'this' on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_explicit_this() {  }   /*is UNASSOCIATED: cannot use 'this' (implicit) on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_implicit_this() {  }   /*is CONSISTENT*/  @ RequiresLock ( # ) public static void good_staticMethod_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void good_staticMethod_typeQualified_staticLock() {  }   /*is UNBOUND: static use of this with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionWithThis() {  }   /*is UNBOUND: static use of this (implicit) with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionImplicitThis() {  }   /*is UNBOUND: No such class (default package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1() {  }   /*is UNBOUND: No such class (non-existent package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1a() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void staticMethod_paramLock(# final # p) {  } }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:02    INFO] Couldn't find field NoSuchClass in com.surelogic.tree.SyntaxTreeNode@27ebeb18 -- @ PolicyLocks ( { @ PolicyLock ( # ) , @ PolicyLock ( # ) , @ PolicyLock ( # ) } ) public class PolicyLock_LockNames extends java.lang.Object { public  PolicyLock_LockNames () { # }   /*is UNASSOCIATED: cannot qualify a static lock with this*/  @ RequiresLock ( # ) public void bad_thisQualified_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_typeQualified_staticLock() {  }   /*is UNASSOCIATED: type-qualified instance lock*/  @ RequiresLock ( # ) public void bad_typeQualifiedInstance() {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_doesntExist() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_implicit_this() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_explicit_this() {  }   /*is UNBOUND: Parameter doesn't exist*/  @ RequiresLock ( # ) public void bad_param_doesnt_exist(# final # o) {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_param_lock_doesnt_exist(# final # p) {  }   /* is CONSISTENT: parameter is non-final, but not changed */  @ RequiresLock ( # ) public void good_param_nonfinal(# # p) {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_param_is_good(# final # p) {  }   /*is UNASSOCIATED: cannot use 'this' on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_explicit_this() {  }   /*is UNASSOCIATED: cannot use 'this' (implicit) on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_implicit_this() {  }   /*is CONSISTENT*/  @ RequiresLock ( # ) public static void good_staticMethod_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void good_staticMethod_typeQualified_staticLock() {  }   /*is UNBOUND: static use of this with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionWithThis() {  }   /*is UNBOUND: static use of this (implicit) with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionImplicitThis() {  }   /*is UNBOUND: No such class (default package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1() {  }   /*is UNBOUND: No such class (non-existent package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1a() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void staticMethod_paramLock(# final # p) {  } }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: [2016-01-27 14:23:02    INFO] Couldn't find field NoSuchClass in com.surelogic.tree.SyntaxTreeNode@27ebeb18 -- @ PolicyLocks ( { @ PolicyLock ( # ) , @ PolicyLock ( # ) , @ PolicyLock ( # ) } ) public class PolicyLock_LockNames extends java.lang.Object { public  PolicyLock_LockNames () { # }   /*is UNASSOCIATED: cannot qualify a static lock with this*/  @ RequiresLock ( # ) public void bad_thisQualified_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_typeQualified_staticLock() {  }   /*is UNASSOCIATED: type-qualified instance lock*/  @ RequiresLock ( # ) public void bad_typeQualifiedInstance() {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_doesntExist() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_implicit_this() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_exists_explicit_this() {  }   /*is UNBOUND: Parameter doesn't exist*/  @ RequiresLock ( # ) public void bad_param_doesnt_exist(# final # o) {  }   /* is UNBOUND: Lock doesn't exist*/  @ RequiresLock ( # ) public void bad_param_lock_doesnt_exist(# final # p) {  }   /* is CONSISTENT: parameter is non-final, but not changed */  @ RequiresLock ( # ) public void good_param_nonfinal(# # p) {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public void good_param_is_good(# final # p) {  }   /*is UNASSOCIATED: cannot use 'this' on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_explicit_this() {  }   /*is UNASSOCIATED: cannot use 'this' (implicit) on static method*/  @ RequiresLock ( # ) public static void bad_static_use_of_implicit_this() {  }   /*is CONSISTENT*/  @ RequiresLock ( # ) public static void good_staticMethod_implicit_staticLock() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void good_staticMethod_typeQualified_staticLock() {  }   /*is UNBOUND: static use of this with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionWithThis() {  }   /*is UNBOUND: static use of this (implicit) with unknown region*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownRegionImplicitThis() {  }   /*is UNBOUND: No such class (default package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1() {  }   /*is UNBOUND: No such class (non-existent package)*/  @ RequiresLock ( # ) public static void bad_staticMethod_unknownClass1a() {  }   /* is CONSISTENT */  @ RequiresLock ( # ) public static void staticMethod_paramLock(# final # p) {  } }
REMOTE: for project TestLockSanityChecks (in method edu.cmu.cs.fluid.java.bind.ClassMemberSearch.findClassBodyMembers(-) thread "pool-1-thread-1")
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: Starting analyses
REMOTE: Using new analysis framework -- groups
REMOTE: Starting group: ConcurrencyDetector, ThreadEffectsModule, StructureAnalysis, ParameterizedTypeAnalysis, EqualityAnalysis, LayersAnalysis
REMOTE: ##SUBTASK, Starting parallel ConcurrencyDetector [0]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: Starting parallel ConcurrencyDetector [0]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: ##SUBTASK, Starting parallel ThreadEffectsModule [1]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: Starting parallel ThreadEffectsModule [1]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: ##SUBTASK, Starting parallel StructureAnalysis [2]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: Starting parallel StructureAnalysis [2]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: ##SUBTASK, Starting parallel ParameterizedTypeAnalysis [3]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: Starting parallel ParameterizedTypeAnalysis [3]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: ##SUBTASK, Starting parallel EqualityAnalysis [4]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: Starting parallel EqualityAnalysis [4]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: ##SUBTASK, Starting parallel LayersAnalysis [5]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: Starting parallel LayersAnalysis [5]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Starting parallel ConcurrencyDetector [0]: 55 for TestLockSanityChecks
REMOTE: Starting parallel ConcurrencyDetector [0]: 55 for TestLockSanityChecks
REMOTE: ##SUBTASK, Starting parallel ThreadEffectsModule [1]: 55 for TestLockSanityChecks
REMOTE: Starting parallel ThreadEffectsModule [1]: 55 for TestLockSanityChecks
REMOTE: ##SUBTASK, Starting parallel StructureAnalysis [2]: 55 for TestLockSanityChecks
REMOTE: Starting parallel StructureAnalysis [2]: 55 for TestLockSanityChecks
REMOTE: ##SUBTASK, Starting parallel ParameterizedTypeAnalysis [3]: 55 for TestLockSanityChecks
REMOTE: Starting parallel ParameterizedTypeAnalysis [3]: 55 for TestLockSanityChecks
REMOTE: ##SUBTASK, Starting parallel EqualityAnalysis [4]: 55 for TestLockSanityChecks
REMOTE: Starting parallel EqualityAnalysis [4]: 55 for TestLockSanityChecks
REMOTE: ##SUBTASK, Starting parallel LayersAnalysis [5]: 55 for TestLockSanityChecks
REMOTE: Starting parallel LayersAnalysis [5]: 55 for TestLockSanityChecks
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/Grandparent.java
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_returns_lock/PLock.java
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_returns_lock/StateLock.java
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/inherited/Super.java
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/B.java
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_returns_lock/C.java
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/GoodC2.java
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/B.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/Grandparent.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_returns_lock/C.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/inherited/Super.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/GoodC2.java
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/B.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/B.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_returns_lock/PLock.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_returns_lock/StateLock.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/B.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/GoodC2.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/GoodC2.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/inherited/Super.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_returns_lock/PLock.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_returns_lock/PLock.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/GoodC2.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_returns_lock/C.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_returns_lock/C.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_returns_lock/PLock.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/B.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/B.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_returns_lock/C.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/B.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/inherited/Super.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_returns_lock/StateLock.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/Grandparent.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/Grandparent.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/B.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/Grandparent.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/B.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_returns_lock/StateLock.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/inherited/Super.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_returns_lock/StateLock.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/Grandparent.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_returns_lock/C.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_returns_lock/PLock.java
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/B.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_returns_lock/StateLock.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/B.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/GoodC2.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/inherited/Super.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Subregion/Bad3.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Subregion/Bad3.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Subregion/Bad3.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Subregion/Bad3.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Subregion/Bad3.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/Other.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/C.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/C.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Instance/Bad1.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/C.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Subregion/Bad3.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/Other.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/Other.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/Other.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/Other.java
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Instance/Bad1.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Instance/Bad1.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/Other.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/C.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/Other.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/Other.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/C.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/C.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/StateLock_visibility.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/Other1.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/Other1.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_returns_lock/C_Policy.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/unrelatedClasses/Test2.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/unrelatedClasses/Test2.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_returns_lock/C_Policy.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/Other1.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/StateLock_visibility.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/Other.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/Other.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Subregion/BadRoot2.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Subregion/BadRoot2.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Subregion/BadRoot2.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/D.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/D.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/D.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Instance/Bad1.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/Other.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Instance/Bad1.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/Other.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Instance/Bad1.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/good/Good4.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/D.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/StateLock_visibility.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/StateLock_visibility.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Subregion/BadRoot2.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Subregion/BadRoot2.java
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/Other1.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Subregion/BadRoot2.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/Other1.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/Other1.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/C_Policy.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/good/GoodRoot.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/good/GoodRoot.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/C_Policy.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/StateLock_visibility.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/C_Policy.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/C_Policy.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/C_Policy.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/C_Policy.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/StateLock_visibility.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_returns_lock/C_Policy.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_returns_lock/C_Policy.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_returns_lock/C_Policy.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_returns_lock/C_Policy.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/inherited/Duper.java
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/unrelatedClasses/Test2.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/unrelatedClasses/Test2.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/unrelatedClasses/Test2.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/unrelatedClasses/Test2.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/qualified_receivers_as_locks/Outer.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/inherited/Duper.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/qualified_receivers_as_locks/Outer.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/D.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/good/GoodRoot.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/good/GoodRoot.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/good/GoodRoot.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/good/GoodRoot.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/GoodC3.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/GoodC3.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/GoodC3.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/GoodC3.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/D.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/D.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/D.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/D.java
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/Root.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/Root.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/Root.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/Root.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/Root.java
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/good/Good4.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/Root.java
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/D.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/D.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/D.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/GoodC3.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/qualified_receivers_as_locks/Outer.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/inherited/Duper.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/inherited/Duper.java
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/C.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/sameClass/Bad.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/C.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/sameClass/Bad.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/sameClass/Bad.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/C.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/C.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/C.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/C.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/GoodC3.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/qualified_receivers_as_locks/Outer.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/qualified_receivers_as_locks/Outer.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/qualified_receivers_as_locks/Outer.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/good/Good3.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/good/Good3.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/good/Good3.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/good/Good3.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/good/Good3.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/good/Good3.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/good/Good2.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/good/Good2.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/good/Good2.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/good/Good2.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/good/Good2.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/good/Good2.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/D.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/BadC2.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/BadC2.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/BadC2.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/BadC2.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/BadC2.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/BadC2.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/good/Good4.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/good/Good4.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/good/Good4.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/good/Good4.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/D.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/D.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/D.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/D.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/LockVizJUC.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/unrelatedClasses/Test.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/unrelatedClasses/Test.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/unrelatedClasses/Test.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/unrelatedClasses/Test.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/unrelatedClasses/Test.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/unrelatedClasses/Test.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/LockVizJUC.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/baseCase/Good1.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/baseCase/Good1.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/LockVizJUC.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/LockVizJUC.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/sameClass/Bad.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/sameClass/Bad.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/inherited/Duper.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/LockVizJUC.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/sameClass/Bad.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/LockVizJUC.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/TestDuplicates.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/TestDuplicates.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/TestDuplicates.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/TestDuplicates.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/TestDuplicates.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/TestDuplicates.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/baseCase/Good1.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/baseCase/Good1.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/baseCase/Good1.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/baseCase/Good1.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Instance/BadRoot1.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Instance/BadRoot1.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Instance/BadRoot1.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Instance/BadRoot1.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Instance/BadRoot1.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Instance/BadRoot1.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/PolicyLock_Constructor.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/PolicyLock_Constructor.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/PolicyLock_Constructor.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/PolicyLock_Constructor.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/PolicyLock_Constructor.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/PolicyLock_Constructor.java
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/StateLock_Constructor.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/CannotRequireRWLock.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/StateLock_Constructor.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/CannotRequireRWLock.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/StateLock_Constructor.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/StateLock_Constructor.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/CannotRequireRWLock.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/CannotRequireRWLock.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/CannotRequireRWLock.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/CannotRequireRWLock.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/LockViz.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/ProtectInheritedRegion.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/ProtectInheritedRegion.java
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/Parent.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/ProtectInheritedRegion.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/ProtectInheritedRegion.java
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/StateVsPolicyLocks.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/ProtectInheritedRegion.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/Parent.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/ProtectInheritedRegion.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/Parent.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/Parent.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/Parent.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/TestImprovedMessages.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/Parent.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/TestImprovedMessages.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/TestImprovedMessages.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/TestImprovedMessages.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/TestImprovedMessages.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/TestImprovedMessages.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/LockViz.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/StateLock_Constructor.java
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/D.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/StateLock_Constructor.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/StateLock_LockNames.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/inherited/Duper.java
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/LockViz.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/LockViz.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Subregion/Bad2.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Subregion/Bad2.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/StateLock_LockNames.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Subregion/Bad2.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Subregion/Bad2.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/LockViz.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/StateLock_LockNames.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/StateLock_LockNames.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/LockViz.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/PolicyLock_LockNames.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/A.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/PolicyLock_LockNames.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/StateVsPolicyLocks.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/PolicyLock_LockNames.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/StateVsPolicyLocks.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/StateVsPolicyLocks.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/A.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/StateVsPolicyLocks.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/A.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/A.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/A.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/A.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/PolicyLock_visibility.java
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/GreatGrandparent.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/GreatGrandparent.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/GreatGrandparent.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/GreatGrandparent.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/StateLock_LockNames.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/GreatGrandparent.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Subregion/Bad2.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/StateLock_LockNames.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/C1.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/C1.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/C1.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/C1.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/C1.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/C1.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Subregion/Bad2.java
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/GreatGrandparent.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/BadC3.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/BadC3.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/BadC3.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/BadC3.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/BadC3.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/BadC3.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/StateVsPolicyLocks.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/PolicyLock_LockNames.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/PolicyLock_LockNames.java
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/PolicyLock_visibility.java
REMOTE: ##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/C.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/PolicyLock_LockNames.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/C.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/C.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/C.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/C.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/PolicyLock_visibility.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/PolicyLock_visibility.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/C.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/PolicyLock_visibility.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/PolicyLock_visibility.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: Starting group: UtilityAnalysis, SingletonAnalysis
REMOTE: com.surelogic.analysis.granules.FlowUnitGranulator@1eb44e46: 440
REMOTE: com.surelogic.analysis.uniqueness.classic.sideeffecting.UniquenessAnalysisModule$1@6f2b958e: 0
REMOTE: com.surelogic.analysis.visitors.TopLevelAnalysisVisitor$1@3d012ddd: 65
REMOTE: ##SUBTASK, Starting parallel UtilityAnalysis [6]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: Starting parallel UtilityAnalysis [6]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: ##SUBTASK, Starting parallel SingletonAnalysis [7]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: Starting parallel SingletonAnalysis [7]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Starting parallel UtilityAnalysis [6]: 65 for TestLockSanityChecks
REMOTE: Starting parallel UtilityAnalysis [6]: 65 for TestLockSanityChecks
REMOTE: ##SUBTASK, Starting parallel SingletonAnalysis [7]: 65 for TestLockSanityChecks
REMOTE: Starting parallel SingletonAnalysis [7]: 65 for TestLockSanityChecks
REMOTE: ##SUBTASK, Checking [ Utility class ] test_lock_field.B
REMOTE: ##SUBTASK, Checking [ Utility class ] test_unique_names.GoodC2
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] test_lock_field.B
REMOTE: ##SUBTASK, Checking [ Utility class ] test_lock_region.B
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] test_unique_names.GoodC2
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] test_lock_region.B
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] test_returns_lock.PLock
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] test_returns_lock.PLock
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] test_returns_lock.PLock.Inner
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] test_returns_lock.PLock.Inner
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] twoLocksOneRegion.inherited.Super
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] twoLocksOneRegion.inherited.Super
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] test_returns_lock.C
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] test_returns_lock.C
REMOTE: ##SUBTASK, Checking [ Utility class ] test_returns_lock.C.Inner1.Inner2
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] test_returns_lock.C.Inner1.Inner2
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] test_lock_region.Grandparent
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] test_lock_region.Grandparent
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] test_returns_lock.StateLock
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] test_returns_lock.StateLock
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] inherited_region.Subregion.Bad3
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] inherited_region.Subregion.Bad3
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] test_lock_field.Other
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] test_lock_field.Other
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] test_lock_region.C
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] test_lock_region.C
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] test_requires_lock.Other1
REMOTE: ##SUBTASK, Checking [ Utility class ] test_returns_lock.C_Policy.Inner1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] test_returns_lock.C_Policy.Inner1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] twoLocksOneRegion.unrelatedClasses.Test2
REMOTE: ##SUBTASK, Checking [ Singleton class ] test_requires_lock.Other1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] twoLocksOneRegion.unrelatedClasses.Test2
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] inherited_region.Subregion.BadRoot2
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] test_lock_region.D
REMOTE: ##SUBTASK, Checking [ Utility class ] test_returns_lock.C_Policy
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] test_returns_lock.C_Policy
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] inherited_region.good.Good4
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] inherited_region.good.Good4
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] test_requires_lock.Root
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] test_requires_lock.Root
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] test_requires_lock.C_Policy
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] test_requires_lock.C_Policy
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] test_requires_lock.C_Policy.Inner1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] test_requires_lock.C_Policy.Inner1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] test_requires_lock.StateLock_visibility
REMOTE: ##SUBTASK, Checking [ Utility class ] test_lock_region.Other
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] test_lock_region.Other
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] inherited_region.Instance.Bad1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] inherited_region.Instance.Bad1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] twoLocksOneRegion.inherited.Duper
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] twoLocksOneRegion.inherited.Duper
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] qualified_receivers_as_locks.Outer
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] qualified_receivers_as_locks.Outer
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] qualified_receivers_as_locks.Outer.Inner
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] qualified_receivers_as_locks.Outer.Inner
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] test_lock_field.D
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] test_lock_field.D
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] test_unique_names.GoodC3
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] test_unique_names.GoodC3
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] test_lock_field.C
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] test_lock_field.C
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] twoLocksOneRegion.sameClass.Bad
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] twoLocksOneRegion.sameClass.Bad
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] inherited_region.good.Good3
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] inherited_region.good.Good3
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] inherited_region.good.Good2
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] inherited_region.good.Good2
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] test_lock_region.LockVizJUC
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] test_lock_region.LockVizJUC
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] test_requires_lock.D
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] test_requires_lock.D
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] test_unique_names.BadC2
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] test_unique_names.BadC2
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] test_unique_names.StateVsPolicyLocks
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] test_unique_names.StateVsPolicyLocks
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] test_returns_lock.C.Inner1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] test_returns_lock.C.Inner1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] test_requires_lock.StateLock_Constructor
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] test_requires_lock.StateLock_Constructor
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] twoLocksOneRegion.unrelatedClasses.Test
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] twoLocksOneRegion.unrelatedClasses.Test
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] inherited_region.baseCase.Good1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] inherited_region.baseCase.Good1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] test_requires_lock.TestDuplicates
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] test_requires_lock.TestDuplicates
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] inherited_region.Instance.BadRoot1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] inherited_region.Instance.BadRoot1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] test_requires_lock.PolicyLock_Constructor
REMOTE: ##SUBTASK, Checking [ Utility class ] test_lock_region.Parent
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] test_lock_region.Parent
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] test_requires_lock.CannotRequireRWLock
REMOTE: ##SUBTASK, Checking [ Utility class ] inherited_region.good.GoodRoot
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] inherited_region.good.GoodRoot
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] test_lock_region.LockViz
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] test_lock_region.LockViz
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] test_lock_region.ProtectInheritedRegion
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] test_lock_region.ProtectInheritedRegion
REMOTE: ##SUBTASK, Checking [ Utility class ] test_requires_lock.C_Policy.Inner1.Inner2
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] test_requires_lock.C_Policy.Inner1.Inner2
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] test_requires_lock.TestImprovedMessages
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] test_requires_lock.TestImprovedMessages
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] test_requires_lock.StateLock_LockNames
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] test_requires_lock.StateLock_LockNames
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] test_lock_region.D
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] test_lock_region.GreatGrandparent
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] test_lock_region.GreatGrandparent
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] test_requires_lock.PolicyLock_LockNames
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] test_requires_lock.PolicyLock_LockNames
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] test_lock_field.A
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] test_lock_field.A
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] test_requires_lock.PolicyLock_visibility
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] test_requires_lock.PolicyLock_visibility
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] inherited_region.Subregion.BadRoot2
REMOTE: ##SUBTASK, Checking [ Utility class ] test_unique_names.BadC3
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] test_returns_lock.C_Policy.Inner1.Inner2
REMOTE: ##SUBTASK, Checking [ Utility class ] test_unique_names.C1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] test_unique_names.BadC3
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] test_requires_lock.C
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] test_requires_lock.C
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] inherited_region.Subregion.Bad2
REMOTE: ##SUBTASK, Checking [ Utility class ] test_requires_lock.C.Inner1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Utility class ] test_requires_lock.C.Inner1.Inner2
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] test_requires_lock.C.Inner1.Inner2
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] test_requires_lock.StateLock_visibility
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] test_requires_lock.CannotRequireRWLock
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] test_requires_lock.PolicyLock_Constructor
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] inherited_region.Subregion.Bad2
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] test_requires_lock.C.Inner1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] test_unique_names.C1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Singleton class ] test_returns_lock.C_Policy.Inner1.Inner2
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: Starting group: LockModelBuilder
REMOTE: ##SUBTASK, Starting parallel LockModelBuilder [8]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: Starting parallel LockModelBuilder [8]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Starting parallel LockModelBuilder [8]: 55 for TestLockSanityChecks
REMOTE: Starting parallel LockModelBuilder [8]: 55 for TestLockSanityChecks
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/B.java
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/GoodC2.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/B.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_returns_lock/PLock.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/inherited/Super.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_returns_lock/C.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/Grandparent.java
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Subregion/Bad3.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/Other.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/Other.java
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/Other1.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_returns_lock/C_Policy.java
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/unrelatedClasses/Test2.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/D.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/good/Good4.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/Root.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/C_Policy.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/good/GoodRoot.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/inherited/Duper.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/qualified_receivers_as_locks/Outer.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/D.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/GoodC3.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/C.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/sameClass/Bad.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/good/Good3.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/good/Good2.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/LockVizJUC.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/D.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/BadC2.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/StateVsPolicyLocks.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/Parent.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/StateLock_Constructor.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/unrelatedClasses/Test.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/baseCase/Good1.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/TestDuplicates.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Instance/BadRoot1.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/PolicyLock_Constructor.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/CannotRequireRWLock.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/LockViz.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/ProtectInheritedRegion.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/TestImprovedMessages.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/StateLock_LockNames.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Subregion/Bad2.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/GreatGrandparent.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/PolicyLock_LockNames.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/A.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/PolicyLock_visibility.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/BadC3.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/C1.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/C.java
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/StateLock_visibility.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Instance/Bad1.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/C.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_returns_lock/StateLock.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Lock Model Builder ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Subregion/BadRoot2.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: Starting group: ThreadSafeAnalysis
REMOTE: ##SUBTASK, Starting parallel ThreadSafeAnalysis [9]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: Starting parallel ThreadSafeAnalysis [9]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Starting parallel ThreadSafeAnalysis [9]: 65 for TestLockSanityChecks
REMOTE: Starting parallel ThreadSafeAnalysis [9]: 65 for TestLockSanityChecks
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] test_lock_field.B
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] test_unique_names.GoodC2
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] test_lock_region.B
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] test_returns_lock.PLock
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] test_returns_lock.PLock.Inner
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] twoLocksOneRegion.inherited.Super
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] test_returns_lock.C
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] test_returns_lock.C.Inner1.Inner2
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] test_lock_region.Grandparent
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] test_returns_lock.StateLock
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] test_returns_lock.C.Inner1
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] test_lock_field.Other
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] inherited_region.Subregion.Bad3
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] test_lock_region.Other
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] test_requires_lock.StateLock_visibility
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] test_requires_lock.Other1
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] test_lock_region.C
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] test_returns_lock.C_Policy.Inner1.Inner2
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] twoLocksOneRegion.unrelatedClasses.Test2
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] inherited_region.Subregion.BadRoot2
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] test_returns_lock.C_Policy
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] inherited_region.good.Good4
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] test_requires_lock.Root
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] inherited_region.Instance.Bad1
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] test_requires_lock.C_Policy
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] test_requires_lock.C_Policy.Inner1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] inherited_region.good.GoodRoot
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] qualified_receivers_as_locks.Outer
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] qualified_receivers_as_locks.Outer.Inner
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] test_lock_field.D
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] test_lock_region.D
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] test_returns_lock.C_Policy.Inner1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] test_lock_field.C
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] twoLocksOneRegion.inherited.Duper
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] test_requires_lock.C_Policy.Inner1.Inner2
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] inherited_region.good.Good3
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] inherited_region.good.Good2
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] test_lock_region.LockVizJUC
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] test_requires_lock.D
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] twoLocksOneRegion.sameClass.Bad
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] test_unique_names.BadC2
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] test_unique_names.GoodC3
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] test_unique_names.StateVsPolicyLocks
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] test_lock_region.Parent
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] test_requires_lock.StateLock_Constructor
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] inherited_region.baseCase.Good1
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] test_requires_lock.TestDuplicates
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] inherited_region.Instance.BadRoot1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] test_requires_lock.CannotRequireRWLock
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] test_lock_region.ProtectInheritedRegion
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] test_requires_lock.TestImprovedMessages
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] test_requires_lock.StateLock_LockNames
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] test_lock_region.LockViz
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] test_lock_region.GreatGrandparent
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] test_requires_lock.PolicyLock_Constructor
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] test_requires_lock.PolicyLock_LockNames
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] test_lock_field.A
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] test_requires_lock.PolicyLock_visibility
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] test_unique_names.BadC3
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] twoLocksOneRegion.unrelatedClasses.Test
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] test_unique_names.C1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] test_requires_lock.C.Inner1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] inherited_region.Subregion.Bad2
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] test_requires_lock.C.Inner1.Inner2
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ ThreadSafe / Containable / Immutable ] test_requires_lock.C
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: Starting group: NewLockAnalysis
REMOTE: ##SUBTASK, Starting parallel NewLockAnalysis [10]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: Starting parallel NewLockAnalysis [10]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Starting parallel NewLockAnalysis [10]: 55 for TestLockSanityChecks
REMOTE: Starting parallel NewLockAnalysis [10]: 55 for TestLockSanityChecks
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/B.java
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/GoodC2.java
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/B.java
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_returns_lock/PLock.java
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/inherited/Super.java
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_returns_lock/C.java
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/Grandparent.java
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_returns_lock/StateLock.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Subregion/Bad3.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/C.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Instance/Bad1.java
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/Other.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/Other.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/StateLock_visibility.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/Other1.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_returns_lock/C_Policy.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/unrelatedClasses/Test2.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Subregion/BadRoot2.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/D.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/good/Good4.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/Root.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/C_Policy.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/good/GoodRoot.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/inherited/Duper.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/qualified_receivers_as_locks/Outer.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/D.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/GoodC3.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/C.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/sameClass/Bad.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/good/Good3.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/good/Good2.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/LockVizJUC.java
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/D.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/BadC2.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/StateVsPolicyLocks.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/Parent.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/StateLock_Constructor.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/unrelatedClasses/Test.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/baseCase/Good1.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/TestDuplicates.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Instance/BadRoot1.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/PolicyLock_Constructor.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/CannotRequireRWLock.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/LockViz.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/ProtectInheritedRegion.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/TestImprovedMessages.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/StateLock_LockNames.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Subregion/Bad2.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/PolicyLock_LockNames.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/A.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/PolicyLock_visibility.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/BadC3.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/C1.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/C.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ New Lock policy ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/GreatGrandparent.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: Starting group: EffectsAnalysis
REMOTE: ##SUBTASK, Starting parallel EffectsAnalysis [11]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: Starting parallel EffectsAnalysis [11]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Starting parallel EffectsAnalysis [11]: 65 for TestLockSanityChecks
REMOTE: Starting parallel EffectsAnalysis [11]: 65 for TestLockSanityChecks
REMOTE: ##SUBTASK, Checking [ Region effects ] test_lock_field.B
REMOTE: ##SUBTASK, Checking [ Region effects ] test_unique_names.GoodC2
REMOTE: ##SUBTASK, Checking [ Region effects ] test_lock_region.B
REMOTE: ##SUBTASK, Checking [ Region effects ] test_returns_lock.PLock
REMOTE: ##SUBTASK, Checking [ Region effects ] test_returns_lock.PLock.Inner
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Region effects ] twoLocksOneRegion.inherited.Super
REMOTE: ##SUBTASK, Checking [ Region effects ] test_returns_lock.C
REMOTE: ##SUBTASK, Checking [ Region effects ] test_returns_lock.C.Inner1.Inner2
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Region effects ] test_returns_lock.StateLock
REMOTE: ##SUBTASK, Checking [ Region effects ] test_lock_region.Grandparent
REMOTE: ##SUBTASK, Checking [ Region effects ] test_returns_lock.C.Inner1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Region effects ] inherited_region.Subregion.Bad3
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Region effects ] test_lock_field.Other
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Region effects ] test_lock_region.C
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Region effects ] inherited_region.Instance.Bad1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Region effects ] test_requires_lock.StateLock_visibility
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Region effects ] test_lock_region.Other
REMOTE: ##SUBTASK, Checking [ Region effects ] test_returns_lock.C_Policy
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Region effects ] test_requires_lock.Other1
REMOTE: ##SUBTASK, Checking [ Region effects ] test_returns_lock.C_Policy.Inner1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Region effects ] test_returns_lock.C_Policy.Inner1.Inner2
REMOTE: ##SUBTASK, Checking [ Region effects ] inherited_region.Subregion.BadRoot2
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Region effects ] test_lock_region.D
REMOTE: ##SUBTASK, Checking [ Region effects ] inherited_region.good.Good4
REMOTE: ##SUBTASK, Checking [ Region effects ] twoLocksOneRegion.unrelatedClasses.Test2
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Region effects ] test_requires_lock.Root
REMOTE: ##SUBTASK, Checking [ Region effects ] test_requires_lock.C_Policy
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Region effects ] inherited_region.good.GoodRoot
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Region effects ] twoLocksOneRegion.inherited.Duper
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Region effects ] test_requires_lock.C_Policy.Inner1.Inner2
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Region effects ] test_requires_lock.C_Policy.Inner1
REMOTE: ##SUBTASK, Checking [ Region effects ] test_lock_field.D
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Region effects ] qualified_receivers_as_locks.Outer.Inner
REMOTE: ##SUBTASK, Checking [ Region effects ] test_unique_names.GoodC3
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Region effects ] test_lock_field.C
REMOTE: ##SUBTASK, Checking [ Region effects ] qualified_receivers_as_locks.Outer
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Region effects ] twoLocksOneRegion.sameClass.Bad
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Region effects ] inherited_region.good.Good3
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Region effects ] inherited_region.good.Good2
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Region effects ] test_lock_region.LockVizJUC
REMOTE: ##SUBTASK, Checking [ Region effects ] test_requires_lock.D
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Region effects ] test_unique_names.BadC2
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Region effects ] test_unique_names.StateVsPolicyLocks
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Region effects ] test_lock_region.Parent
REMOTE: ##SUBTASK, Checking [ Region effects ] test_requires_lock.StateLock_Constructor
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Region effects ] twoLocksOneRegion.unrelatedClasses.Test
REMOTE: ##SUBTASK, Checking [ Region effects ] test_requires_lock.TestDuplicates
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Region effects ] inherited_region.Instance.BadRoot1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Region effects ] test_requires_lock.PolicyLock_Constructor
REMOTE: ##SUBTASK, Checking [ Region effects ] inherited_region.baseCase.Good1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Region effects ] test_requires_lock.CannotRequireRWLock
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Region effects ] test_lock_region.LockViz
REMOTE: ##SUBTASK, Checking [ Region effects ] test_lock_region.ProtectInheritedRegion
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Region effects ] test_requires_lock.TestImprovedMessages
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Region effects ] test_requires_lock.StateLock_LockNames
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Region effects ] inherited_region.Subregion.Bad2
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Region effects ] test_lock_region.GreatGrandparent
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Region effects ] test_requires_lock.PolicyLock_LockNames
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Region effects ] test_lock_field.A
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Region effects ] test_requires_lock.PolicyLock_visibility
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Region effects ] test_unique_names.BadC3
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Region effects ] test_unique_names.C1
REMOTE: ##SUBTASK, Checking [ Region effects ] test_requires_lock.C
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Region effects ] test_requires_lock.C.Inner1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Region effects ] test_requires_lock.C.Inner1.Inner2
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: Starting group: UniquenessAnalysisModule
REMOTE: ##SUBTASK, Starting parallel UniquenessAnalysisModule [12]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: Starting parallel UniquenessAnalysisModule [12]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Starting parallel UniquenessAnalysisModule [12]: 0 for TestLockSanityChecks
REMOTE: Starting parallel UniquenessAnalysisModule [12]: 0 for TestLockSanityChecks
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: Starting group: NullablePreprocessorModule
REMOTE: ##SUBTASK, Starting parallel NullablePreprocessorModule [13]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: Starting parallel NullablePreprocessorModule [13]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Starting parallel NullablePreprocessorModule [13]: 55 for TestLockSanityChecks
REMOTE: Starting parallel NullablePreprocessorModule [13]: 55 for TestLockSanityChecks
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/B.java
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/B.java
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/GoodC2.java
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_returns_lock/PLock.java
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/inherited/Super.java
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_returns_lock/C.java
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/Grandparent.java
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_returns_lock/StateLock.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Subregion/Bad3.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Instance/Bad1.java
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/Other.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/StateLock_visibility.java
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/C.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/Other.java
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/Other1.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_returns_lock/C_Policy.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Subregion/BadRoot2.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/unrelatedClasses/Test2.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/C_Policy.java
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/good/GoodRoot.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/Root.java
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/qualified_receivers_as_locks/Outer.java
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/good/Good4.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/D.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/GoodC3.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/D.java
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/inherited/Duper.java
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/sameClass/Bad.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/C.java
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/LockVizJUC.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/good/Good2.java
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/good/Good3.java
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/BadC2.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/D.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/Parent.java
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/StateVsPolicyLocks.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/twoLocksOneRegion/unrelatedClasses/Test.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/StateLock_Constructor.java
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Instance/BadRoot1.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/PolicyLock_Constructor.java
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/TestDuplicates.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/baseCase/Good1.java
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/CannotRequireRWLock.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/GreatGrandparent.java
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/inherited_region/Subregion/Bad2.java
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/StateLock_LockNames.java
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/TestImprovedMessages.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/ProtectInheritedRegion.java
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_region/LockViz.java
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_lock_field/A.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/PolicyLock_LockNames.java
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/BadC3.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_unique_names/C1.java
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/PolicyLock_visibility.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestLockSanityChecks/src/test_requires_lock/C.java
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: Starting group: NullableModule2
REMOTE: ##SUBTASK, Starting parallel NullableModule2 [14]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: Starting parallel NullableModule2 [14]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Starting parallel NullableModule2 [14]: 440 for TestLockSanityChecks
REMOTE: Starting parallel NullableModule2 [14]: 440 for TestLockSanityChecks
REMOTE: ##SUBTASK, Checking [ Nullable ] test_lock_field.B.B()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_lock_field.B.<clinit>
REMOTE: ##SUBTASK, Checking [ Nullable ] test_unique_names.GoodC2.GoodC2()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_unique_names.GoodC2.<clinit>
REMOTE: ##SUBTASK, Checking [ Nullable ] test_lock_region.B.B()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_lock_region.B.<clinit>
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.PLock.PLock()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.PLock.getLock_thisQualified_staticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.PLock.getLock_typeQualified_staticLock()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.PLock.getLock_implicit_staticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.PLock.getLock_doesntExist()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.PLock.getLock_exists()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.PLock.getLock_exists2()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.PLock.getLock_bad_param(java.lang.Object)
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.PLock.getLock_param_doesntExist(test_returns_lock.PLock)
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.PLock.getLock_param_nonfinal(test_returns_lock.PLock)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.PLock.getLock_param_good(test_returns_lock.PLock)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.PLock.getLock_staticMethod_instanceRegion1()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.PLock.getLock_staticMethod_instanceRegion1a()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.PLock.getLock_staticMethod_staticRegion1a()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.PLock.getLock_staticMethod_unknownRegion()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.PLock.getLock_staticMethod_unknownRegionWithThis()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.PLock.getLock_staticMethod_unknownClass1a()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.PLock.getLock_staticMethod_staticRegion1()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.PLock.getLock_staticMethod_unknownClass1()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.PLock.getLock_staticMethod_paramLock(test_returns_lock.PLock)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.PLock.Inner.getLock_innerClassMethod_qualifiedThis_staticLock()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.PLock.Inner.Inner()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.PLock.Inner.getLock_innerClassMethod_qualifiedThis_nonStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.PLock.Inner.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.PLock.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] twoLocksOneRegion.inherited.Super.Super()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] twoLocksOneRegion.inherited.Super.<clinit>
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.C.C()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.C.getLock()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.C.getLock(test_returns_lock.C)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.C.getLock2()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.C.getInstanceLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.C.getInstanceLock(test_returns_lock.C)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.C.Inner1.Inner1()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.C.Inner1.Inner2.Inner2()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.C.Inner1.Inner2.getLock_good()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.C.Inner1.Inner2.getLock_bad()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.C.Inner1.Inner2.getInnerLock_good()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.C.Inner1.Inner2.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.C.Inner1.getLock_good()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.C.Inner1.getLock_badQualifiedReceiver()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.C.Inner1.getLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.C.Inner1.getLock2()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.C.Inner1.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_lock_region.Grandparent.Grandparent()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_lock_region.Grandparent.<clinit>
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.C.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.StateLock.StateLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.StateLock.getLock_thisQualified_staticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.StateLock.getLock_typeQualified_staticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.StateLock.getLock_typeQualifiedInstance()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.StateLock.getLock_doesntExist()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.StateLock.getLock_exists()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.StateLock.getLock_implicit_staticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.StateLock.getLock_exists2()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.StateLock.getLock_bad_param(java.lang.Object)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.StateLock.getLock_param_doesntExist(test_returns_lock.StateLock)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.StateLock.getLock_param_nonfinal(test_returns_lock.StateLock)
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.StateLock.getLock_param_good(test_returns_lock.StateLock)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.StateLock.getLock_staticMethod_instanceRegion1()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.StateLock.getLock_staticMethod_instanceRegion1a()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.StateLock.getLock_staticMethod_staticRegion1()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.StateLock.getLock_staticMethod_unknownRegionWithThis()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.StateLock.getLock_staticMethod_unknownRegion()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.StateLock.getLock_staticMethod_staticRegion1a()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.StateLock.getLock_staticMethod_unknownClass1()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.StateLock.getLock_staticMethod_unknownClass1a()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.StateLock.getLock_staticMethod_paramLock(test_returns_lock.StateLock)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.StateLock.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] inherited_region.Subregion.Bad3.Bad3()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_lock_field.Other.Other()
REMOTE: ##SUBTASK, Checking [ Nullable ] inherited_region.Subregion.Bad3.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_lock_field.Other.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_lock_region.C.C()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_lock_region.C.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] inherited_region.Instance.Bad1.Bad1()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] inherited_region.Instance.Bad1.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_lock_region.Other.Other()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_lock_region.Other.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.good_privateMethod_privateLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.good_privateMethod_defaultLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.good_privateMethod_protectedLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.good_privateMethod_publicLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.bad_defaultMethod_privateLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.good_defaultMethod_protectedLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.bad_protectedMethod_privateLock()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.good_defaultMethod_defaultLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.bad_protectedMethod_defaultLock()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.good_protectedMethod_protectedLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.bad_publicMethod_privateLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.good_defaultMethod_publicLock()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.bad_publicMethod_defaultLock()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.good_protectedMethod_publicLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.bad_publicMethod_protectedLock()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.good_publicMethod_publicLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.good_privateStaticMethod_privateStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.good_privateStaticMethod_protectedStaticLock()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.good_privateStaticMethod_publicStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.bad_defaultStaticMethod_privateStaticLock()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.good_defaultStaticMethod_defaultStaticLock()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.good_privateStaticMethod_defaultStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.good_defaultStaticMethod_publicStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.bad_protectedStaticMethod_privateStaticLock()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.bad_protectedStaticMethod_defaultStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.good_protectedStaticMethod_protectedStaticLock()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.good_defaultStaticMethod_protectedStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.bad_publicStaticMethod_privateStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.bad_publicStaticMethod_protectedStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.good_publicStaticMethod_publicStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.good_privateMethod_privateStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.good_privateMethod_defaultStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.good_privateMethod_protectedStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.good_privateMethod_publicStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.bad_defaultMethod_privateStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.good_defaultMethod_defaultStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.good_defaultMethod_protectedStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.good_defaultMethod_publicStaticLock()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.bad_protectedMethod_privateStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.bad_protectedMethod_defaultStaticLock()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.good_protectedMethod_protectedStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.good_protectedMethod_publicStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.good_protectedStaticMethod_publicStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.bad_publicMethod_privateStaticLock()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.bad_publicMethod_protectedStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.good_publicMethod_publicStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.bad_publicStaticMethod_defaultStaticLock()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.StateLock_visibility(boolean,boolean)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.StateLock_visibility(boolean,int)
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.StateLock_visibility(boolean,float)
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.StateLock_visibility(boolean,java.lang.Object)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.StateLock_visibility(int,boolean)
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.bad_publicMethod_defaultStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.StateLock_visibility(int,float)
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.StateLock_visibility(int,int)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.StateLock_visibility(int,java.lang.Object)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.StateLock_visibility(float,boolean)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.StateLock_visibility(float,int)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.StateLock_visibility(float,float)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.StateLock_visibility(float,java.lang.Object)
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.StateLock_visibility(java.lang.Object,boolean)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.StateLock_visibility(java.lang.Object,int)
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.StateLock_visibility(java.lang.Object,float)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.StateLock_visibility(java.lang.Object,java.lang.Object)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.good_parameterTest(test_requires_lock.StateLock_visibility)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.good_otherClassTest1()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.good_otherClassTest2()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.StateLock_visibility(int,int,int)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.good_ancestorClassTest1()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.good_ancestorClassTest2()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.StateLock_visibility(int,int,int,int)
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_visibility.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.Other1.Other1()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.Other1.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.C_Policy.C_Policy()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.C_Policy.getLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.C_Policy.getLock(test_returns_lock.C_Policy)
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.C_Policy.getLock2()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.C_Policy.getInstanceLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.C_Policy.getInstanceLock(test_returns_lock.C_Policy)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.C_Policy.Inner1.Inner1()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.C_Policy.Inner1.Inner2.Inner2()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.C_Policy.Inner1.Inner2.getLock_good()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.C_Policy.Inner1.Inner2.getLock_bad()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.C_Policy.Inner1.Inner2.getInnerLock_good()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.C_Policy.Inner1.Inner2.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.C_Policy.Inner1.getLock_good()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.C_Policy.Inner1.getLock_badQualifiedReceiver()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.C_Policy.Inner1.getLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.C_Policy.Inner1.getLock2()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.C_Policy.Inner1.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_returns_lock.C_Policy.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] twoLocksOneRegion.unrelatedClasses.Test2.Test2()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] twoLocksOneRegion.unrelatedClasses.Test2.<clinit>
REMOTE: ##SUBTASK, Checking [ Nullable ] inherited_region.Subregion.BadRoot2.BadRoot2()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] inherited_region.Subregion.BadRoot2.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_lock_region.D.D()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_lock_region.D.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] inherited_region.good.Good4.Good4()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] inherited_region.good.Good4.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.Root.Root()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.Root.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.C_Policy.C_Policy()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.C_Policy.bad1()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.C_Policy.bad2(test_requires_lock.C_Policy)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.C_Policy.good1()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.C_Policy.good2()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.C_Policy.good3(test_requires_lock.C_Policy)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.C_Policy.Inner1.Inner1()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.C_Policy.Inner1.Inner2.Inner2()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.C_Policy.Inner1.Inner2.good1()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.C_Policy.Inner1.Inner2.getInnerLock_good()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.C_Policy.Inner1.Inner2.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.C_Policy.Inner1.good1()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.C_Policy.Inner1.bad1()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.C_Policy.Inner1.bad2()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.C_Policy.Inner1.good2()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.C_Policy.Inner1.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.C_Policy.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] inherited_region.good.GoodRoot.GoodRoot()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] inherited_region.good.GoodRoot.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] twoLocksOneRegion.inherited.Duper.Duper()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] twoLocksOneRegion.inherited.Duper.worse()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] twoLocksOneRegion.inherited.Duper.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] qualified_receivers_as_locks.Outer.Outer()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] qualified_receivers_as_locks.Outer.Inner.Inner()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] qualified_receivers_as_locks.Outer.Inner.set(int)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] qualified_receivers_as_locks.Outer.Inner.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] qualified_receivers_as_locks.Outer.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_lock_field.D.D()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_lock_field.D.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_unique_names.GoodC3.GoodC3()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_unique_names.GoodC3.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_lock_field.C.C()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] twoLocksOneRegion.sameClass.Bad.Bad()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] twoLocksOneRegion.sameClass.Bad.<clinit>
REMOTE: ##SUBTASK, Checking [ Nullable ] test_lock_field.C.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] inherited_region.good.Good3.Good3()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] inherited_region.good.Good3.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] inherited_region.good.Good2.Good2()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] inherited_region.good.Good2.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_lock_region.LockVizJUC.LockVizJUC()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_lock_region.LockVizJUC.getPrivateMadeDefault1()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_lock_region.LockVizJUC.getPrivateMadeDefault2()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_lock_region.LockVizJUC.getPrivateMadeProtected1()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_lock_region.LockVizJUC.getPrivateMadeProtected2()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_lock_region.LockVizJUC.getPrivateMadeProtected3()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_lock_region.LockVizJUC.getPrivateMadePublic1()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_lock_region.LockVizJUC.getPrivateMadePublic2()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_lock_region.LockVizJUC.getPrivateMadePublic3()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_lock_region.LockVizJUC.getPrivateMadePublic4()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_lock_region.LockVizJUC.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.D.D()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.D.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_unique_names.BadC2.BadC2()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_unique_names.BadC2.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_unique_names.StateVsPolicyLocks.StateVsPolicyLocks()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_unique_names.StateVsPolicyLocks.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_lock_region.Parent.Parent()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_lock_region.Parent.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_Constructor.StateLock_Constructor(int)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_Constructor.StateLock_Constructor(int,int)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_Constructor.StateLock_Constructor(test_requires_lock.StateLock_Constructor)
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_Constructor.StateLock_Constructor(int,int,int)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_Constructor.StateLock_Constructor(int,int,int,int)
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_Constructor.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] twoLocksOneRegion.unrelatedClasses.Test.Test()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] twoLocksOneRegion.unrelatedClasses.Test.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] inherited_region.baseCase.Good1.Good1()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] inherited_region.baseCase.Good1.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.TestDuplicates.TestDuplicates()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.TestDuplicates.set1(int)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.TestDuplicates.set2(int)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.TestDuplicates.bad()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.TestDuplicates.goodStatic1()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.TestDuplicates.goodStatic2()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.TestDuplicates.badStatic1()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.TestDuplicates.goodStatic10()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.TestDuplicates.goodStatic11()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.TestDuplicates.goodStatic12()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.TestDuplicates.good100(test_requires_lock.TestDuplicates)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.TestDuplicates.good101(test_requires_lock.TestDuplicates,test_requires_lock.Other1)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.TestDuplicates.get()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.TestDuplicates.bad(test_requires_lock.TestDuplicates)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.TestDuplicates.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] inherited_region.Instance.BadRoot1.BadRoot1()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] inherited_region.Instance.BadRoot1.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_Constructor.PolicyLock_Constructor(int)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_Constructor.PolicyLock_Constructor(int,int)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_Constructor.PolicyLock_Constructor(test_requires_lock.PolicyLock_Constructor)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_Constructor.PolicyLock_Constructor(int,int,int)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_Constructor.PolicyLock_Constructor(int,int,int,int)
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_Constructor.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.CannotRequireRWLock.CannotRequireRWLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.CannotRequireRWLock.bad()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.CannotRequireRWLock.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_lock_region.LockViz.LockViz()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_lock_region.LockViz.getPrivateMadeDefault1()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_lock_region.LockViz.getPrivateMadeDefault2()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_lock_region.LockViz.getPrivateMadeProtected1()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_lock_region.LockViz.getPrivateMadeProtected2()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_lock_region.LockViz.getPrivateMadeProtected3()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_lock_region.LockViz.getPrivateMadePublic1()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_lock_region.LockViz.getPrivateMadePublic2()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_lock_region.LockViz.getPrivateMadePublic3()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_lock_region.LockViz.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_lock_region.ProtectInheritedRegion.ProtectInheritedRegion()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_lock_region.LockViz.getPrivateMadePublic4()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_lock_region.ProtectInheritedRegion.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.TestImprovedMessages.TestImprovedMessages()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.TestImprovedMessages.bad(test_requires_lock.TestImprovedMessages)
REMOTE: [GC (Allocation Failure)  154008K->70130K(180736K), 0.0140990 secs]
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.TestImprovedMessages.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_LockNames.StateLock_LockNames()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_LockNames.bad_thisQualified_staticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_LockNames.good_implicit_staticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_LockNames.good_typeQualified_staticLock()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_LockNames.bad_typeQualifiedInstance()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_LockNames.bad_doesntExist()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_LockNames.good_exists_implicit_this()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_LockNames.good_exists_explicit_this()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_LockNames.bad_param_doesnt_exist(java.lang.Object)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_LockNames.bad_param_lock_doesnt_exist(test_requires_lock.StateLock_LockNames)
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_LockNames.good_param_nonfinal(test_requires_lock.StateLock_LockNames)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_LockNames.good_param_is_good(test_requires_lock.StateLock_LockNames)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_LockNames.bad_static_use_of_explicit_this()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_LockNames.good_staticMethod_implicit_staticLock()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_LockNames.good_staticMethod_typeQualified_staticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_LockNames.bad_staticMethod_unknownRegionWithThis()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_LockNames.bad_staticMethod_unknownRegionImplicitThis()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_LockNames.bad_static_use_of_implicit_this()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_LockNames.bad_staticMethod_unknownClass1()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_LockNames.bad_staticMethod_unknownClass1a()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_LockNames.staticMethod_paramLock(test_requires_lock.StateLock_LockNames)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.StateLock_LockNames.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] inherited_region.Subregion.Bad2.Bad2()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] inherited_region.Subregion.Bad2.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_lock_region.GreatGrandparent.GreatGrandparent()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_lock_region.GreatGrandparent.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_LockNames.PolicyLock_LockNames()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_LockNames.bad_thisQualified_staticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_LockNames.good_implicit_staticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_LockNames.good_typeQualified_staticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_LockNames.bad_typeQualifiedInstance()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_LockNames.bad_doesntExist()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_LockNames.good_exists_implicit_this()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_LockNames.good_exists_explicit_this()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_LockNames.bad_param_doesnt_exist(java.lang.Object)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_LockNames.bad_param_lock_doesnt_exist(test_requires_lock.PolicyLock_LockNames)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_LockNames.good_param_nonfinal(test_requires_lock.PolicyLock_LockNames)
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_LockNames.good_param_is_good(test_requires_lock.PolicyLock_LockNames)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_LockNames.bad_static_use_of_explicit_this()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_LockNames.bad_static_use_of_implicit_this()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_LockNames.good_staticMethod_implicit_staticLock()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_LockNames.good_staticMethod_typeQualified_staticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_LockNames.bad_staticMethod_unknownRegionWithThis()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_LockNames.bad_staticMethod_unknownRegionImplicitThis()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_LockNames.bad_staticMethod_unknownClass1()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_LockNames.bad_staticMethod_unknownClass1a()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_LockNames.staticMethod_paramLock(test_requires_lock.PolicyLock_LockNames)
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_LockNames.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_lock_field.A.A()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_lock_field.A.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.good_privateMethod_privateLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.good_privateMethod_protectedLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.good_privateMethod_publicLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.bad_defaultMethod_privateLock()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.good_defaultMethod_defaultLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.good_defaultMethod_protectedLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.good_defaultMethod_publicLock()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.good_privateMethod_defaultLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.bad_protectedMethod_privateLock()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.bad_protectedMethod_defaultLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.good_protectedMethod_protectedLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.bad_publicMethod_privateLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.bad_publicMethod_defaultLock()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.bad_publicMethod_protectedLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.good_publicMethod_publicLock()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.good_protectedMethod_publicLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.good_privateStaticMethod_privateStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.good_privateStaticMethod_defaultStaticLock()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.good_privateStaticMethod_protectedStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.good_privateStaticMethod_publicStaticLock()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.bad_defaultStaticMethod_privateStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.good_defaultStaticMethod_defaultStaticLock()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.good_defaultStaticMethod_protectedStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.bad_protectedStaticMethod_privateStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.bad_protectedStaticMethod_defaultStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.good_protectedStaticMethod_protectedStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.good_protectedStaticMethod_publicStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.bad_publicStaticMethod_privateStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.bad_publicStaticMethod_defaultStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.bad_publicStaticMethod_protectedStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.good_publicStaticMethod_publicStaticLock()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.good_privateMethod_privateStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.good_privateMethod_defaultStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.good_privateMethod_protectedStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.good_privateMethod_publicStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.bad_defaultMethod_privateStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.good_defaultMethod_defaultStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.good_defaultMethod_protectedStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.bad_protectedMethod_privateStaticLock()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.bad_protectedMethod_defaultStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.good_protectedMethod_protectedStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.good_protectedMethod_publicStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.bad_publicMethod_privateStaticLock()
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.bad_publicMethod_defaultStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.bad_publicMethod_protectedStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.good_publicMethod_publicStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.good_defaultStaticMethod_publicStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.PolicyLock_visibility(boolean,int)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.PolicyLock_visibility(boolean,float)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.PolicyLock_visibility(boolean,java.lang.Object)
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.PolicyLock_visibility(boolean,boolean)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.PolicyLock_visibility(int,boolean)
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.good_defaultMethod_publicStaticLock()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.PolicyLock_visibility(int,int)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.PolicyLock_visibility(int,float)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.PolicyLock_visibility(int,java.lang.Object)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.PolicyLock_visibility(float,boolean)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.PolicyLock_visibility(float,int)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.PolicyLock_visibility(float,float)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.PolicyLock_visibility(float,java.lang.Object)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.PolicyLock_visibility(java.lang.Object,boolean)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.PolicyLock_visibility(java.lang.Object,int)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.PolicyLock_visibility(java.lang.Object,float)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.PolicyLock_visibility(java.lang.Object,java.lang.Object)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.good_parameterTest(test_requires_lock.PolicyLock_visibility)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.good_otherClassTest1()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.good_otherClassTest2()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.PolicyLock_visibility(int,int,int)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.good_ancestorClassTest1()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.good_ancestorClassTest2()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.PolicyLock_visibility(int,int,int,int)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.PolicyLock_visibility.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_unique_names.BadC3.BadC3()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_unique_names.BadC3.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_unique_names.C1.C1()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_unique_names.C1.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.C.C()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.C.bad1()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.C.bad2(test_requires_lock.C)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.C.good1()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.C.good2()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.C.good3(test_requires_lock.C)
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.C.Inner1.Inner1()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.C.Inner1.Inner2.Inner2()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.C.Inner1.Inner2.good1()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.C.Inner1.Inner2.getInnerLock_good()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.C.Inner1.Inner2.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.C.Inner1.good1()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.C.Inner1.bad1()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.C.Inner1.bad2()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.C.Inner1.good2()
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.C.Inner1.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Checking [ Nullable ] test_requires_lock.C.<clinit>
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK_DONE
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: ##SUBTASK, Cleaning up after analysis
REMOTE: Cleaning up after analysis
REMOTE: [GC (System.gc())  90056K->70959K(190976K), 0.0155420 secs]
REMOTE: [Full GC (System.gc())  70959K->45106K(190976K), 0.1639770 secs]
REMOTE: ##WORK, 1
REMOTE: ##SUBTASK_DONE
REMOTE: Updating consistency proof
REMOTE: ##SUBTASK, Updating consistency proof
REMOTE: Exporting results to TestLockSanityChecks-2016.01.27-at-14.22.56.811
REMOTE: ##SUBTASK, Exporting results to TestLockSanityChecks-2016.01.27-at-14.22.56.811
REMOTE: Creating snapshot: /Users/aarong/Work/Eclipse-Workspaces/Eclipse-luna/Fluid Regression/.jsure-data/TestLockSanityChecks-2016.01.27-at-14.22.56.811/running_or_crashed_sea_snapshot.xml.gz
REMOTE: [GC (Allocation Failure)  140338K->54920K(192512K), 0.0087070 secs]
REMOTE: Done in 5595 ms.
REMOTE: ConcurrencyDetector	: 34 ms
REMOTE: ThreadEffectsModule	: 18 ms
REMOTE: StructureAnalysis	: 3 ms
REMOTE: ParameterizedTypeAnalysis	: 13 ms
REMOTE: EqualityAnalysis	: 64 ms
REMOTE: LayersAnalysis	: 178 ms
REMOTE: UtilityAnalysis	: 1 ms
REMOTE: SingletonAnalysis	: 1 ms
REMOTE: LockModelBuilder	: 46 ms
REMOTE: ThreadSafeAnalysis	: 0 ms
REMOTE: NewLockAnalysis	: 1614 ms
REMOTE: EffectsAnalysis	: 67 ms
REMOTE: UniquenessAnalysisModule	: 2 ms
REMOTE: NullablePreprocessorModule	: 42 ms
REMOTE: NullableModule2	: 1891 ms
REMOTE: [2016-01-27 14:23:04    INFO] partial bindings = 10448 (in method edu.cmu.cs.fluid.java.bind.AbstractJavaBinder.printStats(-) thread "main")
REMOTE: [2016-01-27 14:23:04    INFO] full bindings = 2907 (in method edu.cmu.cs.fluid.java.bind.AbstractJavaBinder.printStats(-) thread "main")
REMOTE: cached = 0
REMOTE: totalT = 0
REMOTE: #Performance data for TestLockSanityChecks
REMOTE: #Wed Jan 27 14:23:04 EST 2016
REMOTE: jsure.Add.required=0
REMOTE: jsure.All.analyses=962
REMOTE: jsure.Binding.before.canon=360
REMOTE: jsure.Binding.full.time=1105
REMOTE: jsure.Binding.partial.time=727
REMOTE: jsure.Bindings.full=2907
REMOTE: jsure.Bindings.partial=10448
REMOTE: jsure.Canonicalization=583
REMOTE: jsure.Cleanup=99
REMOTE: jsure.Destroy.time=19
REMOTE: jsure.Drop.creation=29
REMOTE: jsure.Find.canon.time=12
REMOTE: jsure.Parsing=946
REMOTE: jsure.Promise.parsing=578
REMOTE: jsure.Promise.scrubbing=1382
REMOTE: jsure.Sea.export=907
REMOTE: jsure.Sea.update=109
REMOTE: jsure.Total.JSure.time=5595
REMOTE: jsure.Total.blocks=375
REMOTE: jsure.Total.canonical=6579
REMOTE: jsure.Total.decls=775
REMOTE: jsure.Total.destroyed=1202
REMOTE: jsure.Total.gced=0
REMOTE: jsure.Total.loc=2981
REMOTE: jsure.Total.nodes=77012
REMOTE: jsure.Total.stmts=574
REMOTE: jsure.Total.try.destroyed=1202
REMOTE: jsure.analysis.ConcurrencyDetector=34
REMOTE: jsure.analysis.EffectsAnalysis=67
REMOTE: jsure.analysis.EqualityAnalysis=64
REMOTE: jsure.analysis.LayersAnalysis=178
REMOTE: jsure.analysis.LockModelBuilder=46
REMOTE: jsure.analysis.NewLockAnalysis=1614
REMOTE: jsure.analysis.NullableModule2=1891
REMOTE: jsure.analysis.NullablePreprocessorModule=42
REMOTE: jsure.analysis.ParameterizedTypeAnalysis=13
REMOTE: jsure.analysis.SingletonAnalysis=1
REMOTE: jsure.analysis.StructureAnalysis=3
REMOTE: jsure.analysis.ThreadEffectsModule=18
REMOTE: jsure.analysis.ThreadSafeAnalysis=0
REMOTE: jsure.analysis.UniquenessAnalysisModule=2
REMOTE: jsure.analysis.UtilityAnalysis=1
REMOTE: jsure.num.threads=8
REMOTE: ##DONE
REMOTE: Renaming snapshot: /Users/aarong/Work/Eclipse-Workspaces/Eclipse-luna/Fluid Regression/.jsure-data/TestLockSanityChecks-2016.01.27-at-14.22.56.811/sea_snapshot.xml.gz
REMOTE: Done with JSure!
REMOTE: Scanning complete in 6 seconds 881 ms (6,881 ms)
REMOTE: No socket to close
REMOTE: Closing std streams
Process result after waiting = 0
