LOCAL vm : 1.8.0_05
Path: /Users/aarong/git/jsure/jsure-analysis/bin
Path: /Users/aarong/git/common/common/lib/runtime/commons-codec-1.10.jar
Path: /Users/aarong/git/common/common/lib/runtime/trove-3.0.3.jar
Path: /Users/aarong/git/common/common/lib/runtime/antlr-3.5.2-runtime.jar
Path: /Users/aarong/git/common/common/lib/runtime/servlet-api-3.1.jar
Path: /Users/aarong/git/jsure/jsure-common/lib/runtime/diffutils-1.2.1.jar
Path: /Users/aarong/git/common/common/bin
Path: /Users/aarong/git/common/common/lib/runtime/asm-5.0.2.jar
Path: /Users/aarong/git/jsure/jsure-analysis/lib/runtime/renamedJavac.jar
Path: /Users/aarong/git/common/common/lib/runtime/asm-tree-5.0.2.jar
Path: /Users/aarong/git/common/common/lib/runtime/promises-5.6.0.jar
Path: /Users/aarong/git/jsure/jsure-analysis/lib/runtime/log4j-xml-1.3alpha-8.jar
Path: /Users/aarong/git/common/common/lib/runtime/derby-10.11.1.1.jar
Path: /Users/aarong/git/jsure/jsure-common/bin
Path: /Users/aarong/git/common/common/lib/runtime/ant-1.9.4.jar
Path: /Users/aarong/git/common/common/lib/runtime/collections-generic-4.0.jar
Path: /Users/aarong/git/jsure/jsure-analysis/lib/runtime/log4j-1.3alpha-8.jar
Path: /Users/aarong/git/common/common/lib/runtime/asm-commons-5.0.2.jar
Path: /Users/aarong/git/common/common/lib/runtime/commons-lang3-3.3.2.jar
Path: /Users/aarong/git/common/common/lib/runtime/commons-io-2.4.jar
Starting process:
	/Library/Java/JavaVirtualMachines/jdk1.8.0_05.jdk/Contents/Home/jre/bin/java
	-Dsl.running.in.remote.vm=true
	-Dsurelogic.test.code=NONE
	-XX:MaxPermSize=512m
	-verbosegc
	-DSureLogicX=true
	-Dsl.run.dir=/Users/aarong/Work/Eclipse-Workspaces/Eclipse-luna/Fluid Regression/.jsure-data/TestRequiresLockOver-2015.06.23-at-15.17.49.875
	-Dfluid.ir.versioning=Versioning.Off
	-Dfluid.directory.url=file:/Eclipses/eclipse-standard-luna-SR2-macosx-cocoa-x86_64/../../Users/aarong/git/jsure/jsure-analysis/
	-Xmx2048m
	-classpath
	/Users/aarong/git/jsure/jsure-analysis/bin:/Users/aarong/git/common/common/lib/runtime/commons-codec-1.10.jar:/Users/aarong/git/common/common/lib/runtime/trove-3.0.3.jar:/Users/aarong/git/common/common/lib/runtime/antlr-3.5.2-runtime.jar:/Users/aarong/git/common/common/lib/runtime/servlet-api-3.1.jar:/Users/aarong/git/jsure/jsure-common/lib/runtime/diffutils-1.2.1.jar:/Users/aarong/git/common/common/bin:/Users/aarong/git/common/common/lib/runtime/asm-5.0.2.jar:/Users/aarong/git/jsure/jsure-analysis/lib/runtime/renamedJavac.jar:/Users/aarong/git/common/common/lib/runtime/asm-tree-5.0.2.jar:/Users/aarong/git/common/common/lib/runtime/promises-5.6.0.jar:/Users/aarong/git/jsure/jsure-analysis/lib/runtime/log4j-xml-1.3alpha-8.jar:/Users/aarong/git/common/common/lib/runtime/derby-10.11.1.1.jar:/Users/aarong/git/jsure/jsure-common/bin:/Users/aarong/git/common/common/lib/runtime/ant-1.9.4.jar:/Users/aarong/git/common/common/lib/runtime/collections-generic-4.0.jar:/Users/aarong/git/jsure/jsure-analysis/lib/runtime/log4j-1.3alpha-8.jar:/Users/aarong/git/common/common/lib/runtime/asm-commons-5.0.2.jar:/Users/aarong/git/common/common/lib/runtime/commons-lang3-3.3.2.jar:/Users/aarong/git/common/common/lib/runtime/commons-io-2.4.jar
	com.surelogic.javac.jobs.RemoteJSureRun

First line in REMOTE vm = Java HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=512m; support was removed in 8.0
[GC (Allocation Failure)  512K->512K(327168K), 0.0017020 secs]
[GC (Allocation Failure)  1011K->603K(327680K), 0.0009760 secs]
[GC (Allocation Failure)  1627K->755K(327680K), 0.0009530 secs]
[GC (Allocation Failure)  1779K->811K(328704K), 0.0009800 secs]
JVM started: 1.8.0_05
Log level: INFO
Created reader
Created monitor
Created log handler
Running RemoteJSureRun
[GC (Allocation Failure)  2859K->1043K(328704K), 0.0011420 secs]
[GC (Allocation Failure)  3091K->1275K(331264K), 0.0012320 secs]
[GC (Allocation Failure)  5371K->1579K(331264K), 0.0012520 secs]
[GC (Allocation Failure)  5675K->1851K(335360K), 0.0011090 secs]
runPath = /Users/aarong/Work/Eclipse-Workspaces/Eclipse-luna/Fluid Regression/.jsure-data/TestRequiresLockOver-2015.06.23-at-15.17.49.875
Creating run: TestRequiresLockOver-2015.06.23-at-15.17.49.875
projects = TestRequiresLockOverride
Loading edu.cmu.cs.fluid.make.nonabductive.proposals = false
Loading edu.cmu.cs.fluid.load.all.classes = false
Loading edu.cmu.cs.fluid.timeoutFlag = true
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.BCA = false
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.ConstantExpr = false
Loading edu.cmu.cs.fluid.physMemoryInMB = 20480
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.EqualityAssurance = true
Loading edu.cmu.cs.fluid.xml.diff.directory = /Users/aarong/Work/Eclipse-Workspaces/Eclipse-luna/Fluid Regression/.jsure-data/promises-xml
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.UniquenessAssuranceUWM = false
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.IRConcurrencyDetector = true
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.Singleton = true
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.CALLS = false
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.BenchmarkingUniquenessSE = false
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.ThreadEffectAssurance2 = true
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.Binder = false
Loading com.surelogic.jsure.active.com.surelogic.jsure.cliend.eclipse.TypeBasedAlias = false
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.Nullable = true
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.TestIsFunctional = false
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.UniquenessAssuranceUWM_SE = false
Loading edu.cmu.cs.fluid.tool-memory-mb = 2048
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.DefinitelyAssigned = false
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.UniquenessAssuranceSE = true
Loading edu.cmu.cs.fluid.analysis.thread.count = 8
Loading edu.cmu.cs.fluid.timeoutSec = 11
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.NonNullRawTypes = false
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.LayersAssurance = true
Loading edu.cmu.cs.fluid.default.JRE = org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
Loading edu.cmu.cs.fluid.timeoutWarningSec = 30
Loading edu.cmu.cs.fluid.modeling.problem.filters = 00000012com\.apple.*00000013com\.oracle.*00000010com\.sun.*00000014.*\.internal.*00000023.*BakedArrayList\.class00000007apple.*00000008oracle.*00000011quicktime.*00000005sun.*
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.Utility = true
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.BenchmarkingUniquenessNew_SE = false
Loading edu.cmu.cs.fluid.scan.may.use.compression = true
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.ParameterizedType = true
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.Final = false
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.LockAssurance3 = true
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.BenchmarkingUniquenessNew = false
Loading edu.cmu.cs.fluid.data.directory = /Users/aarong/Work/Eclipse-Workspaces/Eclipse-luna/Fluid Regression/.jsure-data
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.NullablePreprocessor = true
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.EffectAssurance2 = true
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.LV = false
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.StructureAssurance = true
Loading com.surelogic.jsure.active.com.surelogic.jsure.client.eclipse.Types = false
JSure data dir = /Users/aarong/Work/Eclipse-Workspaces/Eclipse-luna/Fluid Regression/.jsure-data
XML diff dir   = /Users/aarong/Work/Eclipse-Workspaces/Eclipse-luna/Fluid Regression/.jsure-data/promises-xml
Looking for JRE in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
default JRE = org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
Initialized job
Created com.surelogic.analysis.concurrency.detector.ConcurrencyDetector
Starting a new group for ConcurrencyDetector
Created com.surelogic.analysis.threads.ThreadEffectsModule
Created com.surelogic.analysis.structure.StructureAnalysis
Created com.surelogic.analysis.annotationbounds.ParameterizedTypeAnalysis
Created com.surelogic.analysis.equality.EqualityAnalysis
Created com.surelogic.analysis.layers.LayersAnalysis
Created com.surelogic.analysis.utility.UtilityAnalysis
Starting a new group for UtilityAnalysis
Group: EXTERNALLY
	ConcurrencyDetector
	ThreadEffectsModule
	StructureAnalysis
	ParameterizedTypeAnalysis
	EqualityAnalysis
	LayersAnalysis
Created com.surelogic.analysis.singleton.SingletonAnalysis
[GC (Allocation Failure)  10043K->2323K(335360K), 0.0019560 secs]
Created com.surelogic.analysis.concurrency.driver.LockAnalysis
Created com.surelogic.analysis.effects.EffectsAnalysis
Created com.surelogic.analysis.uniqueness.classic.sideeffecting.UniquenessAnalysisModule
Starting a new group for UniquenessAnalysisModule
Group: com.surelogic.analysis.visitors.TopLevelAnalysisVisitor$1@69663380, EXTERNALLY
	UtilityAnalysis
	SingletonAnalysis
	LockAnalysis
	EffectsAnalysis
Created com.surelogic.analysis.nullable.NullablePreprocessorModule
Starting a new group for NullablePreprocessorModule
Group: com.surelogic.analysis.uniqueness.classic.sideeffecting.UniquenessAnalysisModule$1@5b37e0d2, class com.surelogic.analysis.bca.BindingContextAnalysis, INTERNALLY
	UniquenessAnalysisModule
Created com.surelogic.analysis.nullable.NullableModule2
Starting a new group for NullableModule2
Group: EXTERNALLY
	NullablePreprocessorModule
Group: com.surelogic.analysis.granules.FlowUnitGranulator@4459eb14, EXTERNALLY
	NullableModule2
##TASK, Scan, 346
Initializing ...
##SUBTASK, Initializing ...
monitor = com.surelogic.common.jobs.remote.AbstractRemoteSLJob$Monitor@5a2e4553
singleThread = false
[GC (Allocation Failure)  10515K->2627K(340992K), 0.0019040 secs]
[GC (Allocation Failure)  15813K->10425K(340992K), 0.0054120 secs]
[GC (Allocation Failure)  23708K->23638K(350720K), 0.0087940 secs]
[GC (Allocation Failure)  44118K->43825K(351744K), 0.0139720 secs]
Done initializing org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: 0
org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: Done initializing with /jre1.7.0_55.jre/Contents/Home/lib/resources.jar
[GC (Allocation Failure)  64305K->47209K(365056K), 0.0047780 secs]
org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: Done initializing with /jre1.7.0_55.jre/Contents/Home/lib/rt.jar
org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: Done initializing with /jre1.7.0_55.jre/Contents/Home/lib/jsse.jar
org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: Done initializing with /jre1.7.0_55.jre/Contents/Home/lib/jce.jar
org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: Done initializing with /jre1.7.0_55.jre/Contents/Home/lib/charsets.jar
org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: Done initializing with /jre1.7.0_55.jre/Contents/Home/lib/jfr.jar
org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: Done initializing with /jre1.7.0_55.jre/Contents/Home/lib/ext/dnsns.jar
org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: Done initializing with /jre1.7.0_55.jre/Contents/Home/lib/ext/localedata.jar
org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: Done initializing with /jre1.7.0_55.jre/Contents/Home/lib/ext/sunec.jar
org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: Done initializing with /jre1.7.0_55.jre/Contents/Home/lib/ext/sunjce_provider.jar
org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: Done initializing with /jre1.7.0_55.jre/Contents/Home/lib/ext/sunpkcs11.jar
org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: Done initializing with /jre1.7.0_55.jre/Contents/Home/lib/ext/zipfs.jar
org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: Done initializing with /System/Library/Java/Extensions/MRJToolkit.jar
Done initializing TestRequiresLockOverride: 21
Trying to find /Users/aarong/Work/Eclipse-Workspaces/Eclipse-luna/Fluid Regression/.jsure-data/TestRequiresLockOver-2015.06.23-at-15.17.49.875/source/TestRequiresLockOverride.bin.zip
TestRequiresLockOverride: TestRequiresLockOverride -> org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
Done initializing org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: 0
TestRequiresLockOverride: Done initializing with /jre1.7.0_55.jre/Contents/Home/lib/resources.jar
[GC (Allocation Failure)  79977K->53577K(365056K), 0.0081570 secs]
TestRequiresLockOverride: Done initializing with /jre1.7.0_55.jre/Contents/Home/lib/rt.jar
TestRequiresLockOverride: Done initializing with /jre1.7.0_55.jre/Contents/Home/lib/jsse.jar
TestRequiresLockOverride: Done initializing with /jre1.7.0_55.jre/Contents/Home/lib/jce.jar
TestRequiresLockOverride: Done initializing with /jre1.7.0_55.jre/Contents/Home/lib/charsets.jar
TestRequiresLockOverride: Done initializing with /jre1.7.0_55.jre/Contents/Home/lib/jfr.jar
TestRequiresLockOverride: Done initializing with /jre1.7.0_55.jre/Contents/Home/lib/ext/dnsns.jar
TestRequiresLockOverride: Done initializing with /jre1.7.0_55.jre/Contents/Home/lib/ext/localedata.jar
TestRequiresLockOverride: Done initializing with /jre1.7.0_55.jre/Contents/Home/lib/ext/sunec.jar
TestRequiresLockOverride: Done initializing with /jre1.7.0_55.jre/Contents/Home/lib/ext/sunjce_provider.jar
TestRequiresLockOverride: Done initializing with /jre1.7.0_55.jre/Contents/Home/lib/ext/sunpkcs11.jar
TestRequiresLockOverride: Done initializing with /jre1.7.0_55.jre/Contents/Home/lib/ext/zipfs.jar
TestRequiresLockOverride: Done initializing with /System/Library/Java/Extensions/MRJToolkit.jar
TestRequiresLockOverride: Done initializing with /Users/aarong/git/regression/regression/TestRequiresLockOverride/promises-5.6.0.jar
##SUBTASK_DONE
##WORK, 1
Assuming that the projects are run in dependency order
Parsing ...
##SUBTASK, Parsing ...
Done adapting 0 files for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
##SUBTASK_DONE
##WORK, 1
Parsing ...
##SUBTASK, Parsing ...
JCP: warning: [options] bootstrap class path not set in conjunction with -source 1.7
[GC (Allocation Failure)  86345K->61598K(386560K), 0.0125830 secs]
##WORK, 1
##WORK, 1
##WORK, 1
##WORK, 1
##WORK, 1
##WORK, 1
##WORK, 1
##WORK, 1
##WORK, 1
##WORK, 1
##WORK, 1
##WORK, 1
##WORK, 1
##WORK, 1
##WORK, 1
##WORK, 1
##WORK, 1
##WORK, 1
##WORK, 1
##WORK, 1
##WORK, 1
Adapting 21 CUTs
Done adapting 21 files for TestRequiresLockOverride
##SUBTASK_DONE
##WORK, 1
Handling references for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
##SUBTASK, Handling references for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
Handling 21 dangling refs for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
Setting project for Object from org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
Handling 44 dangling refs for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
[GC (Allocation Failure)  113310K->65841K(387584K), 0.0148860 secs]
Handling 55 dangling refs for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
Handling 51 dangling refs for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
Handling 32 dangling refs for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
Handling 17 dangling refs for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
Handling 8 dangling refs for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
Handling 12 dangling refs for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
Handling 15 dangling refs for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
Handling 4 dangling refs for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
Handling 2 dangling refs for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
##SUBTASK_DONE
##WORK, 1
Handling references for TestRequiresLockOverride
##SUBTASK, Handling references for TestRequiresLockOverride
Handling 28 dangling refs for TestRequiresLockOverride
Handling 1 dangling refs for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
Handling 2 dangling refs for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
Handling 5 dangling refs for TestRequiresLockOverride
##SUBTASK_DONE
##WORK, 1
Updated 266 files in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
Updated 54 files in TestRequiresLockOverride
Parsing ASTs  = 687 ms
Handling refs = 374 ms
[2015-06-23 15:17:52    INFO] partial bindings = 0 (in method edu.cmu.cs.fluid.java.bind.AbstractJavaBinder.printStats(-) thread "main")
[2015-06-23 15:17:52    INFO] full bindings = 0 (in method edu.cmu.cs.fluid.java.bind.AbstractJavaBinder.printStats(-) thread "main")
Canonicalizing ASTs
##SUBTASK, Canonicalizing ASTs
##WORK, 1
##WORK, 1
##WORK, 1
##WORK, 1
##WORK, 1
##WORK, 1
##WORK, 1
##WORK, 1
##WORK, 1
##WORK, 1
##WORK, 1
##WORK, 1
##WORK, 1
##WORK, 1
##WORK, 1
##WORK, 1
##WORK, 1
##WORK, 1
##WORK, 1
##WORK, 1
##WORK, 1
[2015-06-23 15:17:52    INFO] partial bindings = 8243 (in method edu.cmu.cs.fluid.java.bind.AbstractJavaBinder.printStats(-) thread "main")
[2015-06-23 15:17:52    INFO] full bindings = 4093 (in method edu.cmu.cs.fluid.java.bind.AbstractJavaBinder.printStats(-) thread "main")
Canonicalizing TestRequiresLockOverride/src/test/write/staticlocks/qualified/C.java
[GC (Metadata GC Threshold)  117537K->74226K(409600K), 0.0194780 secs]
[Full GC (Metadata GC Threshold)  74226K->72832K(169472K), 0.2693230 secs]
##WORK, 1
Canonicalizing TestRequiresLockOverride/src/test/intrinsic/staticlocks/qualified/C.java
##WORK, 1
Canonicalizing TestRequiresLockOverride/src/test/write/receiver/implicit/C.java
##WORK, 1
Canonicalizing TestRequiresLockOverride/src/test/read/staticlocks/qualified/C.java
##WORK, 1
Canonicalizing TestRequiresLockOverride/src/test/intrinsic/formals/C.java
##WORK, 1
Canonicalizing TestRequiresLockOverride/src/test/intrinsic/qualified/Outer1.java
##WORK, 1
Canonicalizing TestRequiresLockOverride/src/test/read/receiver/explicit/C.java
##WORK, 1
Canonicalizing TestRequiresLockOverride/src/test/intrinsic/staticlocks/simple/C.java
##WORK, 1
Canonicalizing TestRequiresLockOverride/src/test/write/staticlocks/simple/C.java
##WORK, 1
Canonicalizing TestRequiresLockOverride/src/test/write/receiver/explicit/C.java
##WORK, 1
Canonicalizing TestRequiresLockOverride/src/test/read/qualified/Outer1.java
##WORK, 1
Canonicalizing TestRequiresLockOverride/src/test/write/formals/C.java
##WORK, 1
Canonicalizing TestRequiresLockOverride/src/test/write/receiver/qualified/C.java
##WORK, 1
Canonicalizing TestRequiresLockOverride/src/test/read/formals/C.java
##WORK, 1
Canonicalizing TestRequiresLockOverride/src/test/read/staticlocks/simple/C.java
##WORK, 1
Canonicalizing TestRequiresLockOverride/src/test/intrinsic/receiver/implicit/C.java
##WORK, 1
Canonicalizing TestRequiresLockOverride/src/test/intrinsic/receiver/qualified/C.java
##WORK, 1
Canonicalizing TestRequiresLockOverride/src/test/read/receiver/implicit/C.java
##WORK, 1
Canonicalizing TestRequiresLockOverride/src/test/intrinsic/receiver/explicit/C.java
##WORK, 1
Canonicalizing TestRequiresLockOverride/src/test/write/qualified/Outer1.java
##WORK, 1
Canonicalizing TestRequiresLockOverride/src/test/read/receiver/qualified/C.java
##WORK, 1
Binding = 296 ms
Cleaned 0 in 13 ms
##SUBTASK_DONE
##WORK, 1
Handling references for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
##SUBTASK, Handling references for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
Handling 21 dangling refs for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
##SUBTASK_DONE
##WORK, 1
Handling references for TestRequiresLockOverride
##SUBTASK, Handling references for TestRequiresLockOverride
Handling 21 dangling refs for TestRequiresLockOverride
##SUBTASK_DONE
##WORK, 1
Updated 266 files in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
Updated 54 files in TestRequiresLockOverride
[GC (System.gc())  88709K->73512K(170496K), 0.0032870 secs]
[Full GC (System.gc())  73512K->58876K(170496K), 0.1268210 secs]
Creating drops
##SUBTASK, Creating drops
Created binary drop for java.lang.Double
Created binary drop for java.net.ContentHandler
Created binary drop for java.lang.annotation.Target
Created binary drop for java.nio.ShortBuffer
Created binary drop for java.util.Vector
Created binary drop for java.net.InetAddress
Created binary drop for java.lang.StringBuffer
Created binary drop for java.util.Dictionary
Created binary drop for java.lang.ClassLoader
Created binary drop for java.util.zip.DataFormatException
Created binary drop for java.net.SocketAddress
Created binary drop for sun.reflect.ConstructorAccessor
Created binary drop for java.io.SyncFailedException
Created binary drop for java.lang.Deprecated
Created binary drop for java.util.zip.Inflater
Created binary drop for java.io.FilenameFilter
Created binary drop for sun.reflect.LangReflectAccess
Created binary drop for java.nio.MappedByteBuffer
Created binary drop for java.lang.reflect.AnnotatedElement
Created binary drop for java.lang.Cloneable
Created binary drop for java.util.zip.ZipConstants
Created binary drop for java.util.zip.ZipFile
Created binary drop for java.nio.channels.InterruptibleChannel
Created source drop for file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/qualified/Outer1.java
Created source drop for file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/receiver/qualified/C.java
Created binary drop for java.lang.reflect.TypeVariable
Created binary drop for java.lang.ref.ReferenceQueue
Created binary drop for java.util.AbstractCollection
Created binary drop for java.nio.channels.ClosedChannelException
Created binary drop for java.nio.channels.FileLock
Created binary drop for java.security.Key
Created source drop for file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/receiver/qualified/C.java
Created binary drop for java.io.Writer
Created binary drop for java.net.URI
Created binary drop for java.nio.channels.ByteChannel
Created binary drop for java.net.UnknownServiceException
Created binary drop for java.util.Collection
Created source drop for file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/formals/C.java
Created binary drop for java.security.InvalidKeyException
Created binary drop for java.lang.ref.SoftReference
Created binary drop for sun.util.locale.InternalLocaleBuilder
Created binary drop for java.security.PermissionCollection
Created binary drop for java.nio.IntBuffer
Created binary drop for java.nio.file.WatchService
Created binary drop for java.io.InputStream
Created source drop for file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/staticlocks/simple/C.java
Created binary drop for java.util.Iterator
Created binary drop for java.lang.reflect.Method
Created source drop for file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/receiver/implicit/C.java
Created binary drop for java.nio.file.FileStore
Created binary drop for java.nio.file.FileSystem
Created binary drop for com.surelogic.RegionLocks
Created binary drop for java.nio.file.OpenOption
Created binary drop for java.lang.IllegalArgumentException
Created binary drop for java.util.spi.LocaleServiceProvider
Created binary drop for com.surelogic.RegionLock
Created binary drop for java.security.NoSuchProviderException
Created binary drop for java.io.FilterOutputStream
Created binary drop for sun.util.locale.BaseLocale
Created binary drop for java.io.IOException
Created source drop for file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/receiver/explicit/C.java
Created binary drop for java.lang.NoSuchFieldException
Created source drop for file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/receiver/implicit/C.java
Created binary drop for java.io.UnsupportedEncodingException
Created binary drop for java.security.NoSuchAlgorithmException
Created binary drop for java.nio.file.attribute.BasicFileAttributes
Created binary drop for java.nio.channels.GatheringByteChannel
Created binary drop for java.lang.Boolean
Created binary drop for java.util.jar.JarFile
Created binary drop for java.lang.reflect.Constructor
Created binary drop for java.lang.AbstractStringBuilder
Created binary drop for java.lang.RuntimeException
Created binary drop for java.lang.reflect.InvocationTargetException
Created binary drop for java.util.AbstractList
Created binary drop for java.security.Guard
Created binary drop for java.nio.channels.Channel
Created binary drop for java.net.URISyntaxException
Created binary drop for com.surelogic.RequiresLock
Created binary drop for java.nio.file.Watchable
Created source drop for file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/receiver/qualified/C.java
Created binary drop for java.io.FileFilter
Created binary drop for java.lang.InstantiationException
Created binary drop for sun.misc.JarIndex
Created binary drop for java.util.concurrent.ConcurrentMap
Created binary drop for java.net.URLStreamHandler
Created binary drop for sun.util.locale.Extension
Created binary drop for java.util.spi.LocaleNameProvider
Created binary drop for java.util.concurrent.locks.ReadWriteLock
Created binary drop for java.util.LinkedList
Created binary drop for sun.util.locale.LanguageTag
Created binary drop for java.util.Random
Created binary drop for java.lang.Comparable
Created binary drop for java.lang.Character
Created binary drop for java.security.Permission
Created binary drop for java.util.ArrayList
Created binary drop for java.net.URL
Created binary drop for java.util.ResourceBundle
Created binary drop for java.util.List
Created binary drop for java.lang.ReflectiveOperationException
Created binary drop for java.io.PrintWriter
Created binary drop for java.util.concurrent.TimeUnit
Created binary drop for java.lang.Throwable
Created binary drop for java.nio.ByteBuffer
Created binary drop for java.util.jar.Manifest
Created binary drop for java.nio.file.AccessMode
Created binary drop for java.util.Hashtable
Created binary drop for sun.security.util.Debug
Created binary drop for java.lang.Void
Created binary drop for sun.misc.Resource
Created binary drop for java.lang.Exception
Created binary drop for java.lang.Readable
Created binary drop for java.nio.CharBuffer
Created binary drop for java.security.Principal
Created binary drop for java.security.cert.CertificateEncodingException
Created binary drop for java.lang.Number
Created source drop for file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/qualified/Outer1.java
Created binary drop for java.nio.DoubleBuffer
Created binary drop for sun.util.locale.ParseStatus
Created binary drop for java.nio.file.attribute.FileAttributeView
Created binary drop for java.util.concurrent.locks.AbstractOwnableSynchronizer
Created binary drop for java.io.File
Created binary drop for java.nio.channels.AsynchronousFileChannel
Created binary drop for java.util.AbstractMap
Created binary drop for java.net.UnknownHostException
Created binary drop for java.security.CodeSource
Created binary drop for java.io.OutputStream
Created binary drop for java.lang.reflect.GenericDeclaration
Created binary drop for java.lang.SecurityException
Created binary drop for sun.util.locale.LocaleObjectCache
Created binary drop for java.util.zip.ZipException
Created binary drop for java.io.ObjectStreamException
Created binary drop for java.lang.reflect.Type
Created binary drop for java.lang.annotation.Annotation
Created binary drop for sun.reflect.ConstantPool
Created binary drop for java.net.InterfaceAddress
Created binary drop for java.lang.NullPointerException
Created binary drop for java.nio.channels.spi.AbstractInterruptibleChannel
Created binary drop for java.nio.channels.ReadableByteChannel
Created binary drop for java.nio.charset.CoderResult
Created binary drop for java.util.concurrent.Callable
Created binary drop for java.util.Date
Created binary drop for java.nio.charset.CharsetEncoder
Created binary drop for com.surelogic.Region
Created binary drop for java.io.DataOutput
Created binary drop for java.nio.file.LinkOption
Created binary drop for java.lang.annotation.ElementType
Created binary drop for java.util.Stack
Created binary drop for java.lang.Byte
Created binary drop for java.nio.file.spi.FileSystemProvider
Created source drop for file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/staticlocks/simple/C.java
Created binary drop for java.io.DataOutputStream
Created binary drop for java.nio.channels.AsynchronousChannel
Created binary drop for java.security.KeyException
Created binary drop for java.nio.LongBuffer
Created binary drop for java.lang.Short
Created binary drop for java.lang.Class
Created source drop for file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/staticlocks/qualified/C.java
Created binary drop for sun.util.locale.LocaleExtensions
Created source drop for file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/receiver/explicit/C.java
Created binary drop for java.nio.channels.AsynchronousCloseException
Created binary drop for java.util.concurrent.ExecutorService
Created binary drop for java.nio.charset.Charset
Created binary drop for java.lang.ClassValue
Created source drop for file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/formals/C.java
Created binary drop for java.util.zip.ZipEntry
Created binary drop for java.util.Map
Created source drop for file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/staticlocks/qualified/C.java
Created binary drop for java.lang.Override
Created binary drop for java.util.SortedMap
Created binary drop for java.lang.ThreadLocal
Created binary drop for java.lang.reflect.Member
Created binary drop for java.lang.StackTraceElement
Created binary drop for java.util.Set
Created binary drop for java.lang.Package
Created source drop for file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/qualified/Outer1.java
Created binary drop for java.util.concurrent.locks.Lock
Created binary drop for java.lang.Runnable
Created binary drop for com.surelogic.Regions
Created binary drop for sun.reflect.ReflectionFactory
Created binary drop for java.net.URLStreamHandlerFactory
Created source drop for file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/staticlocks/simple/C.java
Created binary drop for java.lang.annotation.Retention
Created binary drop for java.nio.ByteOrder
Created binary drop for java.util.Deque
Created binary drop for java.util.concurrent.locks.Condition
Created binary drop for sun.util.resources.OpenListResourceBundle
Created binary drop for java.nio.file.attribute.UserPrincipalLookupService
Created binary drop for java.net.ContentHandlerFactory
Created binary drop for sun.util.locale.LocaleSyntaxException
Created binary drop for java.util.zip.InflaterInputStream
Created source drop for file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/formals/C.java
Created binary drop for java.nio.FloatBuffer
Created binary drop for java.security.Timestamp
Created binary drop for java.lang.Object
Created binary drop for java.nio.file.attribute.FileStoreAttributeView
Created binary drop for java.lang.reflect.Field
Created binary drop for java.lang.Enum
Created binary drop for java.nio.file.attribute.GroupPrincipal
Created binary drop for java.util.jar.Attributes
Created binary drop for java.nio.charset.CharacterCodingException
Created binary drop for java.security.cert.CertificateException
Created binary drop for java.lang.ThreadGroup
Created binary drop for java.nio.channels.WritableByteChannel
Created binary drop for java.nio.file.attribute.FileTime
Created binary drop for java.util.concurrent.Future
Created binary drop for java.lang.CharSequence
Created binary drop for java.security.cert.CertPath
Created binary drop for java.util.Queue
Created binary drop for java.util.concurrent.locks.AbstractQueuedSynchronizer
Created binary drop for java.lang.AutoCloseable
Created binary drop for java.lang.Integer
Created binary drop for java.net.SocketException
Created binary drop for java.util.WeakHashMap
Created binary drop for java.security.cert.Certificate
Created binary drop for java.security.DomainCombiner
Created binary drop for java.lang.Appendable
Created binary drop for java.io.FileNotFoundException
Created source drop for file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/receiver/explicit/C.java
Created binary drop for java.util.ListIterator
Created binary drop for java.util.MissingResourceException
Created binary drop for java.util.HashMap
Created binary drop for java.security.PublicKey
Created binary drop for java.lang.reflect.AccessibleObject
Created binary drop for java.io.Serializable
Created binary drop for java.nio.file.WatchEvent
Created binary drop for java.util.Comparator
Created binary drop for java.util.RandomAccess
Created binary drop for java.net.URLConnection
Created binary drop for java.security.PrivilegedAction
Created binary drop for java.security.ProtectionDomain
Created binary drop for sun.misc.MetaIndex
Created binary drop for java.net.NetworkInterface
Created binary drop for java.lang.InterruptedException
Created binary drop for java.nio.file.WatchKey
Created binary drop for sun.reflect.MethodAccessor
Created binary drop for java.nio.channels.FileChannel
Created binary drop for java.nio.charset.CodingErrorAction
Created source drop for file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/receiver/implicit/C.java
Created binary drop for java.security.SignatureException
Created binary drop for java.lang.Thread
Created binary drop for java.lang.Float
Created binary drop for java.security.CodeSigner
Created binary drop for java.io.FilterInputStream
Created binary drop for java.io.Flushable
Created binary drop for java.nio.file.DirectoryStream
Created binary drop for java.net.FileNameMap
Created binary drop for java.lang.StringBuilder
Created binary drop for java.nio.channels.SeekableByteChannel
Created binary drop for java.lang.IllegalAccessException
Created binary drop for sun.reflect.CallerSensitive
Created binary drop for java.nio.Buffer
Created binary drop for sun.misc.URLClassPath
Created binary drop for java.net.Proxy
Created binary drop for java.lang.ref.Reference
Created binary drop for java.security.AccessControlException
Created binary drop for java.nio.file.attribute.AttributeView
Created binary drop for java.util.AbstractSequentialList
Created binary drop for java.lang.annotation.RetentionPolicy
Created binary drop for java.lang.CloneNotSupportedException
Created binary drop for java.nio.channels.CompletionHandler
Created binary drop for java.io.Closeable
Created binary drop for java.lang.NumberFormatException
Created binary drop for sun.reflect.annotation.AnnotationType
Created binary drop for java.net.InetAddressImpl
Created binary drop for java.lang.Iterable
Created binary drop for java.util.Locale
Created binary drop for sun.nio.ch.Interruptible
Created binary drop for java.nio.file.PathMatcher
Created binary drop for java.nio.file.attribute.FileAttribute
Created binary drop for java.nio.charset.CharsetDecoder
Created binary drop for java.util.concurrent.locks.ReentrantReadWriteLock
Created binary drop for java.security.AccessControlContext
Created binary drop for java.lang.String
Created binary drop for java.lang.ref.WeakReference
Created binary drop for java.io.FileDescriptor
Created binary drop for java.util.concurrent.Executor
Created source drop for file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/staticlocks/qualified/C.java
Created binary drop for java.util.Enumeration
Created binary drop for sun.util.LocaleServiceProviderPool
Created binary drop for java.util.jar.JarEntry
Created binary drop for java.nio.channels.ScatteringByteChannel
Created binary drop for java.lang.Long
Created binary drop for java.nio.file.attribute.UserPrincipal
Created binary drop for java.nio.file.CopyOption
Created binary drop for sun.reflect.FieldAccessor
Created binary drop for java.lang.annotation.Documented
Created binary drop for java.nio.file.Path
Created binary drop for java.security.GeneralSecurityException
Created binary drop for java.math.BigInteger
Created binary drop for java.util.AbstractSet
Created binary drop for java.net.MalformedURLException
Created binary drop for java.io.PrintStream
##SUBTASK_DONE
##WORK, 1
Parsing promises
##SUBTASK, Parsing promises
Added 3 promises for java.lang.[] in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@799f7e29
Added 3 promises for java.lang.[] in TestRequiresLockOverride: com.surelogic.tree.SyntaxTreeNode@70f76276
Added 22 promises for java.util.concurrent.locks.Condition in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@771557eb
Added 13 promises for java.lang.Enum in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@d30fb0f
Added 1 promises for java.lang.ref.ReferenceQueue in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@54d57b56
Added 12 promises for java.lang.RuntimeException in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@1612e95b
Added 31 promises for java.lang.Object in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@5044329b
Added 17 promises for java.util.concurrent.ConcurrentMap in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@6155a6b0
Added 18 promises for java.util.Queue in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@5fa4a7e8
Added 6 promises for java.lang.Appendable in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@14b187d1
Added 47 promises for java.lang.Throwable in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@12cebfa4
Added 55 promises for java.util.AbstractCollection in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@25be8b1f
Added 54 promises for test.intrinsic.formals.C in TestRequiresLockOverride: com.surelogic.tree.SyntaxTreeNode@26cdc8e6
Added 55 promises for test.intrinsic.staticlocks.qualified.C in TestRequiresLockOverride: com.surelogic.tree.SyntaxTreeNode@66819f7b
Added 2 promises for java.lang.ref.SoftReference in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@695ba80f
Added 12 promises for java.lang.Exception in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@2615d82a
Added 6 promises for java.util.Iterator in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@40eb27b9
Added 52 promises for test.read.receiver.explicit.C in TestRequiresLockOverride: com.surelogic.tree.SyntaxTreeNode@70eeb0bb
Added 83 promises for java.util.Hashtable in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@4b6a990d
Added 3 promises for java.util.Date in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@7a0eb00d
Added 37 promises for java.lang.Boolean in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@2d057887
Added 141 promises for java.lang.Thread in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@5b6f6db6
Added 18 promises for java.net.URISyntaxException in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@3d894601
Added 3 promises for java.nio.file.DirectoryStream in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@2c7d0513
Added 12 promises for java.lang.CharSequence in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@57c7af62
Added 158 promises for java.lang.StringBuffer in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@34146628
Added 88 promises for java.util.jar.Attributes in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@6431dc51
Added 22 promises for java.util.concurrent.locks.AbstractQueuedSynchronizer in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@705c1da0
Added 29 promises for java.util.AbstractSequentialList in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@3e14332a
Added 55 promises for test.intrinsic.staticlocks.simple.C in TestRequiresLockOverride: com.surelogic.tree.SyntaxTreeNode@73102cb9
Added 3 promises for java.lang.Iterable in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@434d2cc0
Added 96 promises for java.lang.Integer in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@aa25223
Added 60 promises for java.util.AbstractList in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@6caf1d27
Added 60 promises for test.write.staticlocks.qualified.C in TestRequiresLockOverride: com.surelogic.tree.SyntaxTreeNode@31e06167
Added 6 promises for java.io.PrintWriter in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@2c763028
Added 45 promises for java.util.ResourceBundle in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@7890bb00
Added 3 promises for java.nio.file.Path in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@2f8a431c
Added 3 promises for java.util.jar.Manifest in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@397c3861
Added 70 promises for java.lang.Double in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@485ea8c7
Added 61 promises for java.util.HashMap in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@7d8d95b5
Added 29 promises for java.util.concurrent.TimeUnit in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@5df678fa
[GC (Allocation Failure)  130556K->63364K(178176K), 0.0069630 secs]
Added 108 promises for java.util.AbstractMap in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@46163211
Added 24 promises for test.intrinsic.qualified.Outer1 in TestRequiresLockOverride: com.surelogic.tree.SyntaxTreeNode@2ad1014a
Added 138 promises for java.math.BigInteger in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@1cef693e
Added 89 promises for java.util.List in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@7a47d740
Added 21 promises for java.util.Stack in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@580e5d50
Added 170 promises for java.util.Vector in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@167f991b
Added 6 promises for java.io.PrintStream in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@2ec658eb
Added 18 promises for java.nio.CharBuffer in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@394b02b1
Added 61 promises for java.lang.Short in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@43adc98
Added 18 promises for java.util.ListIterator in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@cf80075
Added 29 promises for java.util.Dictionary in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@31df8d0
Added 301 promises for java.lang.String in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@8ff288b
Added 54 promises for test.write.receiver.implicit.C in TestRequiresLockOverride: com.surelogic.tree.SyntaxTreeNode@5572e998
Added 6 promises for java.lang.IllegalAccessException in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@22354d0b
Added 6 promises for java.lang.CloneNotSupportedException in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@5dcefdeb
Added 6 promises for java.lang.InterruptedException in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@20b99c36
Added 6 promises for java.io.Writer in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@6d74a9f6
Added 57 promises for test.intrinsic.receiver.implicit.C in TestRequiresLockOverride: com.surelogic.tree.SyntaxTreeNode@68cf724
Added 12 promises for java.lang.IllegalArgumentException in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@1097554e
Added 6 promises for java.lang.NoSuchFieldException in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@5702ad18
Added 60 promises for test.write.staticlocks.simple.C in TestRequiresLockOverride: com.surelogic.tree.SyntaxTreeNode@24c66978
Added 73 promises for java.lang.Float in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@424b86ce
Added 57 promises for test.intrinsic.receiver.qualified.C in TestRequiresLockOverride: com.surelogic.tree.SyntaxTreeNode@36f14cac
Added 54 promises for test.write.receiver.qualified.C in TestRequiresLockOverride: com.surelogic.tree.SyntaxTreeNode@7721ce01
Added 12 promises for java.lang.SecurityException in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@7c25d5e0
Added 7 promises for java.util.concurrent.locks.ReadWriteLock in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@1e45630f
Added 109 promises for java.lang.StringBuilder in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@428d59f6
Added 6 promises for java.lang.NullPointerException in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@412b30e4
Added 4 promises for java.util.Enumeration in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@1d4fa03c
Added 6 promises for java.lang.NumberFormatException in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@50091f45
WARNING: TreeAccessor couldn't find equals(java.lang.Object) in java.util.ArrayList
WARNING: TreeAccessor couldn't find hashCode() in java.util.ArrayList
Added 59 promises for java.lang.Byte in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@96369bc
Added 3 promises for java.util.Locale in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@3389dea8
Added 104 promises for java.util.ArrayList in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@2ee443c9
Added 12 promises for java.lang.Class in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@7a97804
Added 52 promises for test.read.receiver.implicit.C in TestRequiresLockOverride: com.surelogic.tree.SyntaxTreeNode@663d08f1
Added 144 promises for java.lang.AbstractStringBuilder in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@3b4a68c
Added 22 promises for java.lang.Number in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@fabc44a
Added 6 promises for java.lang.InstantiationException in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@35510703
Added 3 promises for java.util.zip.ZipEntry in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@6fe004cd
Added 34 promises for java.util.concurrent.ExecutorService in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@781a60d7
Added 54 promises for test.write.receiver.explicit.C in TestRequiresLockOverride: com.surelogic.tree.SyntaxTreeNode@73641ad1
Added 56 promises for test.read.formals.C in TestRequiresLockOverride: com.surelogic.tree.SyntaxTreeNode@6a7fda4b
Added 55 promises for test.read.staticlocks.qualified.C in TestRequiresLockOverride: com.surelogic.tree.SyntaxTreeNode@bac2861
Added 31 promises for java.util.SortedMap in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@54954246
Added 64 promises for java.util.Map in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@4a6f264a
Added 54 promises for java.util.Set in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@1b6871ab
Added 139 promises for java.util.LinkedList in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@297943e4
Added 25 promises for test.read.qualified.Outer1 in TestRequiresLockOverride: com.surelogic.tree.SyntaxTreeNode@5fd591da
Added 57 promises for test.intrinsic.receiver.explicit.C in TestRequiresLockOverride: com.surelogic.tree.SyntaxTreeNode@3b755b0b
Added 1 promises for java.lang.ThreadLocal in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@5d6e46c8
Added 20 promises for java.util.concurrent.locks.Lock in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@e7c8808
Added 103 promises for java.util.concurrent.locks.ReentrantReadWriteLock in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@378fa767
[GC (Allocation Failure)  146308K->66068K(180736K), 0.0074030 secs]
Added 54 promises for java.util.Collection in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@61c863ad
Added 25 promises for test.write.qualified.Outer1 in TestRequiresLockOverride: com.surelogic.tree.SyntaxTreeNode@58bd4d45
Added 12 promises for java.lang.reflect.InvocationTargetException in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@2bb9c12f
Added 96 promises for java.lang.Long in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@63eb4d18
Added 55 promises for test.read.staticlocks.simple.C in TestRequiresLockOverride: com.surelogic.tree.SyntaxTreeNode@b669f0e
Added 16 promises for java.util.AbstractSet in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@3aff0d2c
Added 56 promises for test.write.formals.C in TestRequiresLockOverride: com.surelogic.tree.SyntaxTreeNode@3062ed72
Added 52 promises for test.read.receiver.qualified.C in TestRequiresLockOverride: com.surelogic.tree.SyntaxTreeNode@4589060b
Added 87 promises for java.util.Deque in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@426a4e72
Added 56 promises for java.util.WeakHashMap in org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7: com.surelogic.tree.SyntaxTreeNode@7dd90eed
##SUBTASK_DONE
##WORK, 1
Scrubbing promises
##SUBTASK, Scrubbing promises
Creating RegionModel java.lang.Object.Instance for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
[GC (Allocation Failure)  149012K->70412K(191488K), 0.0128990 secs]
##SUBTASK_DONE
##WORK, 1
Starting analyses
Using new analysis framework -- groups
Starting group: ConcurrencyDetector, ThreadEffectsModule, StructureAnalysis, ParameterizedTypeAnalysis, EqualityAnalysis, LayersAnalysis
##SUBTASK, Starting parallel ConcurrencyDetector [0]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
Starting parallel ConcurrencyDetector [0]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
##SUBTASK, Starting parallel ThreadEffectsModule [1]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
Starting parallel ThreadEffectsModule [1]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
##SUBTASK, Starting parallel StructureAnalysis [2]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
Starting parallel StructureAnalysis [2]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
##SUBTASK, Starting parallel ParameterizedTypeAnalysis [3]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
Starting parallel ParameterizedTypeAnalysis [3]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
##SUBTASK, Starting parallel EqualityAnalysis [4]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
Starting parallel EqualityAnalysis [4]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
##SUBTASK, Starting parallel LayersAnalysis [5]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
Starting parallel LayersAnalysis [5]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
##WORK, 1
##SUBTASK_DONE
##WORK, 1
##SUBTASK_DONE
##WORK, 1
##SUBTASK_DONE
##WORK, 1
##SUBTASK_DONE
##WORK, 1
##SUBTASK_DONE
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Starting parallel ConcurrencyDetector [0]: 21 for TestRequiresLockOverride
Starting parallel ConcurrencyDetector [0]: 21 for TestRequiresLockOverride
##SUBTASK, Starting parallel ThreadEffectsModule [1]: 21 for TestRequiresLockOverride
Starting parallel ThreadEffectsModule [1]: 21 for TestRequiresLockOverride
##SUBTASK, Starting parallel StructureAnalysis [2]: 21 for TestRequiresLockOverride
Starting parallel StructureAnalysis [2]: 21 for TestRequiresLockOverride
##SUBTASK, Starting parallel ParameterizedTypeAnalysis [3]: 21 for TestRequiresLockOverride
Starting parallel ParameterizedTypeAnalysis [3]: 21 for TestRequiresLockOverride
##SUBTASK, Starting parallel EqualityAnalysis [4]: 21 for TestRequiresLockOverride
Starting parallel EqualityAnalysis [4]: 21 for TestRequiresLockOverride
##SUBTASK, Starting parallel LayersAnalysis [5]: 21 for TestRequiresLockOverride
Starting parallel LayersAnalysis [5]: 21 for TestRequiresLockOverride
##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/receiver/explicit/C.java
##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/receiver/qualified/C.java
##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/staticlocks/simple/C.java
##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/qualified/Outer1.java
##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/staticlocks/simple/C.java
##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/receiver/qualified/C.java
##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/receiver/qualified/C.java
##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/receiver/implicit/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/qualified/Outer1.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/receiver/implicit/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/receiver/qualified/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/receiver/qualified/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/staticlocks/simple/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/qualified/Outer1.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/qualified/Outer1.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/receiver/explicit/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/receiver/qualified/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/staticlocks/simple/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/receiver/qualified/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/staticlocks/simple/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/staticlocks/simple/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/qualified/Outer1.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/receiver/explicit/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/receiver/explicit/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/receiver/qualified/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/receiver/qualified/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/staticlocks/simple/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/staticlocks/simple/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/receiver/qualified/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/receiver/qualified/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/receiver/qualified/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/staticlocks/simple/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/receiver/explicit/C.java
##WORK, 1
##SUBTASK_DONE
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/staticlocks/simple/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/receiver/qualified/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/receiver/implicit/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/receiver/implicit/C.java
##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/receiver/qualified/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/receiver/qualified/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/receiver/implicit/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/qualified/Outer1.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/receiver/qualified/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/receiver/implicit/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/staticlocks/simple/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/receiver/qualified/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/staticlocks/simple/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/receiver/qualified/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/receiver/explicit/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/staticlocks/simple/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/staticlocks/simple/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/staticlocks/simple/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/staticlocks/simple/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/staticlocks/simple/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/staticlocks/simple/C.java
##WORK, 1
##SUBTASK_DONE
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/qualified/Outer1.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/receiver/explicit/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/qualified/Outer1.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/qualified/Outer1.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/qualified/Outer1.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/receiver/explicit/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/qualified/Outer1.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/qualified/Outer1.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/receiver/explicit/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/receiver/explicit/C.java
##WORK, 1
##SUBTASK_DONE
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/staticlocks/qualified/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/formals/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/staticlocks/qualified/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/formals/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/qualified/Outer1.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/formals/C.java
##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/receiver/explicit/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/qualified/Outer1.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/receiver/explicit/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/qualified/Outer1.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/qualified/Outer1.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/formals/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/formals/C.java
##WORK, 1
##SUBTASK_DONE
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/staticlocks/qualified/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/staticlocks/qualified/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/qualified/Outer1.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/formals/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/qualified/Outer1.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/formals/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/formals/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/formals/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/staticlocks/qualified/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/formals/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/staticlocks/qualified/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/formals/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/formals/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/receiver/explicit/C.java
##WORK, 1
##SUBTASK_DONE
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/receiver/explicit/C.java
##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/receiver/implicit/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/receiver/explicit/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/receiver/explicit/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/staticlocks/qualified/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/receiver/explicit/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/receiver/explicit/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/staticlocks/qualified/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/staticlocks/qualified/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/staticlocks/qualified/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/staticlocks/qualified/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/staticlocks/qualified/C.java
##WORK, 1
##SUBTASK_DONE
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/staticlocks/qualified/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/receiver/implicit/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/staticlocks/qualified/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/receiver/implicit/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/receiver/implicit/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/staticlocks/qualified/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/staticlocks/qualified/C.java
##WORK, 1
##SUBTASK_DONE
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/receiver/implicit/C.java
##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/formals/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/staticlocks/qualified/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/receiver/implicit/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Concurrency detector ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/receiver/implicit/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/staticlocks/qualified/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/formals/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/formals/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/formals/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Thread effects ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/receiver/implicit/C.java
##WORK, 1
##SUBTASK_DONE
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/formals/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/formals/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Structure analysis ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/receiver/implicit/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Annotation bounds ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/receiver/implicit/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Reference equality ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/receiver/implicit/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Static structure ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/receiver/implicit/C.java
##WORK, 1
##SUBTASK_DONE
##WORK, 1
##SUBTASK_DONE
##WORK, 1
##SUBTASK_DONE
##WORK, 1
##SUBTASK_DONE
##WORK, 1
##SUBTASK_DONE
##WORK, 1
##SUBTASK_DONE
##WORK, 1
##SUBTASK_DONE
##WORK, 1
##SUBTASK_DONE
##WORK, 1
##SUBTASK_DONE
##WORK, 1
##SUBTASK_DONE
Starting group: UtilityAnalysis, SingletonAnalysis, LockAnalysis, EffectsAnalysis
com.surelogic.analysis.uniqueness.classic.sideeffecting.UniquenessAnalysisModule$1@5b37e0d2: 0
com.surelogic.analysis.visitors.TopLevelAnalysisVisitor$1@69663380: 670
com.surelogic.analysis.granules.FlowUnitGranulator@4459eb14: 2151
##SUBTASK, Starting parallel UtilityAnalysis [6]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
Starting parallel UtilityAnalysis [6]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
##SUBTASK, Starting parallel SingletonAnalysis [7]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
Starting parallel SingletonAnalysis [7]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
##SUBTASK, Starting parallel LockAnalysis [8]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
Starting parallel LockAnalysis [8]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
Looking at @RegionLock("MUTEX is this protects WaitQueue") on Object
Created com.surelogic.dropsea.ir.drops.locks.LockModel@a52a67e on java.lang.Object
Created com.surelogic.dropsea.ir.drops.locks.LockModel@1e0afec0 on test.read.receiver.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@9750a14 on test.read.receiver.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@5dc1d876 on test.read.receiver.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@2ffeea4f on test.read.receiver.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@4eafccbf on test.read.receiver.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@4b5da668 on test.read.receiver.qualified.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@1319463f on test.read.receiver.qualified.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@6af1208f on test.read.receiver.qualified.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@dbbc8ed on test.read.receiver.implicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@6f19518b on test.read.receiver.implicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@3a5d9c02 on test.read.receiver.implicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@6c7ffaba on test.read.receiver.implicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@4572086c on test.read.receiver.implicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@644ede5a on test.write.staticlocks.qualified.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@6bb5ea3f on test.write.staticlocks.qualified.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@34a0c798 on test.write.staticlocks.qualified.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@43c56d80 on test.write.receiver.implicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@24b86331 on test.write.receiver.implicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@676d0e6c on test.write.receiver.implicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@21cf8ffc on test.write.receiver.implicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@47c0ee42 on test.write.receiver.implicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@1243a34e on test.write.qualified.Outer1.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@161edb7a on test.write.qualified.Outer1.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@257364fd on test.intrinsic.receiver.implicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@7760ed94 on test.intrinsic.receiver.implicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@4cf38225 on test.intrinsic.receiver.implicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@2fc4066 on test.intrinsic.receiver.implicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@6a4f4a92 on test.intrinsic.receiver.implicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@785dc35d on test.read.receiver.implicit.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@3a53da82 on test.read.receiver.implicit.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@2630d826 on test.read.receiver.implicit.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@68d5b221 on test.read.receiver.explicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@754a0dd8 on test.read.receiver.explicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@4b71639d on test.read.receiver.explicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@6393c3a7 on test.read.receiver.explicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@29227e66 on test.read.receiver.explicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@307b292 on test.read.staticlocks.qualified.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@2cdc1750 on test.read.staticlocks.qualified.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@4a1d4135 on test.read.staticlocks.qualified.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@2c7fbdef on test.read.qualified.Outer1
Created com.surelogic.dropsea.ir.drops.locks.LockModel@7f7878b0 on test.read.qualified.Outer1
Created com.surelogic.dropsea.ir.drops.locks.LockModel@64a730bb on test.read.qualified.Outer1
Created com.surelogic.dropsea.ir.drops.locks.LockModel@63256ca0 on test.write.formals.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@3823520a on test.write.formals.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@ee107c1 on test.write.staticlocks.simple.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@2d0a5990 on test.write.staticlocks.simple.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@24ab5cc2 on test.write.staticlocks.simple.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@b1238d1 on test.write.staticlocks.simple.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@43a787d5 on test.write.staticlocks.simple.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@742744c1 on test.read.receiver.explicit.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@12c3b3bb on test.read.receiver.explicit.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@7ba93d6a on test.read.receiver.explicit.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@31df425b on test.intrinsic.formals.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@5fd97e3 on test.intrinsic.formals.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@33ae5e0 on test.intrinsic.formals.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@30b6484b on test.intrinsic.formals.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@49bfc34a on test.intrinsic.formals.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@7e117290 on test.intrinsic.receiver.explicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@2596909b on test.intrinsic.receiver.explicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@108be382 on test.intrinsic.receiver.explicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@369baf95 on test.intrinsic.receiver.explicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@404385eb on test.intrinsic.receiver.explicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@4bba350b on test.read.staticlocks.simple.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@47c2ae75 on test.read.staticlocks.simple.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@4b665060 on test.read.staticlocks.simple.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@129d9139 on test.read.staticlocks.simple.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@4be69ac3 on test.read.staticlocks.simple.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@4b1cbd7 on test.write.staticlocks.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@18aa1b89 on test.write.staticlocks.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@34fdee6e on test.write.staticlocks.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@36c58b45 on test.write.staticlocks.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@105d8938 on test.write.staticlocks.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@298af155 on test.intrinsic.qualified.Outer1.Outer2
Created com.surelogic.dropsea.ir.drops.locks.LockModel@5a60f825 on test.intrinsic.qualified.Outer1
Created com.surelogic.dropsea.ir.drops.locks.LockModel@69822213 on test.intrinsic.qualified.Outer1
Created com.surelogic.dropsea.ir.drops.locks.LockModel@5799d286 on test.intrinsic.qualified.Outer1
Created com.surelogic.dropsea.ir.drops.locks.LockModel@5b342ebe on test.write.receiver.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@65736b45 on test.write.receiver.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@4c56c158 on test.write.receiver.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@72fb7a1f on test.write.receiver.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@54ab76dd on test.write.receiver.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@116583b4 on test.intrinsic.receiver.qualified.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@594ff143 on test.intrinsic.receiver.qualified.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@6505a1d5 on test.intrinsic.receiver.qualified.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@7e40a120 on test.write.receiver.qualified.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@691643f5 on test.write.receiver.qualified.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@5677c296 on test.write.receiver.qualified.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@6d39138 on test.intrinsic.staticlocks.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@6ae4ef23 on test.intrinsic.staticlocks.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@26b7e346 on test.intrinsic.staticlocks.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@1681339a on test.intrinsic.staticlocks.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@cbcb038 on test.intrinsic.staticlocks.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@42afe6b5 on test.read.staticlocks.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@7840653a on test.read.staticlocks.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@7064da53 on test.read.staticlocks.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@3b80fcb8 on test.read.staticlocks.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@38ce7e8b on test.read.staticlocks.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@55156e9a on test.intrinsic.receiver.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@46a1a56 on test.intrinsic.receiver.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@7260dbd5 on test.intrinsic.receiver.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@31787700 on test.intrinsic.receiver.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@31120539 on test.intrinsic.receiver.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@5386dda on test.write.formals.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@27783211 on test.write.formals.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@406141af on test.write.formals.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@363cde2b on test.write.formals.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@77b021d4 on test.write.formals.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@636f4241 on test.intrinsic.receiver.implicit.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@1ba09647 on test.intrinsic.receiver.implicit.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@21692434 on test.intrinsic.receiver.implicit.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@16018c32 on test.read.staticlocks.simple.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@2edd02c7 on test.read.staticlocks.simple.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@5ccc91ff on test.read.staticlocks.simple.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@3221bbb0 on test.intrinsic.staticlocks.simple.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@7bb54c41 on test.intrinsic.staticlocks.simple.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@52ea87c5 on test.intrinsic.staticlocks.simple.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@33e73771 on test.write.receiver.implicit.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@12d49b99 on test.write.receiver.implicit.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@774dbdfe on test.write.receiver.implicit.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@62c58d5b on test.intrinsic.formals.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@5fcda8c4 on test.intrinsic.formals.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@1bbdf4ba on test.read.qualified.Outer1.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@4660e644 on test.read.qualified.Outer1.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@7454c00 on test.read.formals.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@7de8b995 on test.read.formals.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@68862f88 on test.read.formals.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@35504357 on test.read.formals.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@5b39cb5a on test.read.formals.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@2dda768 on test.intrinsic.staticlocks.simple.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@4796867e on test.intrinsic.staticlocks.simple.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@1d893233 on test.intrinsic.staticlocks.simple.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@3bc94416 on test.intrinsic.staticlocks.simple.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@1c19cadd on test.intrinsic.staticlocks.simple.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@59da585f on test.intrinsic.qualified.Outer1.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@68fb7798 on test.intrinsic.qualified.Outer1.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@591567f5 on test.write.receiver.explicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@6064dc74 on test.write.receiver.explicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@76f49c08 on test.write.receiver.explicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@62c6b289 on test.write.receiver.explicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@5786d64b on test.write.receiver.explicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@1ef257b2 on test.read.formals.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@7a137ac0 on test.read.formals.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@e62282 on test.write.receiver.explicit.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@4cb26ed0 on test.write.receiver.explicit.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@5c2e679b on test.write.receiver.explicit.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@189efa8c on test.write.qualified.Outer1.Outer2
Created com.surelogic.dropsea.ir.drops.locks.LockModel@371af4b3 on test.write.qualified.Outer1
Created com.surelogic.dropsea.ir.drops.locks.LockModel@3191269a on test.write.qualified.Outer1
Created com.surelogic.dropsea.ir.drops.locks.LockModel@739f40de on test.write.qualified.Outer1
Created com.surelogic.dropsea.ir.drops.locks.LockModel@32a5ffe1 on test.intrinsic.staticlocks.qualified.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@2c69c644 on test.intrinsic.staticlocks.qualified.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@7e375986 on test.intrinsic.staticlocks.qualified.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@76c19fab on test.read.qualified.Outer1.Outer2
Created com.surelogic.dropsea.ir.drops.locks.LockModel@562d2ea8 on test.write.staticlocks.simple.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@7942a3e7 on test.write.staticlocks.simple.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@4140714e on test.write.staticlocks.simple.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@c13f075 on test.intrinsic.receiver.explicit.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@aba7eda on test.intrinsic.receiver.explicit.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@68ba9888 on test.intrinsic.receiver.explicit.C
##SUBTASK, Starting parallel EffectsAnalysis [9]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
Starting parallel EffectsAnalysis [9]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
##WORK, 1
##SUBTASK_DONE
##WORK, 1
##SUBTASK_DONE
##WORK, 1
##SUBTASK_DONE
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Starting parallel UtilityAnalysis [6]: 670 for TestRequiresLockOverride
Starting parallel UtilityAnalysis [6]: 670 for TestRequiresLockOverride
##SUBTASK, Starting parallel SingletonAnalysis [7]: 670 for TestRequiresLockOverride
Starting parallel SingletonAnalysis [7]: 670 for TestRequiresLockOverride
##SUBTASK, Starting parallel LockAnalysis [8]: 670 for TestRequiresLockOverride
Starting parallel LockAnalysis [8]: 670 for TestRequiresLockOverride
Looking at @RegionLock("MUTEX is this protects WaitQueue") on Object
Created com.surelogic.dropsea.ir.drops.locks.LockModel@a52a67e on java.lang.Object
Created com.surelogic.dropsea.ir.drops.locks.LockModel@1e0afec0 on test.read.receiver.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@9750a14 on test.read.receiver.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@5dc1d876 on test.read.receiver.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@2ffeea4f on test.read.receiver.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@4eafccbf on test.read.receiver.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@4b5da668 on test.read.receiver.qualified.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@1319463f on test.read.receiver.qualified.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@6af1208f on test.read.receiver.qualified.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@dbbc8ed on test.read.receiver.implicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@6f19518b on test.read.receiver.implicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@3a5d9c02 on test.read.receiver.implicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@6c7ffaba on test.read.receiver.implicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@4572086c on test.read.receiver.implicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@644ede5a on test.write.staticlocks.qualified.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@6bb5ea3f on test.write.staticlocks.qualified.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@34a0c798 on test.write.staticlocks.qualified.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@43c56d80 on test.write.receiver.implicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@24b86331 on test.write.receiver.implicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@676d0e6c on test.write.receiver.implicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@21cf8ffc on test.write.receiver.implicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@47c0ee42 on test.write.receiver.implicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@1243a34e on test.write.qualified.Outer1.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@161edb7a on test.write.qualified.Outer1.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@257364fd on test.intrinsic.receiver.implicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@7760ed94 on test.intrinsic.receiver.implicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@4cf38225 on test.intrinsic.receiver.implicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@2fc4066 on test.intrinsic.receiver.implicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@6a4f4a92 on test.intrinsic.receiver.implicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@785dc35d on test.read.receiver.implicit.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@3a53da82 on test.read.receiver.implicit.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@2630d826 on test.read.receiver.implicit.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@68d5b221 on test.read.receiver.explicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@754a0dd8 on test.read.receiver.explicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@4b71639d on test.read.receiver.explicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@6393c3a7 on test.read.receiver.explicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@29227e66 on test.read.receiver.explicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@307b292 on test.read.staticlocks.qualified.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@2cdc1750 on test.read.staticlocks.qualified.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@4a1d4135 on test.read.staticlocks.qualified.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@2c7fbdef on test.read.qualified.Outer1
Created com.surelogic.dropsea.ir.drops.locks.LockModel@7f7878b0 on test.read.qualified.Outer1
Created com.surelogic.dropsea.ir.drops.locks.LockModel@64a730bb on test.read.qualified.Outer1
Created com.surelogic.dropsea.ir.drops.locks.LockModel@63256ca0 on test.write.formals.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@3823520a on test.write.formals.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@ee107c1 on test.write.staticlocks.simple.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@2d0a5990 on test.write.staticlocks.simple.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@24ab5cc2 on test.write.staticlocks.simple.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@b1238d1 on test.write.staticlocks.simple.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@43a787d5 on test.write.staticlocks.simple.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@742744c1 on test.read.receiver.explicit.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@12c3b3bb on test.read.receiver.explicit.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@7ba93d6a on test.read.receiver.explicit.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@31df425b on test.intrinsic.formals.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@5fd97e3 on test.intrinsic.formals.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@33ae5e0 on test.intrinsic.formals.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@30b6484b on test.intrinsic.formals.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@49bfc34a on test.intrinsic.formals.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@7e117290 on test.intrinsic.receiver.explicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@2596909b on test.intrinsic.receiver.explicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@108be382 on test.intrinsic.receiver.explicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@369baf95 on test.intrinsic.receiver.explicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@404385eb on test.intrinsic.receiver.explicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@4bba350b on test.read.staticlocks.simple.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@47c2ae75 on test.read.staticlocks.simple.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@4b665060 on test.read.staticlocks.simple.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@129d9139 on test.read.staticlocks.simple.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@4be69ac3 on test.read.staticlocks.simple.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@4b1cbd7 on test.write.staticlocks.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@18aa1b89 on test.write.staticlocks.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@34fdee6e on test.write.staticlocks.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@36c58b45 on test.write.staticlocks.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@105d8938 on test.write.staticlocks.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@298af155 on test.intrinsic.qualified.Outer1.Outer2
Created com.surelogic.dropsea.ir.drops.locks.LockModel@5a60f825 on test.intrinsic.qualified.Outer1
Created com.surelogic.dropsea.ir.drops.locks.LockModel@69822213 on test.intrinsic.qualified.Outer1
Created com.surelogic.dropsea.ir.drops.locks.LockModel@5799d286 on test.intrinsic.qualified.Outer1
Created com.surelogic.dropsea.ir.drops.locks.LockModel@5b342ebe on test.write.receiver.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@65736b45 on test.write.receiver.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@4c56c158 on test.write.receiver.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@72fb7a1f on test.write.receiver.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@54ab76dd on test.write.receiver.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@116583b4 on test.intrinsic.receiver.qualified.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@594ff143 on test.intrinsic.receiver.qualified.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@6505a1d5 on test.intrinsic.receiver.qualified.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@7e40a120 on test.write.receiver.qualified.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@691643f5 on test.write.receiver.qualified.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@5677c296 on test.write.receiver.qualified.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@6d39138 on test.intrinsic.staticlocks.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@6ae4ef23 on test.intrinsic.staticlocks.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@26b7e346 on test.intrinsic.staticlocks.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@1681339a on test.intrinsic.staticlocks.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@cbcb038 on test.intrinsic.staticlocks.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@42afe6b5 on test.read.staticlocks.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@7840653a on test.read.staticlocks.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@7064da53 on test.read.staticlocks.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@3b80fcb8 on test.read.staticlocks.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@38ce7e8b on test.read.staticlocks.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@55156e9a on test.intrinsic.receiver.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@46a1a56 on test.intrinsic.receiver.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@7260dbd5 on test.intrinsic.receiver.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@31787700 on test.intrinsic.receiver.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@31120539 on test.intrinsic.receiver.qualified.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@5386dda on test.write.formals.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@27783211 on test.write.formals.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@406141af on test.write.formals.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@363cde2b on test.write.formals.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@77b021d4 on test.write.formals.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@636f4241 on test.intrinsic.receiver.implicit.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@1ba09647 on test.intrinsic.receiver.implicit.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@21692434 on test.intrinsic.receiver.implicit.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@16018c32 on test.read.staticlocks.simple.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@2edd02c7 on test.read.staticlocks.simple.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@5ccc91ff on test.read.staticlocks.simple.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@3221bbb0 on test.intrinsic.staticlocks.simple.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@7bb54c41 on test.intrinsic.staticlocks.simple.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@52ea87c5 on test.intrinsic.staticlocks.simple.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@33e73771 on test.write.receiver.implicit.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@12d49b99 on test.write.receiver.implicit.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@774dbdfe on test.write.receiver.implicit.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@62c58d5b on test.intrinsic.formals.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@5fcda8c4 on test.intrinsic.formals.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@1bbdf4ba on test.read.qualified.Outer1.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@4660e644 on test.read.qualified.Outer1.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@7454c00 on test.read.formals.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@7de8b995 on test.read.formals.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@68862f88 on test.read.formals.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@35504357 on test.read.formals.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@5b39cb5a on test.read.formals.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@2dda768 on test.intrinsic.staticlocks.simple.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@4796867e on test.intrinsic.staticlocks.simple.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@1d893233 on test.intrinsic.staticlocks.simple.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@3bc94416 on test.intrinsic.staticlocks.simple.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@1c19cadd on test.intrinsic.staticlocks.simple.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@59da585f on test.intrinsic.qualified.Outer1.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@68fb7798 on test.intrinsic.qualified.Outer1.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@591567f5 on test.write.receiver.explicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@6064dc74 on test.write.receiver.explicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@76f49c08 on test.write.receiver.explicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@62c6b289 on test.write.receiver.explicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@5786d64b on test.write.receiver.explicit.X
Created com.surelogic.dropsea.ir.drops.locks.LockModel@1ef257b2 on test.read.formals.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@7a137ac0 on test.read.formals.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@e62282 on test.write.receiver.explicit.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@4cb26ed0 on test.write.receiver.explicit.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@5c2e679b on test.write.receiver.explicit.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@189efa8c on test.write.qualified.Outer1.Outer2
Created com.surelogic.dropsea.ir.drops.locks.LockModel@371af4b3 on test.write.qualified.Outer1
Created com.surelogic.dropsea.ir.drops.locks.LockModel@3191269a on test.write.qualified.Outer1
Created com.surelogic.dropsea.ir.drops.locks.LockModel@739f40de on test.write.qualified.Outer1
Created com.surelogic.dropsea.ir.drops.locks.LockModel@32a5ffe1 on test.intrinsic.staticlocks.qualified.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@2c69c644 on test.intrinsic.staticlocks.qualified.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@7e375986 on test.intrinsic.staticlocks.qualified.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@76c19fab on test.read.qualified.Outer1.Outer2
Created com.surelogic.dropsea.ir.drops.locks.LockModel@562d2ea8 on test.write.staticlocks.simple.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@7942a3e7 on test.write.staticlocks.simple.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@4140714e on test.write.staticlocks.simple.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@c13f075 on test.intrinsic.receiver.explicit.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@aba7eda on test.intrinsic.receiver.explicit.C
Created com.surelogic.dropsea.ir.drops.locks.LockModel@68ba9888 on test.intrinsic.receiver.explicit.C
##SUBTASK, Starting parallel EffectsAnalysis [9]: 670 for TestRequiresLockOverride
Starting parallel EffectsAnalysis [9]: 670 for TestRequiresLockOverride
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.simple.XBad9
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.implicit.XBad23
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.qualified.C
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.simple.XBad21
##SUBTASK, Checking [ Utility class ] test.read.formals.XBad4
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.qualified.Good3
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.simple.Good1
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.formals.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.simple.XBad21
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.explicit.XBad17
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.implicit.XBad23
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.qualified.C
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.simple.XBad21
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.simple.XBad9
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.simple.Good1
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.qualified.Good3
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.simple.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.formals.XBad4
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.qualified.C
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.implicit.XBad23
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.explicit.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.explicit.XBad17
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.simple.XBad9
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.qualified.Good3
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.simple.XBad21
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.simple.Good1
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.implicit.XBad23
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.explicit.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.qualified.Good3
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.formals.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.simple.XBad9
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.formals.XBad5
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.simple.XGood4
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.qualified.C
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.implicit.XBad24
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.implicit.XBad24
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.implicit.XBad24
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.simple.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.simple.XGood4
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.simple.XGood4
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.qualified.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.qualified.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.qualified.Bad2
##SUBTASK, Checking [ Singleton class ] test.read.formals.XBad5
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.explicit.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.explicit.XBad18
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.qualified.Good1
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.simple.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.implicit.XBad24
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.simple.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.simple.XBad10
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.qualified.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.qualified.Good1
##SUBTASK, Checking [ Lock policy ] test.read.formals.XBad5
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.qualified.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.explicit.XBad18
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.simple.Bad1
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.qualified.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.qualified.X
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.qualified.X
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.qualified.X
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.qualified.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.qualified.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.qualified.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.formals.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.formals.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.formals.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.formals.XBad6
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.qualified.Bad1
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.simple.XGood4
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.qualified.Good2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.qualified.Good2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.qualified.Good2
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.simple.XBad10
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.simple.Bad1
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.explicit.XBad18
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.implicit.XBad25
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.implicit.XBad25
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.implicit.XBad25
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.formals.XBad6
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.explicit.XBad19
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.qualified.Good2
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.qualified.Good3
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.formals.XBad7
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.formals.XBad7
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.simple.XGood5
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.explicit.XBad19
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.explicit.XBad19
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.formals.XBad7
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.qualified.Good3
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.implicit.XBad25
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.qualified.Good3
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.simple.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.explicit.XBad19
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.simple.XBad11
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.simple.XBad11
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.explicit.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.explicit.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.explicit.XBad20
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.simple.XGood5
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.simple.XGood5
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.simple.XBad11
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.implicit.XBad26
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.implicit.XBad26
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.simple.Good2
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.formals.XBad7
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.implicit.XBad26
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.simple.Good2
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.simple.XGood5
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.qualified.Good3
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.implicit.XBad26
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.simple.Good2
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.simple.XGood6
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.formals.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.qualified.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.qualified.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.qualified.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.explicit.XBad20
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.simple.XBad11
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.simple.XGood6
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.simple.Good2
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.qualified.C
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.simple.XBad12
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.formals.XBad8
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.explicit.XBad21
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.explicit.XBad21
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.explicit.XBad21
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.explicit.XBad21
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.explicit.XBad22
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.explicit.XBad22
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.explicit.XBad22
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.explicit.XBad22
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.explicit.XBad23
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.explicit.XBad23
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.explicit.XBad23
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.explicit.XBad23
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.explicit.XBad24
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.explicit.XBad24
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.explicit.XBad24
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.explicit.XBad24
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.qualified.Bad2
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.explicit.XBad25
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.explicit.XBad25
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.explicit.XBad25
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.simple.XBad12
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.simple.Good3
##SUBTASK, Checking [ Singleton class ] test.write.receiver.qualified.C
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.qualified.C
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.simple.XBad12
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.formals.XBad8
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.simple.XGood6
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.qualified.X
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.qualified.X
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.qualified.X
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.simple.Good3
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.explicit.XBad25
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.simple.Good3
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.formals.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.explicit.XBad26
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.simple.XBad12
##SUBTASK, Checking [ Utility class ] test.read.formals.XGood1
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.explicit.XBad26
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.explicit.XBad26
##SUBTASK, Checking [ Singleton class ] test.read.formals.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.simple.XGood6
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.formals.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.explicit.XBad26
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.simple.Good3
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.implicit.C
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.simple.Bad2
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.simple.XBad22
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.simple.XBad22
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.simple.XBad22
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.implicit.C
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.implicit.C
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.simple.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.simple.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.simple.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.simple.XBad13
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.qualified.C
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.simple.Bad2
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.simple.XBad13
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.simple.XBad22
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.formals.XGood1
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.simple.X
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.simple.X
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.simple.X
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.qualified.Good1
##SUBTASK, Checking [ Utility class ] test.read.formals.XGood2
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.simple.XBad23
##SUBTASK, Checking [ Singleton class ] test.read.formals.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.qualified.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.qualified.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.formals.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.simple.XBad23
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.simple.XBad23
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.qualified.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.implicit.C
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.simple.XBad23
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.formals.XGood2
##SUBTASK, Checking [ Utility class ] test.write.receiver.qualified.Bad1
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.simple.XBad24
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.simple.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.qualified.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.qualified.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.formals.XBad9
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.formals.XBad9
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.implicit.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.implicit.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.implicit.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.qualified.Bad1
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.simple.XBad24
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.simple.XBad24
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.simple.XBad14
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.simple.XBad14
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.simple.XBad14
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.formals.XBad9
##SUBTASK, Checking [ Utility class ] test.write.receiver.qualified.Good2a
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.qualified.Good2a
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.implicit.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.simple.XBad24
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.simple.XBad14
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.qualified.C
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.qualified.C
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.formals.XBad9
##SUBTASK, Checking [ Lock policy ] test.write.receiver.qualified.Good2a
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.simple.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.qualified.C
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.formals.XBad10
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.implicit.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.implicit.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.implicit.Bad1
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.simple.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.simple.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.formals.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.formals.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.qualified.Good2a
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.implicit.Bad1
##SUBTASK, Checking [ Region effects ] test.read.formals.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.simple.XBad15
##SUBTASK, Checking [ Utility class ] test.write.receiver.qualified.Good2b
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.implicit.Good2
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.implicit.Good2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.implicit.Good2
##SUBTASK, Checking [ Utility class ] test.read.formals.XBad11
##SUBTASK, Checking [ Singleton class ] test.write.receiver.qualified.Good2b
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.qualified.Good2b
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.simple.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.formals.XBad11
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.formals.XBad11
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.simple.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.simple.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.implicit.Good2
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.formals.XBad11
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.implicit.Good3
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.implicit.Good3
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.simple.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.implicit.Good3
##SUBTASK, Checking [ Utility class ] test.read.formals.XBad12
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.formals.XBad12
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.simple.XBad17
##SUBTASK, Checking [ Region effects ] test.write.receiver.qualified.Good2b
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.simple.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.simple.XBad17
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.qualified.Good3a
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.qualified.Good3a
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.qualified.Good3a
##SUBTASK, Checking [ Lock policy ] test.read.formals.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.implicit.Good3
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.implicit.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.implicit.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.implicit.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.formals.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.simple.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.formals.XBad13
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.simple.XBad18
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.qualified.Good3a
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.formals.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.formals.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.implicit.Bad2
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.simple.XBad18
##SUBTASK, Checking [ Utility class ] test.write.receiver.qualified.Good3b
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.qualified.Good3b
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.simple.XBad18
##SUBTASK, Checking [ Region effects ] test.read.formals.XBad13
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.qualified.Good3b
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.implicit.X
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.implicit.X
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.formals.XBad14
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.implicit.X
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.formals.XBad14
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.simple.XBad18
##SUBTASK, Checking [ Lock policy ] test.read.formals.XBad14
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.simple.XBad19
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.simple.XBad19
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.simple.XBad19
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.qualified.Good3b
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.formals.XBad14
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.qualified.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.qualified.Bad2
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.formals.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.formals.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.formals.XBad15
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.simple.XBad19
##SUBTASK, Checking [ Lock policy ] test.write.receiver.qualified.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.simple.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.simple.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.simple.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.qualified.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.qualified.X
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.qualified.X
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.qualified.X
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.simple.XBad20
##SUBTASK, Checking [ Region effects ] test.read.formals.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.simple.XBad21
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.simple.XBad21
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.simple.XBad21
##SUBTASK, Checking [ Utility class ] test.read.formals.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.formals.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.formals.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.simple.XBad21
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.formals.XBad16
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.simple.XBad22
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.simple.XBad22
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.simple.XBad22
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.formals.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.formals.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.formals.XBad17
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.simple.XBad22
##SUBTASK, Checking [ Region effects ] test.read.formals.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.simple.XBad23
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.simple.XBad23
##SUBTASK, Checking [ Utility class ] test.read.formals.XBad18
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.simple.XBad23
##SUBTASK, Checking [ Singleton class ] test.read.formals.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.formals.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.simple.XBad23
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.formals.XBad18
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.simple.XBad24
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.simple.XBad24
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.formals.XBad19
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.simple.XBad24
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.formals.XBad19
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.formals.XBad19
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.simple.XBad24
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.formals.XBad19
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.explicit.C
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.explicit.C
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.explicit.C
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.formals.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.formals.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.formals.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.formals.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.formals.XBad21
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.formals.XBad21
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.formals.XBad21
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.formals.XBad21
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.formals.XBad22
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.formals.XBad22
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.formals.XBad22
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.formals.XBad22
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.explicit.C
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.formals.XBad23
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.formals.XBad23
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.formals.XBad23
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.formals.XBad23
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.explicit.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.explicit.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.explicit.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.formals.XBad24
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.formals.XBad24
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.formals.XBad24
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.explicit.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.explicit.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.explicit.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.explicit.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.formals.XBad24
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.formals.XBad25
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.explicit.Bad1
##SUBTASK, Checking [ Singleton class ] test.read.formals.XBad25
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.formals.XBad25
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.formals.XBad25
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.explicit.Good2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.explicit.Good2
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.formals.XBad26
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.formals.XBad26
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.explicit.Good2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.formals.XBad26
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.formals.XBad26
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.qualified.Outer1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.qualified.Outer1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.qualified.Outer1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.explicit.Good2
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.explicit.Good3
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.explicit.Good3
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.explicit.Good3
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.explicit.Good3
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.explicit.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.explicit.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.explicit.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.explicit.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.explicit.X
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.explicit.X
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.explicit.X
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.implicit.X
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.implicit.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.implicit.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.implicit.XBad1
##SUBTASK, Checking [ Region effects ] test.read.qualified.Outer1
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.qualified.Outer1.C
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.implicit.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.qualified.Outer1.C
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.qualified.Outer1.C
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.implicit.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.implicit.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.implicit.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.implicit.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.implicit.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.implicit.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.implicit.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.qualified.X
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.qualified.X
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.qualified.XBad1
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.qualified.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.implicit.XBad3
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.qualified.X
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.qualified.XBad1
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.simple.X
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.implicit.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.qualified.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.qualified.Outer1.C
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.simple.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.simple.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.simple.XBad1
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.qualified.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.qualified.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.implicit.XBad4
##SUBTASK, Checking [ Utility class ] test.read.qualified.Outer1.Bad1
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.qualified.XBad1
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.qualified.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.qualified.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.qualified.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.qualified.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.qualified.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.qualified.Outer1.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.implicit.XBad4
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.qualified.XBad1
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.qualified.Outer1.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.qualified.C
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.simple.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.implicit.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.simple.XBad2
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.qualified.XBad2
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.qualified.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.qualified.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.qualified.XBad2
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.explicit.X
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.qualified.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.qualified.Outer1.Bad1
##SUBTASK, Checking [ Utility class ] test.write.receiver.qualified.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.qualified.XBad3
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.simple.XBad2
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.implicit.XGood1
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.qualified.XBad3
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.qualified.Outer1.Good1
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.qualified.XBad1
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.qualified.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.explicit.XBad1
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.qualified.XBad3
##SUBTASK, Checking [ Singleton class ] test.read.qualified.Outer1.Good1
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.simple.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.implicit.XGood1
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.qualified.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.qualified.XBad3
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.qualified.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.qualified.XBad3
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.qualified.XBad4
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.qualified.XBad2
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.explicit.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.qualified.Outer1.Good1
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.implicit.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.qualified.Good1
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.simple.XBad2
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.simple.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.simple.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.qualified.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.qualified.XBad4
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.simple.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.implicit.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.qualified.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.qualified.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.implicit.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.implicit.XGood2
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.explicit.XBad1
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.qualified.XBad2
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.qualified.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.qualified.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.qualified.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.qualified.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.explicit.XBad1
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.explicit.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.explicit.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.explicit.XBad2
##SUBTASK, Checking [ Region effects ] test.read.qualified.Outer1.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.simple.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.qualified.Outer1.Good2a
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.qualified.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.qualified.Outer1.Good2a
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.qualified.Outer1.Good2a
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.qualified.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.qualified.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.qualified.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.qualified.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.qualified.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.qualified.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.qualified.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.qualified.Outer1.Good2a
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.qualified.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.qualified.Outer1.Bad2a
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.qualified.Outer1.Bad2a
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.qualified.XBad7
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.simple.XBad4
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.implicit.XGood2
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.qualified.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.qualified.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.qualified.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.qualified.XBad4
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.qualified.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.qualified.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.qualified.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.qualified.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.qualified.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.qualified.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.qualified.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.qualified.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.qualified.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.qualified.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.qualified.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.qualified.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.qualified.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.qualified.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.qualified.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.qualified.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.qualified.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.qualified.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.qualified.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.qualified.XBad5
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.qualified.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.qualified.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.qualified.XBad5
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.implicit.XGood2
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.qualified.XGood1
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.explicit.XBad2
##SUBTASK, Checking [ Lock policy ] test.read.qualified.Outer1.Bad2a
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.explicit.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.explicit.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.explicit.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.qualified.Outer1.Bad2a
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.qualified.Outer1.Bad2b
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.qualified.Outer1.Bad2b
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.qualified.Outer1.Bad2b
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.qualified.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.qualified.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.qualified.Outer1.Bad2b
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.qualified.Outer1.Bad2c
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.qualified.Outer1.Bad2c
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.qualified.Outer1.Bad2c
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.qualified.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.qualified.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.qualified.XGood2
##SUBTASK, Checking [ Singleton class ] test.write.receiver.qualified.XBad7
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.qualified.XBad7
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.simple.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.simple.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.qualified.XBad7
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.implicit.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.implicit.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.implicit.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.qualified.Good2a
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.qualified.Good2a
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.qualified.Good2a
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.simple.XBad4
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.qualified.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.qualified.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.qualified.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.simple.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.simple.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.simple.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.simple.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.qualified.Good2a
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.qualified.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.qualified.Good2n
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.qualified.Good2n
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.qualified.Good2n
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.qualified.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.qualified.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.qualified.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.implicit.XGood3
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.implicit.XBad5
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.qualified.Outer1.Bad2c
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.qualified.Outer1.Bad2d
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.qualified.Outer1.Bad2d
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.qualified.Outer1.Bad2d
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.qualified.Outer1.Bad2d
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.qualified.Outer1.Bad3
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.qualified.Outer1.Bad3
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.qualified.Outer1.Bad3
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.qualified.Outer1.Bad3
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.qualified.Outer1.Bad4
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.qualified.Outer1.Bad4
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.qualified.Outer1.Bad4
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.qualified.Outer1.Bad4
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.qualified.Outer1.Bad5
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.qualified.Outer1.Bad5
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.qualified.Outer1.Bad5
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.qualified.Outer1.Bad5
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.qualified.Outer1.Outer2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.qualified.Outer1.Outer2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.qualified.Outer1.Outer2
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.explicit.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.explicit.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.explicit.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.explicit.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.explicit.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.explicit.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.explicit.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.explicit.XGood1
##SUBTASK, Checking [ Region effects ] test.read.qualified.Outer1.Outer2
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.qualified.Outer1.Outer2.Good3
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.qualified.Outer1.Outer2.Good3
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.qualified.Outer1.Outer2.Good3
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.explicit.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.explicit.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.explicit.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.explicit.XGood2
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.qualified.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.qualified.Outer1.Outer2.Good3
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.explicit.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.qualified.Outer1.Outer2.Bad6
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.qualified.Outer1.Outer2.Bad6
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.explicit.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.implicit.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.implicit.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.qualified.XBad8
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.qualified.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.simple.XBad6
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.qualified.XBad6
##SUBTASK, Checking [ Singleton class ] test.write.receiver.qualified.XBad8
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.qualified.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.implicit.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.qualified.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.qualified.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.qualified.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.implicit.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.implicit.XBad6
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.explicit.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.explicit.XGood3
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.qualified.Good2n
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.qualified.Outer1.Outer2.Bad6
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.qualified.Good3a
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.qualified.Good3a
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.qualified.Good3a
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.qualified.Outer1.Outer2.Bad6
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.qualified.X
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.qualified.X
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.qualified.X
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.explicit.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.explicit.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.explicit.XBad5
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.implicit.XBad6
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.qualified.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.qualified.XBad6
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.simple.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.qualified.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.explicit.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.qualified.X
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.qualified.Good3a
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.explicit.XBad5
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.simple.C
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.simple.C
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.simple.C
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.explicit.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.explicit.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.explicit.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.explicit.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.explicit.XBad7
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.explicit.XBad7
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.explicit.XBad7
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.explicit.XBad7
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.explicit.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.explicit.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.explicit.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.explicit.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.explicit.XBad9
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.explicit.XBad9
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.explicit.XBad9
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.explicit.XBad9
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.explicit.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.explicit.XBad10
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.qualified.XBad6
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.implicit.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.qualified.XBad7
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.simple.XBad6
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.implicit.XBad7
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.qualified.XBad7
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.qualified.XBad7
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.simple.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.qualified.XBad7
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.simple.XBad7
##SUBTASK, Checking [ Region effects ] test.write.receiver.qualified.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.qualified.XBad9
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.qualified.XBad9
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.qualified.XBad9
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.explicit.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.qualified.XBad9
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.explicit.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.qualified.XBad10
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.explicit.XBad11
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.qualified.Good3b
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.qualified.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.qualified.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.qualified.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.qualified.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.qualified.Good3b
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.qualified.Good3b
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.qualified.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.qualified.XBad7
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.qualified.XBad7
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.qualified.XBad7
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.qualified.Good3b
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.qualified.Bad2
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.explicit.XBad11
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.explicit.XBad11
##SUBTASK, Checking [ Singleton class ] test.write.receiver.qualified.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.qualified.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.explicit.XBad11
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.explicit.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.explicit.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.qualified.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.qualified.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.qualified.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.qualified.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.simple.XBad7
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.qualified.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.qualified.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.qualified.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.simple.XBad7
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.simple.C
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.qualified.XBad8
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.qualified.Bad2
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.qualified.Outer1.Bad2a
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.qualified.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.explicit.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.qualified.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.qualified.X
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.qualified.X
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.explicit.XBad12
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.simple.XBad7
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.explicit.XBad13
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.simple.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.qualified.XGood1
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.explicit.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.explicit.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.qualified.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.qualified.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.qualified.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.explicit.XBad13
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.explicit.XBad14
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.explicit.XBad14
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.explicit.XBad14
[GC (Allocation Failure)  163596K->72825K(193536K), 0.0147950 secs]
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.implicit.XBad7
##SUBTASK, Checking [ Region effects ] test.write.receiver.qualified.XGood2
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.qualified.XBad9
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.qualified.XBad7
##SUBTASK, Checking [ Singleton class ] test.intrinsic.qualified.Outer1.Bad2a
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.qualified.X
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.simple.XBad8
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.qualified.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.qualified.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.qualified.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.qualified.XBad9
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.qualified.Outer1.Bad2a
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.qualified.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.qualified.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.qualified.XGood3
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.simple.XBad8
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.explicit.XBad14
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.qualified.Outer1.Bad2a
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.implicit.XBad7
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.qualified.Outer1.Bad2b
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.qualified.Outer1.Bad2b
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.qualified.Outer1.Bad2b
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.implicit.XBad7
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.qualified.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.implicit.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.implicit.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.implicit.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.qualified.Outer1.Bad2b
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.qualified.Outer1.Bad2c
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.explicit.XBad15
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.qualified.XBad9
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.explicit.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.qualified.XBad8
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.simple.XBad8
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.simple.XBad9
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.simple.XBad9
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.implicit.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.qualified.XBad11
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.qualified.Outer1.Bad2c
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.qualified.XBad9
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.explicit.XBad15
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.qualified.XBad9
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.qualified.XBad10
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.implicit.XBad9
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.simple.XBad9
##SUBTASK, Checking [ Lock policy ] test.intrinsic.qualified.Outer1.Bad2c
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.explicit.XBad15
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.qualified.XBad11
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.qualified.XBad11
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.simple.XBad9
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.explicit.XBad16
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.qualified.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.qualified.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.qualified.XBad9
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.qualified.XBad9
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.qualified.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.qualified.XBad9
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.qualified.XBad11
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.qualified.XBad11
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.qualified.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.qualified.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.qualified.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.qualified.Outer1.Bad2c
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.qualified.XBad10
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.implicit.XBad9
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.qualified.XBad11
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.explicit.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.explicit.XBad16
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.simple.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.simple.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.simple.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.explicit.XBad16
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.qualified.XBad11
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.implicit.XBad9
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.qualified.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.qualified.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.qualified.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.qualified.Outer1.Bad3
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.qualified.XBad11
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.qualified.XBad12
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.qualified.XBad11
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.qualified.XBad11
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.implicit.XBad9
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.qualified.XBad12
##SUBTASK, Checking [ Utility class ] test.write.receiver.qualified.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.qualified.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.qualified.Outer1.Bad3
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.qualified.XBad13
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.qualified.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.qualified.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.qualified.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.qualified.XBad14
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.qualified.XBad12
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.implicit.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.implicit.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.implicit.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.qualified.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.qualified.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.qualified.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.implicit.XBad10
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.qualified.X
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.implicit.XBad11
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.implicit.XBad11
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.implicit.XBad11
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.qualified.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.qualified.XBad1
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.qualified.XBad11
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.qualified.XBad11
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.qualified.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.qualified.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.simple.XBad10
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.qualified.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.simple.XBad11
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.simple.XBad11
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.simple.XBad11
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.qualified.XBad12
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.implicit.XBad11
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.qualified.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.qualified.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.qualified.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.implicit.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.implicit.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.implicit.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.qualified.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.qualified.XBad14
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.qualified.XBad1
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.qualified.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.qualified.XBad14
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.qualified.XBad14
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.qualified.XBad14
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.qualified.XBad14
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.qualified.XBad15
##SUBTASK, Checking [ Lock policy ] test.intrinsic.qualified.Outer1.Bad3
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.qualified.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.qualified.XBad15
##SUBTASK, Checking [ Singleton class ] test.write.receiver.qualified.XBad14
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.qualified.XBad14
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.qualified.XBad15
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.qualified.XBad1
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.qualified.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.qualified.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.qualified.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.qualified.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.qualified.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.qualified.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.qualified.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.qualified.XBad14
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.qualified.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.qualified.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.qualified.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.qualified.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.qualified.Outer1.Bad3
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.simple.XBad11
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.simple.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.qualified.Outer1.Bad4
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.qualified.Outer1.Bad4
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.qualified.Outer1.Bad4
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.qualified.Outer1.Bad4
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.qualified.Outer1.Bad5
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.qualified.Outer1.Bad5
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.qualified.Outer1.Bad5
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.qualified.XBad3
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.implicit.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.qualified.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.qualified.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.qualified.XBad4
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.qualified.XBad14
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.qualified.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.qualified.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.qualified.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.qualified.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.qualified.XBad14
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.implicit.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.implicit.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.implicit.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.simple.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.simple.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.qualified.XBad14
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.qualified.XBad5
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.qualified.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.qualified.XBad5
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.qualified.Outer1.Bad5
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.qualified.XBad18
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.qualified.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.qualified.Outer1.Outer2
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.qualified.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.qualified.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.qualified.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.qualified.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.implicit.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.qualified.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.qualified.Outer1.Outer2
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.implicit.XBad14
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.implicit.XBad14
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.implicit.XBad14
##SUBTASK, Checking [ Singleton class ] test.write.receiver.qualified.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.qualified.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.implicit.XBad14
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.qualified.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.qualified.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.qualified.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.qualified.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.qualified.XGood4
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.implicit.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.implicit.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.implicit.XBad15
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.simple.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.simple.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.simple.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.simple.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.implicit.XBad15
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.implicit.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.implicit.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.implicit.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.qualified.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.qualified.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.qualified.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.implicit.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.qualified.Outer1.Outer2
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.implicit.XBad17
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.qualified.XBad15
##SUBTASK, Checking [ Region effects ] test.intrinsic.qualified.Outer1.Outer2
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.implicit.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.qualified.XBad6
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.simple.XBad13
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.qualified.XBad19
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.qualified.XBad19
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.qualified.XBad19
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.simple.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.simple.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.simple.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.qualified.XBad19
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.qualified.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.qualified.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.qualified.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.qualified.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.qualified.XBad21
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.qualified.XBad21
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.simple.XGood1
##SUBTASK, Checking [ Singleton class ] test.write.receiver.qualified.XGood4
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.qualified.XBad21
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.simple.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.simple.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.simple.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.qualified.XBad21
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.qualified.XBad22
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.qualified.XBad22
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.qualified.XBad22
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.qualified.XBad22
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.simple.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.qualified.XBad23
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.qualified.XBad23
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.qualified.XBad7
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.qualified.XBad7
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.qualified.XBad7
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.qualified.XBad7
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.implicit.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.qualified.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.qualified.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.qualified.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.qualified.XBad8
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.qualified.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.qualified.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.qualified.Outer1.Outer2.Good3
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.qualified.XBad9
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.qualified.XBad9
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.qualified.XBad9
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.qualified.Outer1.Outer2.Good3
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.implicit.XBad17
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.simple.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.qualified.XBad23
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.implicit.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.implicit.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.implicit.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.qualified.XBad23
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.qualified.XBad24
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.qualified.XBad24
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.qualified.XBad24
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.implicit.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.qualified.XBad24
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.implicit.XBad19
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.qualified.XBad25
##SUBTASK, Checking [ Lock policy ] test.write.receiver.qualified.XGood4
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.implicit.XBad19
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.implicit.XBad19
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.implicit.XBad19
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.implicit.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.implicit.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.implicit.XBad20
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.implicit.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.implicit.XBad21
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.implicit.XBad21
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.implicit.XBad21
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.implicit.XBad21
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.implicit.XBad22
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.implicit.XBad22
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.implicit.XBad22
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.implicit.XBad22
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.simple.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.simple.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.simple.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.simple.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.simple.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.simple.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.simple.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.simple.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.simple.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.simple.XBad4
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.qualified.XBad16
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.simple.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.simple.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.simple.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.simple.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.simple.XBad14
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.simple.XBad14
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.simple.XBad14
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.qualified.XBad9
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.qualified.XBad10
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.qualified.XBad16
##SUBTASK, Checking [ Lock policy ] test.intrinsic.qualified.Outer1.Outer2.Good3
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.qualified.XGood4
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.qualified.XBad25
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.qualified.XBad25
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.qualified.XGood5
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.qualified.XGood5
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.qualified.XGood5
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.simple.XBad14
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.simple.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.simple.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.simple.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.simple.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.qualified.XBad17
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.simple.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.simple.XBad5
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.qualified.XBad10
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.simple.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.simple.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.simple.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.qualified.XGood5
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.simple.XBad6
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.simple.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.simple.XBad16
##SUBTASK, Checking [ Region effects ] test.intrinsic.qualified.Outer1.Outer2.Good3
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.qualified.Outer1.Outer2.Bad6
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.qualified.Outer1.Outer2.Bad6
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.qualified.Outer1.Outer2.Bad6
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.simple.XBad16
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.qualified.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.qualified.XBad25
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.qualified.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.receiver.qualified.XBad26
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.receiver.qualified.XBad26
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.receiver.qualified.XBad26
##SUBTASK, Checking [ Region effects ] test.intrinsic.qualified.Outer1.Outer2.Bad6
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.simple.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.simple.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.simple.XBad17
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.simple.XBad7
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.qualified.XGood6
##SUBTASK, Checking [ Utility class ] test.intrinsic.qualified.X
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.qualified.X
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.qualified.X
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.qualified.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.simple.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.qualified.XGood6
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.simple.XBad7
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.qualified.XBad17
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.qualified.XBad10
##SUBTASK, Checking [ Region effects ] test.intrinsic.receiver.qualified.XBad26
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.simple.XBad7
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.qualified.Outer1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.qualified.Outer1
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.qualified.XGood6
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.qualified.Outer1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.qualified.X
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.qualified.XBad11
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.qualified.XBad11
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.qualified.XBad11
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.qualified.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.qualified.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.qualified.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.simple.C
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.simple.C
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.simple.XBad7
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.simple.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.simple.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.qualified.XBad18
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.qualified.XBad11
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.qualified.XGood6
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.simple.C
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.qualified.XBad12
##SUBTASK, Checking [ Utility class ] test.write.receiver.qualified.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.qualified.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.qualified.XBad16
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.qualified.XBad19
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.qualified.XBad19
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.qualified.XBad19
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.qualified.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.simple.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.qualified.XBad19
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.simple.XBad8
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.simple.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.qualified.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.qualified.XBad17
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.simple.XBad19
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.simple.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.simple.XBad8
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.simple.XBad19
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.simple.XBad19
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.simple.XBad8
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.qualified.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.qualified.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.qualified.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.simple.XBad9
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.qualified.XBad20
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.simple.XBad9
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.simple.XBad19
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.simple.XBad9
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.qualified.XBad12
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.qualified.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.qualified.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.qualified.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.qualified.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.simple.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.simple.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.simple.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.qualified.XBad13
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.qualified.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.qualified.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.qualified.XGood1
##SUBTASK, Checking [ Region effects ] test.write.receiver.qualified.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.qualified.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.qualified.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.qualified.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.simple.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.qualified.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.qualified.XBad20
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.simple.XBad21
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.simple.XBad9
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.simple.XBad21
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.simple.XBad21
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.qualified.XBad20
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.qualified.XGood2
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.qualified.XBad21
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.qualified.XBad21
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.simple.XBad21
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.simple.XBad22
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.simple.XBad22
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.simple.XBad22
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.qualified.XBad21
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.simple.XBad22
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.simple.XBad23
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.simple.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.qualified.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.qualified.XGood2
##SUBTASK, Checking [ Region effects ] test.write.receiver.qualified.XBad18
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.qualified.Outer1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.simple.XBad23
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.simple.XBad23
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.qualified.XBad21
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.qualified.Outer1.C
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.qualified.Outer1.C
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.qualified.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.simple.XBad23
##SUBTASK, Checking [ Utility class ] test.intrinsic.qualified.Outer1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.simple.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.simple.XBad24
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.simple.XBad24
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.simple.XBad24
##SUBTASK, Checking [ Singleton class ] test.intrinsic.qualified.Outer1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.qualified.Outer1
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.qualified.XGood3
##SUBTASK, Checking [ Lock policy ] test.write.qualified.Outer1.C
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.qualified.XBad22
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.qualified.XBad22
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.qualified.XBad22
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.simple.XBad24
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.qualified.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.qualified.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.qualified.Outer1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.qualified.XBad22
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.qualified.XBad23
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.qualified.Outer1.C
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.qualified.Outer1.C
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.formals.C
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.formals.C
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.formals.C
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.qualified.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.qualified.XBad14
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.qualified.XBad14
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.qualified.XBad14
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.qualified.Outer1.C
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.qualified.Outer1.C
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.simple.C
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.qualified.XBad23
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.qualified.XBad23
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.simple.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.qualified.XBad14
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.simple.Good1
##SUBTASK, Checking [ Utility class ] test.write.qualified.Outer1.Bad1
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.simple.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.simple.Good1
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.qualified.XBad15
##SUBTASK, Checking [ Singleton class ] test.write.qualified.Outer1.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.qualified.Outer1.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.simple.Good1
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.qualified.Outer1.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.simple.XBad10
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.simple.XBad11
##SUBTASK, Checking [ Region effects ] test.intrinsic.qualified.Outer1.C
##SUBTASK, Checking [ Utility class ] test.write.qualified.Outer1.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.qualified.Outer1.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.qualified.Outer1.Good1
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.simple.Bad1
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.qualified.Outer1.Bad1
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.qualified.XBad23
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.qualified.Outer1.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.qualified.Outer1.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.formals.C
##SUBTASK, Checking [ Utility class ] test.write.qualified.Outer1.Good2a
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.qualified.Outer1.Good2a
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.qualified.Outer1.Good2a
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.simple.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.simple.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.formals.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.formals.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.formals.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.qualified.Outer1.Good2a
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.simple.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.qualified.Outer1.Good2b
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.qualified.Outer1.Good2b
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.qualified.Outer1.Good2b
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.simple.XBad11
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.simple.XBad11
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.qualified.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.qualified.XBad15
##SUBTASK, Checking [ Region effects ] test.write.formals.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.qualified.Outer1.Good2b
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.qualified.Outer1.Bad2a
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.simple.Good2a
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.qualified.Outer1.Bad1
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.qualified.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.qualified.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.qualified.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.qualified.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.qualified.Outer1.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.qualified.XBad16
##SUBTASK, Checking [ Utility class ] test.write.formals.Bad1
##SUBTASK, Checking [ Singleton class ] test.write.qualified.Outer1.Bad2a
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.qualified.Outer1.Bad2a
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.qualified.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.qualified.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.qualified.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.qualified.Outer1.Bad2a
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.qualified.Outer1.Bad2b
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.qualified.Outer1.Bad2b
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.qualified.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.qualified.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.qualified.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.qualified.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.qualified.Outer1.Bad2b
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.qualified.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.qualified.Outer1.Bad2b
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.formals.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.formals.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.simple.Good2a
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.qualified.XBad24
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.qualified.XBad24
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.qualified.XBad24
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.formals.Bad1
##SUBTASK, Checking [ Utility class ] test.intrinsic.qualified.Outer1.Good1
##SUBTASK, Checking [ Utility class ] test.write.qualified.Outer1.Bad2c
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.qualified.Outer1.Bad2c
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.qualified.Outer1.Bad2c
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.formals.Good2a
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.qualified.XBad19
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.qualified.XBad19
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.qualified.XBad19
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.qualified.Outer1.Bad2c
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.simple.XBad11
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.qualified.Outer1.Bad3
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.qualified.Outer1.Bad3
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.qualified.Outer1.Bad3
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.qualified.XBad24
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.formals.Good2a
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.formals.Good2a
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.qualified.Outer1.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.qualified.Outer1.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.qualified.Outer1.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.qualified.Outer1.Good2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.qualified.Outer1.Good2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.qualified.Outer1.Good2
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.formals.Good2a
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.formals.Good2b
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.formals.Good2b
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.formals.Good2b
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.qualified.Outer1.Good2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.simple.Good2a
##SUBTASK, Checking [ Region effects ] test.write.qualified.Outer1.Bad3
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.formals.C
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.formals.C
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.formals.C
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.simple.Good2a
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.simple.Good2n
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.simple.Good2n
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.simple.Good2n
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.qualified.XBad19
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.qualified.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.qualified.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.qualified.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.simple.Good2n
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.simple.Good3a
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.simple.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.simple.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.simple.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.simple.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.simple.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.simple.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.simple.XBad13
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.qualified.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.simple.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.qualified.XBad21
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.qualified.XBad21
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.qualified.XBad21
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.qualified.XBad21
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.formals.C
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.qualified.Outer1.Bad4
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.qualified.Outer1.Bad4
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.qualified.Outer1.Bad4
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.qualified.Outer1.Bad4
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.qualified.Outer1.Bad5
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.qualified.Outer1.Bad5
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.qualified.Outer1.Bad5
##SUBTASK, Checking [ Utility class ] test.read.formals.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.formals.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.formals.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.qualified.Outer1.Bad5
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.simple.Good3a
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.simple.Good3a
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.qualified.XGood4
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.qualified.XGood4
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.qualified.XGood4
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.simple.Good3a
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.simple.Good3b
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.simple.Good3b
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.simple.Good3b
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.qualified.XGood4
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.qualified.XGood5
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.qualified.XGood5
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.qualified.XGood5
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.simple.Good3b
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.simple.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.simple.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.simple.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.qualified.XGood5
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.qualified.XGood6
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.simple.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.simple.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.simple.XGood1
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.simple.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.simple.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.simple.X
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.simple.X
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.simple.X
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.qualified.XGood6
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.qualified.XGood6
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.qualified.XGood6
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.qualified.XBad22
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.qualified.XBad22
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.qualified.XBad22
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.qualified.XBad22
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.qualified.XBad23
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.qualified.XBad23
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.qualified.XBad23
##SUBTASK, Checking [ Region effects ] test.read.formals.Good1
##SUBTASK, Checking [ Utility class ] test.write.qualified.Outer1.Outer2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.qualified.Outer1.Outer2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.qualified.Outer1.Outer2
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.formals.Bad1
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.formals.Good2b
##SUBTASK, Checking [ Region effects ] test.write.qualified.Outer1.Outer2
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.qualified.XBad23
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.qualified.XBad24
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.qualified.XBad24
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.qualified.XBad24
##SUBTASK, Checking [ Singleton class ] test.read.formals.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.formals.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.qualified.XBad24
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.explicit.C
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.explicit.C
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.explicit.C
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.simple.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.simple.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.simple.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.simple.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.simple.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.formals.Bad1
##SUBTASK, Checking [ Utility class ] test.write.formals.Good3a
##SUBTASK, Checking [ Utility class ] test.write.qualified.Outer1.Outer2.Good3
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.qualified.Outer1.Outer2.Good3
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.qualified.Outer1.Outer2.Good3
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.formals.Good3a
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.formals.Good3a
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.explicit.C
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.formals.Good2a
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.formals.Good2a
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.formals.Good2a
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.simple.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.simple.XGood3
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.formals.Good3a
##SUBTASK, Checking [ Region effects ] test.write.qualified.Outer1.Outer2.Good3
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.formals.Good3b
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.formals.Good3b
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.explicit.Good1
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.formals.Good2a
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.qualified.Outer1.Outer2.Bad6
##SUBTASK, Checking [ Lock policy ] test.write.formals.Good3b
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.simple.X
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.simple.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.simple.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.simple.XBad14
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.simple.XBad14
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.simple.XBad14
##SUBTASK, Checking [ Singleton class ] test.write.receiver.explicit.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.explicit.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.simple.XBad14
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.simple.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.simple.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.simple.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.explicit.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.simple.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.simple.XBad1
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.qualified.Outer1.Outer2.Bad6
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.qualified.Outer1.Outer2.Bad6
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.simple.XBad1
##SUBTASK, Checking [ Utility class ] test.read.formals.Bad2b
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.formals.Bad2b
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.formals.Good3b
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.simple.XBad2
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.qualified.Outer1.Outer2.Bad6
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.formals.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.formals.Bad2
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.explicit.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.explicit.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.explicit.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.simple.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.simple.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.simple.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.simple.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.explicit.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.simple.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.explicit.Good2a
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.explicit.Good2a
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.explicit.Good2a
##SUBTASK, Checking [ Lock policy ] test.write.formals.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.qualified.X
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.qualified.X
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.qualified.X
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.formals.Bad2
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.simple.XBad2
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.formals.Bad2b
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.qualified.X
##SUBTASK, Checking [ Utility class ] test.write.formals.X
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.formals.X
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.qualified.C
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.explicit.Good2a
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.simple.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.simple.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.simple.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.explicit.Good2b
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.explicit.Good2b
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.explicit.Good2b
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.simple.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.simple.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.simple.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.simple.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.simple.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.simple.XBad19
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.simple.XBad19
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.simple.XBad19
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.explicit.Good2b
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.explicit.Good3a
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.explicit.Good3a
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.explicit.Good3a
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.simple.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.qualified.C
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.qualified.C
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.simple.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.formals.Bad2b
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.formals.Good3a
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.formals.Good3a
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.formals.Good3a
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.formals.Good3a
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.formals.Bad3b
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.formals.Bad3b
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.formals.Bad3b
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.formals.Bad3b
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.formals.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.formals.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.formals.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.qualified.C
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.formals.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.formals.X
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.formals.X
##SUBTASK, Checking [ Utility class ] test.read.receiver.qualified.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.qualified.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.qualified.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.qualified.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.qualified.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.qualified.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.qualified.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.qualified.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.qualified.Good2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.qualified.Good2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.qualified.Good2
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.qualified.Good2
##SUBTASK, Checking [ Singleton class ] test.read.formals.X
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.formals.X
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.qualified.Good3
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.qualified.Good3
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.qualified.Good3
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.qualified.Good3
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.qualified.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.qualified.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.qualified.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.qualified.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.qualified.X
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.qualified.X
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.qualified.X
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.formals.X
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.explicit.Good3a
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.explicit.Good3b
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.explicit.Good3b
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.simple.XBad19
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.staticlocks.simple.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.staticlocks.simple.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.staticlocks.simple.XBad20
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.formals.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.formals.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.formals.XBad1
##SUBTASK, Checking [ Region effects ] test.read.receiver.qualified.X
##SUBTASK, Checking [ Lock policy ] test.write.receiver.explicit.Good3b
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.staticlocks.simple.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.explicit.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.implicit.XBad14
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.implicit.XBad14
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.formals.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.formals.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.formals.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.formals.X
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.formals.XBad1
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.qualified.XBad1
##SUBTASK, Checking [ Utility class ] test.write.formals.XBad9
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.formals.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.formals.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.formals.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.formals.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.formals.XBad9
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.formals.XBad9
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.qualified.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.formals.XBad2
##SUBTASK, Checking [ Utility class ] test.write.formals.XBad2
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.formals.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.formals.XBad9
##SUBTASK, Checking [ Lock policy ] test.write.receiver.implicit.XBad14
##SUBTASK, Checking [ Singleton class ] test.read.receiver.explicit.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.explicit.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.implicit.XBad14
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.explicit.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.explicit.Good3b
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.explicit.XBad9
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.explicit.XBad9
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.explicit.XBad9
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.implicit.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.implicit.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.implicit.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.explicit.XBad9
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.implicit.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.explicit.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.explicit.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.explicit.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.explicit.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.explicit.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.explicit.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.explicit.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.formals.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.formals.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.formals.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.formals.XBad18
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.formals.XBad10
##SUBTASK, Checking [ Lock policy ] test.write.formals.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.formals.XBad11
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.formals.XBad11
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.formals.XBad11
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.formals.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.formals.XBad11
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.formals.XBad19
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.formals.XBad19
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.formals.XBad3
##SUBTASK, Checking [ Utility class ] test.write.formals.XBad12
##SUBTASK, Checking [ Singleton class ] test.write.formals.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.formals.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.formals.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.qualified.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.formals.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.formals.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.formals.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.qualified.XBad1
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.formals.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.formals.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.formals.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.formals.XBad12
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.formals.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.formals.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.formals.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.explicit.XGood1
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.explicit.Bad2
##SUBTASK, Checking [ Utility class ] test.write.receiver.implicit.XGood4
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.explicit.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.explicit.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.explicit.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.formals.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.formals.XBad14
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.formals.XBad14
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.formals.XBad14
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.explicit.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.formals.XBad14
##SUBTASK, Checking [ Lock policy ] test.write.formals.XBad19
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.formals.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.formals.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.formals.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.formals.XBad19
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.formals.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.formals.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.formals.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.formals.XBad4
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.qualified.XBad2
##SUBTASK, Checking [ Lock policy ] test.read.formals.XBad3
##SUBTASK, Checking [ Utility class ] test.write.formals.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.formals.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.formals.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.formals.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.formals.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.formals.XGood3
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.explicit.Bad2
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.implicit.XGood4
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.implicit.XGood4
##SUBTASK, Checking [ Lock policy ] test.write.receiver.explicit.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.explicit.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.explicit.X
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.explicit.X
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.explicit.X
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.implicit.XGood4
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.implicit.XGood5
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.implicit.XGood5
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.implicit.XGood5
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.implicit.XGood5
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.implicit.XGood6
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.implicit.XGood6
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.implicit.XGood6
##SUBTASK, Checking [ Utility class ] test.read.receiver.explicit.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.explicit.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.explicit.XGood3
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.implicit.XGood6
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.implicit.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.implicit.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.implicit.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.implicit.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.implicit.XBad17
##SUBTASK, Checking [ Utility class ] test.write.formals.XBad21
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.formals.XBad21
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.formals.XBad21
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.formals.XBad21
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.formals.XBad22
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.formals.XBad22
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.formals.XBad22
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.formals.XBad22
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.formals.XBad23
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.formals.XBad23
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.formals.XBad23
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.formals.XBad23
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.formals.XBad24
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.formals.XBad24
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.formals.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.formals.XGood3
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.formals.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.formals.C
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.formals.C
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.formals.C
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.qualified.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.qualified.XBad2
##SUBTASK, Checking [ Region effects ] test.write.formals.XBad4
##SUBTASK, Checking [ Region effects ] test.write.receiver.explicit.X
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.qualified.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.formals.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.qualified.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.qualified.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.formals.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.formals.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.formals.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.formals.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.formals.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.formals.XBad24
##SUBTASK, Checking [ Utility class ] test.write.formals.XGood4
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.formals.XGood4
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.formals.XGood4
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.formals.XBad24
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.explicit.C
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.explicit.C
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.explicit.C
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.formals.XGood4
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.explicit.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.explicit.XBad11
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.explicit.XBad11
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.explicit.XBad11
##SUBTASK, Checking [ Utility class ] test.write.formals.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.formals.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.formals.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.explicit.XBad11
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.explicit.XBad12
##SUBTASK, Checking [ Singleton class ] test.write.receiver.implicit.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.implicit.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.formals.C
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.qualified.XBad3
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.formals.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.implicit.XBad17
##SUBTASK, Checking [ Utility class ] test.intrinsic.formals.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.formals.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.formals.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.explicit.C
##SUBTASK, Checking [ Utility class ] test.write.receiver.explicit.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.explicit.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.explicit.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.explicit.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.explicit.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.explicit.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.explicit.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.explicit.XBad12
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.explicit.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.explicit.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.explicit.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.explicit.XBad12
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.explicit.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.explicit.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.explicit.XBad3
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.formals.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.formals.XBad5
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.formals.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.implicit.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.implicit.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.implicit.XBad18
##SUBTASK, Checking [ Utility class ] test.read.receiver.explicit.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.explicit.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.explicit.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.implicit.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.explicit.Bad1
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.qualified.C
##SUBTASK, Checking [ Region effects ] test.read.receiver.explicit.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.qualified.C
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.formals.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.qualified.C
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.explicit.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.explicit.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.explicit.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.explicit.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.explicit.XBad14
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.explicit.XBad14
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.explicit.XBad14
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.explicit.XBad14
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.explicit.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.explicit.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.explicit.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.explicit.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.explicit.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.explicit.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.explicit.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.explicit.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.explicit.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.explicit.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.explicit.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.explicit.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.explicit.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.explicit.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.explicit.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.explicit.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.explicit.XBad19
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.explicit.XBad19
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.explicit.XBad19
##SUBTASK, Checking [ Singleton class ] test.write.receiver.explicit.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.explicit.XBad3
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.explicit.Good2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.explicit.Good2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.explicit.Good2
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.explicit.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.explicit.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.explicit.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.formals.XBad5
##SUBTASK, Checking [ Region effects ] test.read.receiver.explicit.Good2
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.qualified.XBad3
##SUBTASK, Checking [ Utility class ] test.write.formals.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.formals.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.explicit.Good3
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.explicit.Good3
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.explicit.Good3
##SUBTASK, Checking [ Singleton class ] test.intrinsic.formals.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.formals.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.explicit.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.formals.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.formals.Good2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.formals.Good2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.formals.Good2
##SUBTASK, Checking [ Region effects ] test.read.receiver.explicit.XBad19
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.explicit.Good3
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.explicit.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.explicit.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.explicit.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.formals.Good2
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.formals.Good3
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.formals.Good3
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.formals.Good3
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.explicit.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.explicit.X
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.explicit.X
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.explicit.X
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.qualified.C
##SUBTASK, Checking [ Utility class ] test.read.receiver.explicit.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.explicit.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.explicit.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.explicit.XBad4
##SUBTASK, Checking [ Utility class ] test.read.receiver.qualified.XBad4
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.formals.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.explicit.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.formals.Good3
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.formals.XBad6
##SUBTASK, Checking [ Utility class ] test.read.receiver.explicit.XBad21
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.explicit.XBad21
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.explicit.XBad21
##SUBTASK, Checking [ Singleton class ] test.read.receiver.qualified.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.qualified.XBad4
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.explicit.XBad5
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.qualified.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.explicit.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.explicit.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.explicit.XBad21
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.implicit.C
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.implicit.C
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.explicit.XBad5
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.explicit.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.explicit.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.explicit.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.formals.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.formals.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.formals.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.explicit.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.formals.XBad7
##SUBTASK, Checking [ Region effects ] test.intrinsic.formals.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.implicit.C
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.formals.X
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.formals.X
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.formals.X
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.qualified.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.qualified.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.qualified.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.qualified.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.qualified.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.qualified.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.qualified.Good1
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.formals.XBad7
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.formals.XBad7
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.explicit.XBad7
##SUBTASK, Checking [ Region effects ] test.read.receiver.qualified.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.qualified.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.qualified.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.qualified.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.qualified.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.implicit.C
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.explicit.X
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.qualified.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.qualified.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.qualified.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.qualified.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.qualified.Good2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.qualified.Good2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.qualified.Good2
##SUBTASK, Checking [ Utility class ] test.write.receiver.implicit.Good1
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.explicit.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.explicit.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.explicit.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.qualified.XBad7
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.qualified.XBad7
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.qualified.XBad7
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.qualified.Good2
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.explicit.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.qualified.Good3
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.explicit.XBad7
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.explicit.XBad7
##SUBTASK, Checking [ Region effects ] test.write.formals.XBad7
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.explicit.XBad7
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.formals.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.formals.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.qualified.Good3
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.qualified.Good3
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.formals.X
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.explicit.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.explicit.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.explicit.XBad2
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.formals.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.formals.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.formals.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.qualified.Good3
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.explicit.XBad2
##SUBTASK, Checking [ Singleton class ] test.write.receiver.implicit.Good1
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.qualified.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.qualified.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.qualified.Bad2
##SUBTASK, Checking [ Region effects ] test.read.receiver.qualified.XBad7
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.formals.XGood1
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.qualified.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.explicit.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.explicit.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.explicit.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.qualified.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.qualified.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.explicit.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.formals.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.formals.XGood2
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.formals.XBad8
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.qualified.Bad2
##SUBTASK, Checking [ Utility class ] test.write.formals.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.explicit.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.explicit.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.qualified.X
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.qualified.X
##SUBTASK, Checking [ Lock policy ] test.write.receiver.implicit.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.qualified.X
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.implicit.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.implicit.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.implicit.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.implicit.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.implicit.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.implicit.Good2a
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.implicit.Good2a
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.implicit.Good2a
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.implicit.Good2a
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.implicit.Good2b
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.implicit.Good2b
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.implicit.Good2b
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.implicit.Good2b
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.implicit.Good3a
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.formals.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.formals.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.formals.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.formals.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.formals.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.formals.XGood2
##SUBTASK, Checking [ Singleton class ] test.intrinsic.formals.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.formals.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.formals.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.explicit.XBad9
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.explicit.XBad9
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.explicit.XBad9
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.explicit.XBad9
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.explicit.XBad10
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.formals.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.formals.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.formals.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.formals.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.qualified.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.qualified.XBad9
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.qualified.XBad9
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.qualified.XBad9
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.formals.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.explicit.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.implicit.Good3a
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.implicit.Good3a
##SUBTASK, Checking [ Lock policy ] test.read.receiver.explicit.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.explicit.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.implicit.Good3a
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.explicit.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.explicit.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.qualified.X
##SUBTASK, Checking [ Utility class ] test.write.receiver.implicit.Good3b
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.implicit.Good3b
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.implicit.Good3b
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.qualified.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.qualified.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.qualified.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.qualified.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.implicit.Good3b
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.qualified.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.qualified.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.qualified.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.explicit.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.qualified.XBad2
##SUBTASK, Checking [ Lock policy ] test.write.receiver.explicit.XBad10
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.qualified.XBad9
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.qualified.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.qualified.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.qualified.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.formals.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.formals.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.formals.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.qualified.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.formals.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.formals.XBad3
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.explicit.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.qualified.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.explicit.XBad4
##SUBTASK, Checking [ Utility class ] test.write.receiver.explicit.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.explicit.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.explicit.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.explicit.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.explicit.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.explicit.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.implicit.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.implicit.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.implicit.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.explicit.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.explicit.XGood1
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.formals.XBad3
##SUBTASK, Checking [ Utility class ] test.write.receiver.explicit.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.formals.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.formals.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.formals.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.formals.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.formals.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.formals.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.formals.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.formals.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.formals.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.formals.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.formals.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.formals.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.formals.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.formals.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.formals.XBad7
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.formals.XBad7
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.formals.XBad7
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.formals.XBad7
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.formals.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.formals.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.formals.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.formals.XBad8
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.explicit.XGood2
##SUBTASK, Checking [ Singleton class ] test.read.receiver.qualified.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.implicit.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.explicit.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.explicit.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.explicit.XBad6
##SUBTASK, Checking [ Lock policy ] test.read.receiver.qualified.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.explicit.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.explicit.XBad6
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.qualified.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.explicit.XBad7
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.explicit.XBad7
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.explicit.XBad7
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.formals.XBad9
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.explicit.XBad7
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.implicit.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.implicit.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.implicit.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.implicit.X
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.implicit.X
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.implicit.X
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.implicit.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.implicit.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.implicit.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.implicit.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.implicit.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.implicit.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.implicit.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.implicit.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.formals.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.formals.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.formals.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.implicit.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.implicit.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.implicit.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.implicit.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.formals.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.implicit.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.explicit.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.explicit.XGood3
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.qualified.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.qualified.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.qualified.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.qualified.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.qualified.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.qualified.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.qualified.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.qualified.XBad4
##SUBTASK, Checking [ Singleton class ] test.write.receiver.explicit.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.explicit.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.qualified.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.qualified.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.qualified.XBad5
##SUBTASK, Checking [ Utility class ] test.read.receiver.implicit.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.implicit.XBad5
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.formals.XBad9
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.formals.XBad9
##SUBTASK, Checking [ Region effects ] test.write.receiver.explicit.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.implicit.X
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.explicit.XBad11
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.explicit.XBad11
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.explicit.XBad11
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.formals.XBad9
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.formals.XBad14
##SUBTASK, Checking [ Utility class ] test.write.receiver.implicit.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.qualified.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.qualified.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.qualified.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.qualified.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.implicit.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.qualified.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.qualified.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.qualified.XGood2
##SUBTASK, Checking [ Singleton class ] test.intrinsic.formals.XBad14
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.implicit.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.implicit.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.explicit.XBad11
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.explicit.XBad12
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.implicit.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.qualified.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.formals.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.formals.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.qualified.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.qualified.XGood3
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.implicit.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.implicit.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.implicit.XBad2
##SUBTASK, Checking [ Singleton class ] test.write.receiver.explicit.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.explicit.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.implicit.XBad2
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.formals.XBad14
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.implicit.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.formals.XBad14
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.implicit.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.implicit.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.implicit.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.qualified.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.qualified.XBad7
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.qualified.XBad7
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.formals.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.formals.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.formals.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.formals.XBad15
##SUBTASK, Checking [ Region effects ] test.write.receiver.explicit.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.formals.XBad16
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.explicit.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.explicit.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.explicit.XBad13
##SUBTASK, Checking [ Utility class ] test.write.receiver.implicit.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.implicit.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.implicit.XBad3
##SUBTASK, Checking [ Lock policy ] test.read.receiver.qualified.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.explicit.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.implicit.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.explicit.XBad14
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.formals.XBad10
##SUBTASK, Checking [ Singleton class ] test.write.receiver.explicit.XBad14
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.implicit.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.implicit.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.implicit.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.qualified.XGood3
##SUBTASK, Checking [ Singleton class ] test.intrinsic.formals.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.formals.XBad16
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.implicit.XBad4
##SUBTASK, Checking [ Utility class ] test.read.receiver.qualified.XBad11
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.qualified.XBad11
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.qualified.XBad11
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.formals.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.qualified.XBad7
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.formals.XBad17
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.implicit.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.qualified.XBad11
##SUBTASK, Checking [ Singleton class ] test.intrinsic.formals.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.formals.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.qualified.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.qualified.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.qualified.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.formals.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.formals.XBad18
##SUBTASK, Checking [ Utility class ] test.write.receiver.implicit.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.implicit.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.implicit.XBad5
##SUBTASK, Checking [ Region effects ] test.intrinsic.formals.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.implicit.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.formals.XBad11
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.formals.XBad11
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.explicit.XBad14
##SUBTASK, Checking [ Utility class ] test.write.receiver.implicit.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.formals.XBad11
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.formals.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.formals.XBad18
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.formals.XBad11
##SUBTASK, Checking [ Utility class ] test.read.receiver.implicit.XBad7
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.formals.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.formals.XBad19
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.qualified.XBad7
##SUBTASK, Checking [ Singleton class ] test.intrinsic.formals.XBad19
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.formals.XBad19
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.implicit.XBad7
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.implicit.XBad7
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.formals.XBad19
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.formals.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.formals.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.formals.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.formals.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.formals.XBad21
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.formals.XBad21
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.formals.XBad21
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.formals.XBad21
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.formals.XBad22
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.formals.XBad22
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.formals.XBad22
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.formals.XBad22
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.formals.XBad23
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.formals.XBad23
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.formals.XBad23
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.formals.XBad23
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.formals.XBad24
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.formals.XBad24
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.formals.XBad24
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.formals.XBad24
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.formals.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.formals.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.formals.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.formals.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.qualified.XBad12
##SUBTASK, Checking [ Singleton class ] test.write.receiver.implicit.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.implicit.XBad6
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.explicit.XBad14
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.explicit.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.explicit.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.explicit.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.implicit.XBad6
##SUBTASK, Checking [ Utility class ] test.read.receiver.qualified.XBad13
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.formals.XBad25
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.implicit.XBad7
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.implicit.XBad7
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.implicit.XBad7
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.implicit.XBad7
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.implicit.XBad8
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.qualified.XBad8
##SUBTASK, Checking [ Region effects ] test.write.receiver.implicit.XBad7
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.implicit.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.implicit.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.implicit.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.formals.XBad25
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.formals.XBad25
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.implicit.XBad8
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.implicit.XBad9
##SUBTASK, Checking [ Region effects ] test.write.receiver.explicit.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.explicit.XGood4
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.explicit.XGood4
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.explicit.XGood4
##SUBTASK, Checking [ Singleton class ] test.read.receiver.qualified.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.qualified.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.qualified.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.qualified.XBad14
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.qualified.XBad14
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.explicit.XGood4
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.explicit.XGood5
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.explicit.XGood5
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.explicit.XGood5
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.implicit.XBad9
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.implicit.XBad9
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.implicit.XBad9
##SUBTASK, Checking [ Region effects ] test.intrinsic.formals.XBad25
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.implicit.XBad10
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.qualified.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.qualified.XBad8
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.qualified.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.qualified.XBad9
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.qualified.XBad9
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.qualified.XBad9
##SUBTASK, Checking [ Singleton class ] test.read.receiver.implicit.XBad8
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.qualified.XBad9
##SUBTASK, Checking [ Lock policy ] test.read.receiver.implicit.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.qualified.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.qualified.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.qualified.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.implicit.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.qualified.XBad10
##SUBTASK, Checking [ Utility class ] test.intrinsic.formals.XBad26
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.formals.XBad26
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.formals.XBad26
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.implicit.XBad9
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.implicit.XBad9
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.implicit.XBad9
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.formals.XBad26
##SUBTASK, Checking [ Singleton class ] test.write.receiver.implicit.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.implicit.C
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.implicit.C
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.implicit.C
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.implicit.XBad9
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.implicit.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.implicit.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.implicit.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.implicit.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.implicit.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.implicit.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.implicit.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.implicit.C
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.implicit.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.implicit.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.implicit.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.implicit.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.implicit.Good1
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.implicit.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.implicit.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.implicit.Bad1
##SUBTASK, Checking [ Region effects ] test.write.receiver.explicit.XGood5
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.implicit.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.explicit.XGood6
##SUBTASK, Checking [ Lock policy ] test.read.receiver.qualified.XBad14
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.implicit.Good2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.implicit.Good2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.implicit.Good2
##SUBTASK, Checking [ Utility class ] test.read.receiver.implicit.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.implicit.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.implicit.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.implicit.XBad10
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.implicit.XBad10
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.implicit.XGood2
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.qualified.XBad11
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.qualified.XBad11
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.qualified.XBad11
##SUBTASK, Checking [ Region effects ] test.read.receiver.implicit.Good2
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.qualified.XBad11
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.implicit.Good3
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.implicit.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.implicit.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.implicit.XGood1
##SUBTASK, Checking [ Region effects ] test.read.receiver.qualified.XBad14
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.qualified.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.qualified.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.explicit.XGood6
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.explicit.XGood6
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.implicit.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.implicit.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.implicit.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.implicit.XGood2
##SUBTASK, Checking [ Utility class ] test.read.receiver.implicit.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.implicit.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.implicit.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.explicit.XGood6
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.implicit.Good3
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.qualified.XBad15
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.qualified.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.qualified.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.qualified.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.implicit.Good3
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.explicit.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.explicit.XBad16
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.implicit.XGood2
##SUBTASK, Checking [ Region effects ] test.read.receiver.implicit.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.implicit.XGood3
##SUBTASK, Checking [ Region effects ] test.read.receiver.qualified.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.qualified.XBad16
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.explicit.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.implicit.Good3
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.qualified.XBad12
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.qualified.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.qualified.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.implicit.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.implicit.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.qualified.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.qualified.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.qualified.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.qualified.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.implicit.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.implicit.XBad11
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.implicit.XBad11
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.implicit.XBad11
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.qualified.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.implicit.XBad11
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.qualified.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.qualified.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.implicit.XBad11
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.implicit.XBad11
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.implicit.XBad11
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.qualified.XBad18
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.explicit.XBad16
##SUBTASK, Checking [ Utility class ] test.write.receiver.implicit.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.implicit.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.implicit.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.implicit.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.implicit.Bad2
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.qualified.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.qualified.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.implicit.Bad2
##SUBTASK, Checking [ Lock policy ] test.write.receiver.implicit.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.explicit.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.explicit.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.explicit.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.implicit.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.explicit.XBad17
##SUBTASK, Checking [ Region effects ] test.read.receiver.qualified.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.implicit.XBad13
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.qualified.XBad19
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.qualified.XBad19
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.qualified.XBad19
##SUBTASK, Checking [ Region effects ] test.read.receiver.implicit.XBad11
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.implicit.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.implicit.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.write.receiver.explicit.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.write.receiver.explicit.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.write.receiver.explicit.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.implicit.XBad13
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.write.receiver.explicit.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.qualified.C
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.implicit.X
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.implicit.X
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.implicit.X
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.qualified.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.qualified.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.qualified.C
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.qualified.C
##SUBTASK, Checking [ Region effects ] test.read.receiver.qualified.XBad19
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.qualified.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.qualified.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.qualified.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.qualified.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.qualified.XBad21
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.qualified.XBad21
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.qualified.XBad21
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.qualified.XBad21
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.implicit.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.implicit.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.implicit.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.implicit.XBad12
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.implicit.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.implicit.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.implicit.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.implicit.XBad13
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.implicit.XBad14
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.implicit.XBad14
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.implicit.XBad14
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.implicit.XBad14
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.implicit.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.implicit.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.implicit.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.implicit.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.implicit.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.implicit.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.implicit.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.implicit.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.implicit.X
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.qualified.C
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.implicit.XBad19
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.qualified.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.qualified.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.qualified.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.qualified.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.implicit.XBad19
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.implicit.XBad19
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.implicit.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.implicit.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.implicit.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.implicit.XBad19
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.implicit.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.qualified.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.implicit.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.qualified.Good1
##SUBTASK, Checking [ Region effects ] test.read.receiver.implicit.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.implicit.XBad20
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.qualified.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.qualified.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.qualified.Bad1
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.implicit.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.qualified.Bad1
##SUBTASK, Checking [ Utility class ] test.read.receiver.implicit.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.implicit.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.implicit.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.receiver.implicit.XBad21
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.receiver.implicit.XBad21
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.receiver.implicit.XBad21
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.qualified.XGood1
##SUBTASK, Checking [ Region effects ] test.read.receiver.implicit.XBad18
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.qualified.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.qualified.XGood2
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.qualified.Good2
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.receiver.implicit.XBad21
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.simple.XBad1
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.qualified.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.qualified.Good2
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.simple.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.simple.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.simple.C
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.simple.C
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.simple.XBad1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.qualified.Good2
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.simple.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.simple.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.simple.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.simple.XBad2
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.simple.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.simple.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.simple.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.simple.XBad3
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.simple.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.simple.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.simple.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.simple.XBad4
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.simple.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.simple.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.simple.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.qualified.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.simple.XBad5
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.simple.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.simple.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.simple.XGood1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.qualified.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.simple.XGood1
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.qualified.Good2
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.simple.C
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.simple.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.simple.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.simple.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.simple.XGood2
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.simple.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.simple.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.simple.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.simple.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.simple.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.simple.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.qualified.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.qualified.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.qualified.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.simple.XBad6
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.simple.C
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.qualified.XGood3
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.simple.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.simple.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.simple.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.simple.XBad6
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.qualified.XBad14
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.qualified.XBad14
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.qualified.XBad14
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.simple.Good1
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.simple.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.simple.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.qualified.XBad14
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.simple.XBad7
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.qualified.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.qualified.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.qualified.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.simple.Bad1
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.simple.XBad7
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.simple.XBad7
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.simple.XBad7
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.simple.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.simple.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.simple.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.simple.XBad8
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.qualified.XBad15
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.qualified.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.qualified.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.qualified.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.qualified.XBad16
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.qualified.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.qualified.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.qualified.XBad17
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.simple.Bad1
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.qualified.XBad17
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.simple.Good2
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.qualified.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.qualified.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.qualified.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.simple.Good2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.simple.Good2
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.qualified.XBad18
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.qualified.XBad19
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.qualified.XBad19
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.qualified.XBad19
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.simple.Good2
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.qualified.XBad19
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.simple.Good3
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.qualified.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.qualified.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.qualified.XBad20
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.qualified.XBad20
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.simple.Good3
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.simple.Good3
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.qualified.XBad21
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.qualified.XBad21
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.qualified.XBad21
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.qualified.XBad21
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.qualified.XBad22
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.qualified.XBad22
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.qualified.XBad22
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.simple.Good3
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.simple.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.qualified.XBad22
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.qualified.XBad23
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.qualified.XBad23
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.qualified.XBad23
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.simple.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.simple.Bad2
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.qualified.XBad23
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.read.staticlocks.qualified.XBad24
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.read.staticlocks.qualified.XBad24
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.read.staticlocks.qualified.XBad24
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.read.staticlocks.qualified.XBad24
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.simple.Bad2
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Utility class ] test.intrinsic.staticlocks.simple.X
##SUBTASK_DONE
##SUBTASK, Checking [ Singleton class ] test.intrinsic.staticlocks.simple.X
##SUBTASK_DONE
##SUBTASK, Checking [ Lock policy ] test.intrinsic.staticlocks.simple.X
##SUBTASK_DONE
##SUBTASK, Checking [ Region effects ] test.intrinsic.staticlocks.simple.X
##SUBTASK_DONE
##WORK, 1
##SUBTASK_DONE
##WORK, 1
##SUBTASK_DONE
##WORK, 1
##SUBTASK_DONE
##WORK, 1
##SUBTASK_DONE
Starting group: UniquenessAnalysisModule
Starting group: NullablePreprocessorModule
##SUBTASK, Starting parallel NullablePreprocessorModule [11]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
Starting parallel NullablePreprocessorModule [11]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Starting parallel NullablePreprocessorModule [11]: 21 for TestRequiresLockOverride
Starting parallel NullablePreprocessorModule [11]: 21 for TestRequiresLockOverride
##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/receiver/qualified/C.java
##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/staticlocks/simple/C.java
##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/formals/C.java
##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/receiver/qualified/C.java
##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/qualified/Outer1.java
##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/receiver/implicit/C.java
##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/qualified/Outer1.java
##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/staticlocks/simple/C.java
##WORK, 1
##SUBTASK_DONE
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/receiver/implicit/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/staticlocks/qualified/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/staticlocks/simple/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/receiver/explicit/C.java
##WORK, 1
##SUBTASK_DONE
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/receiver/qualified/C.java
##WORK, 1
##SUBTASK_DONE
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/receiver/explicit/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/receiver/explicit/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/formals/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/write/receiver/implicit/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/qualified/Outer1.java
##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/intrinsic/staticlocks/qualified/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/staticlocks/qualified/C.java
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable Preprocessor ] file:/Users/aarong/git/regression/regression/TestRequiresLockOverride/src/test/read/formals/C.java
##WORK, 1
##SUBTASK_DONE
##WORK, 1
##SUBTASK_DONE
##WORK, 1
##SUBTASK_DONE
##WORK, 1
##SUBTASK_DONE
##WORK, 1
##SUBTASK_DONE
##WORK, 1
##SUBTASK_DONE
##WORK, 1
##SUBTASK_DONE
Starting group: NullableModule2
##SUBTASK, Starting parallel NullableModule2 [12]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
Starting parallel NullableModule2 [12]: 0 for org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Starting parallel NullableModule2 [12]: 2151 for TestRequiresLockOverride
Starting parallel NullableModule2 [12]: 2151 for TestRequiresLockOverride
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.C.C()
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad21.XBad21()
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad8.XBad8()
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.Bad2.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.C.m4(test.intrinsic.formals.C)
##SUBTASK, Checking [ Nullable ] test.write.qualified.Outer1.Bad2a.get(test.write.qualified.Outer1,test.write.qualified.Outer1)
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad4.XBad4()
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.C.m4(test.read.receiver.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.X.X()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.C.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.qualified.Outer1.Bad2a.<clinit>
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.C.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.Good1.Good1()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.qualified.Outer1.Bad2b.Bad2b()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.Good1.Good1()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.Good1.m1(test.intrinsic.formals.C,test.intrinsic.formals.C,test.intrinsic.formals.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.Good1.m2(test.intrinsic.formals.C,test.intrinsic.formals.C,test.intrinsic.formals.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.Good1.m3(test.intrinsic.formals.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad21.m(test.write.staticlocks.simple.X,test.write.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad21.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XGood4.XGood4()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XGood4.m(test.write.staticlocks.simple.X,test.write.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XGood4.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XGood5.XGood5()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.Good1.m1(test.read.receiver.qualified.C,test.read.receiver.qualified.C,test.read.receiver.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad8.m(test.intrinsic.staticlocks.simple.X,test.intrinsic.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.Good1.m2(test.read.receiver.qualified.C,test.read.receiver.qualified.C,test.read.receiver.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XGood5.m(test.write.staticlocks.simple.X,test.write.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad8.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XGood5.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad9.XBad9()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XGood6.XGood6()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad4.m(test.read.receiver.qualified.X,test.read.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.Good1.m4(test.intrinsic.formals.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad4.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad5.XBad5()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XGood6.m(test.write.staticlocks.simple.X,test.write.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XGood6.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad22.XBad22()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.Good1.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.Bad1.Bad1()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad5.m(test.read.receiver.qualified.X,test.read.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad22.m(test.write.staticlocks.simple.X,test.write.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad5.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad22.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad6.XBad6()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad23.XBad23()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.Bad1.m1(test.intrinsic.formals.C,test.intrinsic.formals.C,test.intrinsic.formals.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.Bad1.m3(test.intrinsic.formals.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.Bad1.m4(test.intrinsic.formals.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad6.m(test.read.receiver.qualified.X,test.read.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad23.m(test.write.staticlocks.simple.X,test.write.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.Bad1.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad6.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad23.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad7.XBad7()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad24.XBad24()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad7.m(test.read.receiver.qualified.X,test.read.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad24.m(test.write.staticlocks.simple.X,test.write.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad24.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.C.C()
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.Good2.Good2()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.qualified.Outer1.Bad2b.get(test.write.qualified.Outer1,test.write.qualified.Outer1)
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad7.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.C.m1(test.write.staticlocks.qualified.C,test.write.staticlocks.qualified.C,test.write.staticlocks.qualified.C)
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.Good1.m3(test.read.receiver.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad8.XBad8()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.qualified.Outer1.Bad2b.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.Good1.m4(test.read.receiver.qualified.C)
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.C.m2(test.write.staticlocks.qualified.C,test.write.staticlocks.qualified.C,test.write.staticlocks.qualified.C)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad9.m(test.intrinsic.staticlocks.simple.X,test.intrinsic.staticlocks.simple.X)
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.Good2.m1(test.intrinsic.formals.C,test.intrinsic.formals.C,test.intrinsic.formals.C)
##SUBTASK, Checking [ Nullable ] test.write.qualified.Outer1.Bad2c.Bad2c()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.Good1.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.C.m3(test.write.staticlocks.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad9.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.Good2.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.Bad1.Bad1()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad10.XBad10()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.C.m4(test.write.staticlocks.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.Good3.Good3()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.C.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad8.m(test.read.receiver.qualified.X,test.read.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad8.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.qualified.Outer1.Bad2c.get(test.write.qualified.Outer1,test.write.qualified.Outer1)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.X.m(test.read.receiver.implicit.X,test.read.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.C.m1(test.intrinsic.receiver.qualified.C,test.intrinsic.receiver.qualified.C,test.intrinsic.receiver.qualified.C)
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad10.m(test.intrinsic.staticlocks.simple.X,test.intrinsic.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.X.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.qualified.Outer1.Bad2c.<clinit>
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.Bad1.m1(test.read.receiver.qualified.C,test.read.receiver.qualified.C,test.read.receiver.qualified.C)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.C.m2(test.intrinsic.receiver.qualified.C,test.intrinsic.receiver.qualified.C,test.intrinsic.receiver.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad9.XBad9()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.qualified.Outer1.Bad3.Bad3()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.Bad1.m3(test.read.receiver.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.C.m3(test.intrinsic.receiver.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.Bad1.m4(test.read.receiver.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.C.m4(test.intrinsic.receiver.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.Bad1.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.C.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.Good2.Good2()
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad10.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad9.m(test.read.receiver.qualified.X,test.read.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.qualified.Outer1.Bad3.get(test.write.qualified.Outer1,test.write.qualified.Outer1)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad11.XBad11()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad9.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.qualified.Outer1.Bad3.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad10.XBad10()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.qualified.Outer1.Bad4.Bad4()
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.Good3.m1(test.intrinsic.formals.C,test.intrinsic.formals.C,test.intrinsic.formals.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.Good3.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.Good1.Good1()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.Bad2.Bad2()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad11.m(test.intrinsic.staticlocks.simple.X,test.intrinsic.staticlocks.simple.X)
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad1.XBad1()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.qualified.Outer1.Bad4.get(test.write.qualified.Outer1,test.write.qualified.Outer1)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad11.<clinit>
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad10.m(test.read.receiver.qualified.X,test.read.receiver.qualified.X)
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.Good1.Good1()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.Good2.m1(test.read.receiver.qualified.C,test.read.receiver.qualified.C,test.read.receiver.qualified.C)
##SUBTASK, Checking [ Nullable ] test.write.qualified.Outer1.Bad4.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad12.XBad12()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad10.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.qualified.Outer1.Bad5.Bad5()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XGood1.XGood1()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.Good2.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.Bad2.m1(test.intrinsic.formals.C,test.intrinsic.formals.C,test.intrinsic.formals.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.Good3.Good3()
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad1.m(test.read.receiver.implicit.X,test.read.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.Bad2.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad1.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.X.X()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad2.XBad2()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad12.m(test.intrinsic.staticlocks.simple.X,test.intrinsic.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.qualified.Outer1.Bad5.get(test.write.qualified.Outer1,test.write.qualified.Outer1)
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.Good1.m1(test.write.staticlocks.qualified.C,test.write.staticlocks.qualified.C,test.write.staticlocks.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad12.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.qualified.Outer1.Bad5.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XGood1.m(test.read.receiver.qualified.X,test.read.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad13.XBad13()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.qualified.Outer1.Outer2.Outer2()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.Good1.m1(test.intrinsic.receiver.qualified.C,test.intrinsic.receiver.qualified.C,test.intrinsic.receiver.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XGood1.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.Good1.m2(test.write.staticlocks.qualified.C,test.write.staticlocks.qualified.C,test.write.staticlocks.qualified.C)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.Good3.m1(test.read.receiver.qualified.C,test.read.receiver.qualified.C,test.read.receiver.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.Good1.m2(test.intrinsic.receiver.qualified.C,test.intrinsic.receiver.qualified.C,test.intrinsic.receiver.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad2.m(test.read.receiver.implicit.X,test.read.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XGood2.XGood2()
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.Good1.m3(test.write.staticlocks.qualified.C)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.Good3.<clinit>
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.Good1.m4(test.write.staticlocks.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.Bad2.Bad2()
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad2.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.Good1.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad3.XBad3()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad13.m(test.intrinsic.staticlocks.simple.X,test.intrinsic.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.Bad1.Bad1()
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.Good1.m3(test.intrinsic.receiver.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad13.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.Good1.m4(test.intrinsic.receiver.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XGood2.m(test.read.receiver.qualified.X,test.read.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad14.XBad14()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.X.m(test.intrinsic.formals.X,test.intrinsic.formals.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.Good1.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XGood2.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.X.<clinit>
##SUBTASK, Checking [ Nullable ] test.write.qualified.Outer1.Outer2.Good3.Good3()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.Bad1.Bad1()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.Bad2.m1(test.read.receiver.qualified.C,test.read.receiver.qualified.C,test.read.receiver.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad3.m(test.read.receiver.implicit.X,test.read.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.Bad2.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad3.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.Bad1.m1(test.write.staticlocks.qualified.C,test.write.staticlocks.qualified.C,test.write.staticlocks.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.X.X()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad4.XBad4()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad14.m(test.intrinsic.staticlocks.simple.X,test.intrinsic.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.Bad1.m3(test.write.staticlocks.qualified.C)
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XGood3.XGood3()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad14.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.Bad1.m4(test.write.staticlocks.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad15.XBad15()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.qualified.Outer1.Outer2.Good3.get(test.write.qualified.Outer1,test.write.qualified.Outer1)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.Bad1.m1(test.intrinsic.receiver.qualified.C,test.intrinsic.receiver.qualified.C,test.intrinsic.receiver.qualified.C)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XGood1.XGood1()
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.Bad1.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.Bad1.m3(test.intrinsic.receiver.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.Good2a.Good2a()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.Bad1.m4(test.intrinsic.receiver.qualified.C)
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XGood3.m(test.read.receiver.qualified.X,test.read.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.Bad1.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XGood3.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad15.m(test.intrinsic.staticlocks.simple.X,test.intrinsic.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.qualified.Outer1.Outer2.Good3.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.Good2.Good2()
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad11.XBad11()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.qualified.Outer1.Outer2.Bad6.Bad6()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XGood1.m(test.intrinsic.formals.X,test.intrinsic.formals.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad15.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad16.XBad16()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XGood1.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XGood2.XGood2()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.Good2a.m1(test.write.staticlocks.qualified.C,test.write.staticlocks.qualified.C,test.write.staticlocks.qualified.C)
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad4.m(test.read.receiver.implicit.X,test.read.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.Good2.m1(test.intrinsic.receiver.qualified.C,test.intrinsic.receiver.qualified.C,test.intrinsic.receiver.qualified.C)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.Good2a.<clinit>
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad11.m(test.read.receiver.qualified.X,test.read.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.qualified.Outer1.Outer2.Bad6.get(test.write.qualified.Outer1,test.write.qualified.Outer1)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.Good2n.Good2n()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad11.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad4.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.qualified.Outer1.Outer2.Bad6.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.Good2.<clinit>
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad5.XBad5()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad16.m(test.intrinsic.staticlocks.simple.X,test.intrinsic.staticlocks.simple.X)
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XGood2.m(test.intrinsic.formals.X,test.intrinsic.formals.X)
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad12.XBad12()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.qualified.Outer1.Outer2.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.Good3.Good3()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad16.<clinit>
##SUBTASK, Checking [ Nullable ] test.write.qualified.Outer1.<clinit>
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.X.m(test.read.receiver.qualified.X,test.read.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad17.XBad17()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XGood2.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.Good2n.m1(test.write.staticlocks.qualified.C,test.write.staticlocks.qualified.C,test.write.staticlocks.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.X.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad1.XBad1()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.Good2n.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad5.m(test.read.receiver.implicit.X,test.read.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.Good3a.Good3a()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.Good3.m1(test.intrinsic.receiver.qualified.C,test.intrinsic.receiver.qualified.C,test.intrinsic.receiver.qualified.C)
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad12.m(test.read.receiver.qualified.X,test.read.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad5.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.Good3.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad12.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad17.m(test.intrinsic.staticlocks.simple.X,test.intrinsic.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad6.XBad6()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad13.XBad13()
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.Bad2.Bad2()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad1.m(test.intrinsic.formals.X,test.intrinsic.formals.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad17.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.qualified.X.X(test.write.qualified.Outer1)
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad1.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad18.XBad18()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad2.XBad2()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad6.m(test.read.receiver.implicit.X,test.read.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad13.m(test.read.receiver.qualified.X,test.read.receiver.qualified.X)
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.Bad2.m1(test.intrinsic.receiver.qualified.C,test.intrinsic.receiver.qualified.C,test.intrinsic.receiver.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad1.XBad1()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad6.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.Bad2.<clinit>
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.Good3a.m1(test.write.staticlocks.qualified.C,test.write.staticlocks.qualified.C,test.write.staticlocks.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad13.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad7.XBad7()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.X.X()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad14.XBad14()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.Good3a.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad18.m(test.intrinsic.staticlocks.simple.X,test.intrinsic.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.Good3b.Good3b()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad18.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad19.XBad19()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad1.m(test.read.receiver.qualified.X,test.read.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad2.m(test.intrinsic.formals.X,test.intrinsic.formals.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad7.m(test.read.receiver.implicit.X,test.read.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad14.m(test.read.receiver.qualified.X,test.read.receiver.qualified.X)
##SUBTASK, Checking [ Nullable ] test.write.qualified.X.get(test.write.qualified.Outer1,test.write.qualified.Outer1)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad1.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad2.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.Good3b.m1(test.write.staticlocks.qualified.C,test.write.staticlocks.qualified.C,test.write.staticlocks.qualified.C)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad7.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad8.XBad8()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad19.m(test.intrinsic.staticlocks.simple.X,test.intrinsic.staticlocks.simple.X)
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad14.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad15.XBad15()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad3.XBad3()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad19.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.X.m(test.intrinsic.receiver.qualified.X,test.intrinsic.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad20.XBad20()
##SUBTASK, Checking [ Nullable ] test.write.qualified.X.<clinit>
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.Good3b.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.X.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.Bad2.Bad2()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad8.m(test.read.receiver.implicit.X,test.read.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad8.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad9.XBad9()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad15.m(test.read.receiver.qualified.X,test.read.receiver.qualified.X)
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad2.XBad2()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad3.m(test.intrinsic.formals.X,test.intrinsic.formals.X)
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.C.C()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad15.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad1.XBad1()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.Bad2.m1(test.write.staticlocks.qualified.C,test.write.staticlocks.qualified.C,test.write.staticlocks.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad16.XBad16()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.Bad2.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.X.X()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad9.m(test.read.receiver.implicit.X,test.read.receiver.implicit.X)
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad20.m(test.intrinsic.staticlocks.simple.X,test.intrinsic.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad2.m(test.read.receiver.qualified.X,test.read.receiver.qualified.X)
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad20.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad3.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad21.XBad21()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad1.m(test.intrinsic.receiver.qualified.X,test.intrinsic.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad2.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad16.m(test.read.receiver.qualified.X,test.read.receiver.qualified.X)
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad9.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad10.XBad10()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad16.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad1.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad3.XBad3()
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad4.XBad4()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad2.XBad2()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad21.m(test.intrinsic.staticlocks.simple.X,test.intrinsic.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.X.m(test.write.staticlocks.qualified.X,test.write.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad21.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.X.<clinit>
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad17.XBad17()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad4.m(test.intrinsic.formals.X,test.intrinsic.formals.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad2.m(test.intrinsic.receiver.qualified.X,test.intrinsic.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad4.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad2.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad5.XBad5()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad3.XBad3()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad17.m(test.read.receiver.qualified.X,test.read.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad1.XBad1()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.C.m1(test.read.receiver.qualified.C,test.read.receiver.qualified.C,test.read.receiver.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad3.m(test.read.receiver.qualified.X,test.read.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad3.m(test.intrinsic.receiver.qualified.X,test.intrinsic.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.C.m2(test.read.receiver.qualified.C,test.read.receiver.qualified.C,test.read.receiver.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad3.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad22.XBad22()
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad17.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad3.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad10.<clinit>
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad10.m(test.read.receiver.implicit.X,test.read.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad18.XBad18()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad4.XBad4()
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad5.m(test.intrinsic.formals.X,test.intrinsic.formals.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.C.m3(test.read.receiver.qualified.C)
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad10.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad1.m(test.write.staticlocks.qualified.X,test.write.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad11.XBad11()
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad5.<clinit>
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XGood1.XGood1()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad1.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad6.XBad6()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad2.XBad2()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad22.m(test.intrinsic.staticlocks.simple.X,test.intrinsic.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad18.m(test.read.receiver.qualified.X,test.read.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad4.m(test.intrinsic.receiver.qualified.X,test.intrinsic.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad22.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad18.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad4.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad23.XBad23()
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XGood1.m(test.read.receiver.implicit.X,test.read.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XGood1.XGood1()
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad19.XBad19()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad11.m(test.intrinsic.receiver.qualified.X,test.intrinsic.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad2.m(test.write.staticlocks.qualified.X,test.write.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XGood1.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad6.m(test.intrinsic.formals.X,test.intrinsic.formals.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XGood2.XGood2()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad2.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad11.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad6.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad3.XBad3()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad12.XBad12()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad7.XBad7()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad23.m(test.intrinsic.staticlocks.simple.X,test.intrinsic.staticlocks.simple.X)
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad19.m(test.read.receiver.qualified.X,test.read.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XGood1.m(test.intrinsic.receiver.qualified.X,test.intrinsic.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad19.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XGood2.m(test.read.receiver.implicit.X,test.read.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad20.XBad20()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XGood1.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad3.m(test.write.staticlocks.qualified.X,test.write.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad23.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XGood2.XGood2()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XGood2.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad7.m(test.intrinsic.formals.X,test.intrinsic.formals.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad24.XBad24()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad3.<clinit>
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XGood3.XGood3()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad4.XBad4()
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad7.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad8.XBad8()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad12.m(test.intrinsic.receiver.qualified.X,test.intrinsic.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad20.m(test.read.receiver.qualified.X,test.read.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad12.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XGood3.m(test.read.receiver.implicit.X,test.read.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad13.XBad13()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad4.m(test.write.staticlocks.qualified.X,test.write.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XGood3.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad20.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad4.<clinit>
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad11.XBad11()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad21.XBad21()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad5.XBad5()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad13.m(test.intrinsic.receiver.qualified.X,test.intrinsic.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad13.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad14.XBad14()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad11.m(test.read.receiver.implicit.X,test.read.receiver.implicit.X)
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XGood2.m(test.intrinsic.receiver.qualified.X,test.intrinsic.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad5.m(test.write.staticlocks.qualified.X,test.write.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad11.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad5.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad24.m(test.intrinsic.staticlocks.simple.X,test.intrinsic.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad6.XBad6()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad12.XBad12()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad24.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XGood2.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad8.m(test.intrinsic.formals.X,test.intrinsic.formals.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.C.C()
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XGood3.XGood3()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad8.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad14.m(test.intrinsic.receiver.qualified.X,test.intrinsic.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad14.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad15.XBad15()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad6.m(test.write.staticlocks.qualified.X,test.write.staticlocks.qualified.X)
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad21.m(test.read.receiver.qualified.X,test.read.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad6.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.qualified.XBad21.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad7.XBad7()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad12.m(test.read.receiver.implicit.X,test.read.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad12.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad13.XBad13()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad15.m(test.intrinsic.receiver.qualified.X,test.intrinsic.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad15.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad16.XBad16()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad7.m(test.write.staticlocks.qualified.X,test.write.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.C.m1(test.intrinsic.receiver.explicit.C,test.intrinsic.receiver.explicit.C,test.intrinsic.receiver.explicit.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad7.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad13.m(test.read.receiver.implicit.X,test.read.receiver.implicit.X)
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad8.XBad8()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad9.XBad9()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad13.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad14.XBad14()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad16.m(test.intrinsic.receiver.qualified.X,test.intrinsic.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.C.m2(test.intrinsic.receiver.explicit.C,test.intrinsic.receiver.explicit.C,test.intrinsic.receiver.explicit.C)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad16.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.C.C()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad17.XBad17()
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.C.m3(test.intrinsic.receiver.explicit.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad8.m(test.write.staticlocks.qualified.X,test.write.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad9.m(test.intrinsic.formals.X,test.intrinsic.formals.X)
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XGood3.m(test.intrinsic.receiver.qualified.X,test.intrinsic.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.C.m4(test.intrinsic.receiver.explicit.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad8.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad14.m(test.read.receiver.implicit.X,test.read.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.C.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad14.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad9.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XGood3.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.Good1.Good1()
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad9.XBad9()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad5.XBad5()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad17.m(test.intrinsic.receiver.qualified.X,test.intrinsic.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad15.XBad15()
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad10.XBad10()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.C.m1(test.intrinsic.formals.C,test.intrinsic.formals.C,test.intrinsic.formals.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad17.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad18.XBad18()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad9.m(test.write.staticlocks.qualified.X,test.write.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad5.m(test.intrinsic.receiver.qualified.X,test.intrinsic.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.Good1.m1(test.intrinsic.receiver.explicit.C,test.intrinsic.receiver.explicit.C,test.intrinsic.receiver.explicit.C)
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad5.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.C.m2(test.intrinsic.formals.C,test.intrinsic.formals.C,test.intrinsic.formals.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad9.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad10.m(test.intrinsic.formals.X,test.intrinsic.formals.X)
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.Good1.m2(test.intrinsic.receiver.explicit.C,test.intrinsic.receiver.explicit.C,test.intrinsic.receiver.explicit.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad10.XBad10()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad6.XBad6()
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.C.m3(test.intrinsic.formals.C)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad15.m(test.read.receiver.implicit.X,test.read.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.Good1.m3(test.intrinsic.receiver.explicit.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad18.m(test.intrinsic.receiver.qualified.X,test.intrinsic.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad15.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad13.XBad13()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad18.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad16.XBad16()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad19.XBad19()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad10.m(test.write.staticlocks.qualified.X,test.write.staticlocks.qualified.X)
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad6.m(test.intrinsic.receiver.qualified.X,test.intrinsic.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad10.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad6.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad11.XBad11()
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad10.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad7.XBad7()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad11.XBad11()
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad16.m(test.read.receiver.implicit.X,test.read.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad19.m(test.intrinsic.receiver.qualified.X,test.intrinsic.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad16.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad19.<clinit>
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.Good1.m3(test.read.staticlocks.simple.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad17.XBad17()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad20.XBad20()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.Good1.m4(test.read.staticlocks.simple.C)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad7.m(test.intrinsic.receiver.qualified.X,test.intrinsic.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.Good1.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad11.m(test.intrinsic.formals.X,test.intrinsic.formals.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad7.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad13.m(test.intrinsic.formals.X,test.intrinsic.formals.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad11.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad8.XBad8()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.Bad1.Bad1()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad13.<clinit>
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad11.m(test.write.staticlocks.qualified.X,test.write.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad20.m(test.intrinsic.receiver.qualified.X,test.intrinsic.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad14.XBad14()
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad12.XBad12()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad20.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad17.m(test.read.receiver.implicit.X,test.read.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.Good1.m4(test.intrinsic.receiver.explicit.C)
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad17.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad18.XBad18()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad8.m(test.intrinsic.receiver.qualified.X,test.intrinsic.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad12.m(test.intrinsic.formals.X,test.intrinsic.formals.X)
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad11.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad14.m(test.intrinsic.formals.X,test.intrinsic.formals.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad12.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.Good1.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad14.<clinit>
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.Bad1.m1(test.read.staticlocks.simple.C,test.read.staticlocks.simple.C,test.read.staticlocks.simple.C)
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad24.XBad24()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.Bad1.Bad1()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad15.XBad15()
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad8.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.Bad1.m3(test.read.staticlocks.simple.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad9.XBad9()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad18.m(test.read.receiver.implicit.X,test.read.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.Bad1.m4(test.read.staticlocks.simple.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad18.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.Bad1.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad19.XBad19()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad12.XBad12()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad21.XBad21()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.Good2.Good2()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad15.m(test.intrinsic.formals.X,test.intrinsic.formals.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.Bad1.m1(test.intrinsic.receiver.explicit.C,test.intrinsic.receiver.explicit.C,test.intrinsic.receiver.explicit.C)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad15.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad24.m(test.intrinsic.formals.X,test.intrinsic.formals.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.Bad1.m3(test.intrinsic.receiver.explicit.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad16.XBad16()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad24.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.Bad1.m4(test.intrinsic.receiver.explicit.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad19.m(test.read.receiver.implicit.X,test.read.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad25.XBad25()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad21.m(test.intrinsic.receiver.qualified.X,test.intrinsic.receiver.qualified.X)
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad9.m(test.intrinsic.receiver.qualified.X,test.intrinsic.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.Bad1.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.Good2.m1(test.read.staticlocks.simple.C,test.read.staticlocks.simple.C,test.read.staticlocks.simple.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad21.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.Good2.Good2()
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad9.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad22.XBad22()
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad19.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad10.XBad10()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.Good2.<clinit>
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad12.m(test.write.staticlocks.qualified.X,test.write.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.Good3.Good3()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.Good2.m1(test.intrinsic.receiver.explicit.C,test.intrinsic.receiver.explicit.C,test.intrinsic.receiver.explicit.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.Good2.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.Good3.Good3()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad20.XBad20()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.Good3.m1(test.read.staticlocks.simple.C,test.read.staticlocks.simple.C,test.read.staticlocks.simple.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.Good3.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad22.m(test.intrinsic.receiver.qualified.X,test.intrinsic.receiver.qualified.X)
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad12.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.Good3.m1(test.intrinsic.receiver.explicit.C,test.intrinsic.receiver.explicit.C,test.intrinsic.receiver.explicit.C)
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad16.m(test.intrinsic.formals.X,test.intrinsic.formals.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad13.XBad13()
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad10.m(test.intrinsic.receiver.qualified.X,test.intrinsic.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad20.m(test.read.receiver.implicit.X,test.read.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad25.m(test.intrinsic.formals.X,test.intrinsic.formals.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad25.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad26.XBad26()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad26.m(test.intrinsic.formals.X,test.intrinsic.formals.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad26.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.C.C()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad22.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad16.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.Bad2.Bad2()
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.Good3.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad23.XBad23()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad17.XBad17()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.Bad2.Bad2()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad20.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad21.XBad21()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.Bad2.m1(test.read.staticlocks.simple.C,test.read.staticlocks.simple.C,test.read.staticlocks.simple.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad17.m(test.intrinsic.formals.X,test.intrinsic.formals.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.Bad2.m1(test.intrinsic.receiver.explicit.C,test.intrinsic.receiver.explicit.C,test.intrinsic.receiver.explicit.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad23.m(test.intrinsic.receiver.qualified.X,test.intrinsic.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad13.m(test.write.staticlocks.qualified.X,test.write.staticlocks.qualified.X)
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad17.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.Bad2.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad23.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad18.XBad18()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad21.m(test.read.receiver.implicit.X,test.read.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad24.XBad24()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.C.m1(test.read.receiver.implicit.C,test.read.receiver.implicit.C,test.read.receiver.implicit.C)
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.XBad21.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.C.C()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.C.m2(test.read.receiver.implicit.C,test.read.receiver.implicit.C,test.read.receiver.implicit.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.C.m3(test.read.receiver.implicit.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad18.m(test.intrinsic.formals.X,test.intrinsic.formals.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.C.m4(test.read.receiver.implicit.C)
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad13.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XGood1.XGood1()
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.X.X()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.C.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad18.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad19.XBad19()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.Good1.Good1()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad24.m(test.intrinsic.receiver.qualified.X,test.intrinsic.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad24.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XGood1.m(test.write.staticlocks.qualified.X,test.write.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad25.XBad25()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.C.m1(test.intrinsic.staticlocks.simple.C,test.intrinsic.staticlocks.simple.C,test.intrinsic.staticlocks.simple.C)
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.Bad2.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.X.X()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XGood1.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.C.m2(test.intrinsic.staticlocks.simple.C,test.intrinsic.staticlocks.simple.C,test.intrinsic.staticlocks.simple.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XGood2.XGood2()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.Good1.m1(test.read.receiver.implicit.C,test.read.receiver.implicit.C,test.read.receiver.implicit.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.C.m3(test.intrinsic.staticlocks.simple.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.Good1.m2(test.read.receiver.implicit.C,test.read.receiver.implicit.C,test.read.receiver.implicit.C)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.X.m(test.intrinsic.receiver.explicit.X,test.intrinsic.receiver.explicit.X)
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad19.m(test.intrinsic.formals.X,test.intrinsic.formals.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad25.m(test.intrinsic.receiver.qualified.X,test.intrinsic.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.C.m4(test.intrinsic.staticlocks.simple.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad19.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad25.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.X.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XGood2.m(test.write.staticlocks.qualified.X,test.write.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad20.XBad20()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XGood2.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XGood3.XGood3()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.X.m(test.read.staticlocks.simple.X,test.read.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.C.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.X.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.Good1.m3(test.read.receiver.implicit.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad1.XBad1()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad20.m(test.intrinsic.formals.X,test.intrinsic.formals.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.Good1.m4(test.read.receiver.implicit.C)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad26.XBad26()
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad20.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad21.XBad21()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.Good1.<clinit>
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XGood3.m(test.write.staticlocks.qualified.X,test.write.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad1.m(test.intrinsic.receiver.explicit.X,test.intrinsic.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.Bad1.Bad1()
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.Good1.Good1()
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XGood3.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad1.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad1.XBad1()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad2.XBad2()
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad14.XBad14()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad21.m(test.intrinsic.formals.X,test.intrinsic.formals.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad26.m(test.intrinsic.receiver.qualified.X,test.intrinsic.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad21.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad22.XBad22()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.qualified.XBad26.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.qualified.Outer1.Outer1()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad1.m(test.read.staticlocks.simple.X,test.read.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.Bad1.m1(test.read.receiver.implicit.C,test.read.receiver.implicit.C,test.read.receiver.implicit.C)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad2.m(test.intrinsic.receiver.explicit.X,test.intrinsic.receiver.explicit.X)
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.Good1.m1(test.intrinsic.staticlocks.simple.C,test.intrinsic.staticlocks.simple.C,test.intrinsic.staticlocks.simple.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad1.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.Bad1.m3(test.read.receiver.implicit.C)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad14.m(test.write.staticlocks.qualified.X,test.write.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.Good1.m2(test.intrinsic.staticlocks.simple.C,test.intrinsic.staticlocks.simple.C,test.intrinsic.staticlocks.simple.C)
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad2.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad22.m(test.intrinsic.formals.X,test.intrinsic.formals.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad2.XBad2()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad22.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad23.XBad23()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad23.m(test.intrinsic.formals.X,test.intrinsic.formals.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.formals.XBad23.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad3.XBad3()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.Good1.m3(test.intrinsic.staticlocks.simple.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.Bad1.m4(test.read.receiver.implicit.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad3.m(test.intrinsic.receiver.explicit.X,test.intrinsic.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.Good1.m4(test.intrinsic.staticlocks.simple.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.Bad1.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.Good1.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.Bad1.Bad1()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.Bad1.m1(test.intrinsic.staticlocks.simple.C,test.intrinsic.staticlocks.simple.C,test.intrinsic.staticlocks.simple.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.Bad1.m3(test.intrinsic.staticlocks.simple.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.Bad1.m4(test.intrinsic.staticlocks.simple.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.Bad1.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.Good2.Good2()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.Good2.m1(test.intrinsic.staticlocks.simple.C,test.intrinsic.staticlocks.simple.C,test.intrinsic.staticlocks.simple.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.Good2.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.Good3.Good3()
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad14.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad15.XBad15()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.Good3.m1(test.intrinsic.staticlocks.simple.C,test.intrinsic.staticlocks.simple.C,test.intrinsic.staticlocks.simple.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad3.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.Good3.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad4.XBad4()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.Bad2.Bad2()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad15.m(test.write.staticlocks.qualified.X,test.write.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad15.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad16.XBad16()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.Bad2.m1(test.intrinsic.staticlocks.simple.C,test.intrinsic.staticlocks.simple.C,test.intrinsic.staticlocks.simple.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad4.m(test.intrinsic.receiver.explicit.X,test.intrinsic.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.Bad2.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad4.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.X.X()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XGood1.XGood1()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad16.m(test.write.staticlocks.qualified.X,test.write.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad2.m(test.read.staticlocks.simple.X,test.read.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad16.<clinit>
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.Good2.Good2()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad17.XBad17()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad2.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad3.XBad3()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad3.m(test.read.staticlocks.simple.X,test.read.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad3.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad4.XBad4()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.X.m(test.intrinsic.staticlocks.simple.X,test.intrinsic.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad4.m(test.read.staticlocks.simple.X,test.read.staticlocks.simple.X)
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.X.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad4.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.Good2.m1(test.read.receiver.implicit.C,test.read.receiver.implicit.C,test.read.receiver.implicit.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad5.XBad5()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.Good2.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.Good3.Good3()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad5.m(test.read.staticlocks.simple.X,test.read.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.Good3.m1(test.read.receiver.implicit.C,test.read.receiver.implicit.C,test.read.receiver.implicit.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad5.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad6.XBad6()
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.Good3.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.Bad2.Bad2()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad17.m(test.write.staticlocks.qualified.X,test.write.staticlocks.qualified.X)
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad1.XBad1()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XGood1.m(test.intrinsic.receiver.explicit.X,test.intrinsic.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad1.m(test.intrinsic.staticlocks.simple.X,test.intrinsic.staticlocks.simple.X)
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad6.m(test.read.staticlocks.simple.X,test.read.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.implicit.Bad2.m1(test.read.receiver.implicit.C,test.read.receiver.implicit.C,test.read.receiver.implicit.C)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad17.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad6.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad1.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XGood1.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad18.XBad18()
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XGood2.XGood2()
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad2.XBad2()
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad7.XBad7()
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.Bad1.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.Good2.Good2()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XGood2.m(test.intrinsic.receiver.explicit.X,test.intrinsic.receiver.explicit.X)
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad7.m(test.read.staticlocks.simple.X,test.read.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad2.m(test.intrinsic.staticlocks.simple.X,test.intrinsic.staticlocks.simple.X)
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad18.m(test.write.staticlocks.qualified.X,test.write.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XGood2.<clinit>
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad7.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad2.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XGood3.XGood3()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad18.<clinit>
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad8.XBad8()
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.Good2.m1(test.intrinsic.staticlocks.qualified.C,test.intrinsic.staticlocks.qualified.C,test.intrinsic.staticlocks.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad3.XBad3()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.qualified.Outer1.C.C()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad19.XBad19()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.Good2.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.Good3.Good3()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XGood3.m(test.intrinsic.receiver.explicit.X,test.intrinsic.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad3.m(test.intrinsic.staticlocks.simple.X,test.intrinsic.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad8.m(test.read.staticlocks.simple.X,test.read.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XGood3.<clinit>
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad19.m(test.write.staticlocks.qualified.X,test.write.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad3.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad8.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad5.XBad5()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad4.XBad4()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad9.XBad9()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad19.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.Good3.m1(test.intrinsic.staticlocks.qualified.C,test.intrinsic.staticlocks.qualified.C,test.intrinsic.staticlocks.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad20.XBad20()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.Good3.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.Bad2.Bad2()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad5.m(test.intrinsic.receiver.explicit.X,test.intrinsic.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.qualified.Outer1.C.get(test.write.qualified.Outer1,test.write.qualified.Outer1)
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad4.m(test.intrinsic.staticlocks.simple.X,test.intrinsic.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad9.m(test.read.staticlocks.simple.X,test.read.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad5.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.qualified.Outer1.C.get2(test.write.qualified.Outer1,test.write.qualified.Outer1)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad4.<clinit>
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad20.m(test.write.staticlocks.qualified.X,test.write.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad9.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad6.XBad6()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad5.XBad5()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.qualified.Outer1.C.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad10.XBad10()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad20.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.Bad2.m1(test.intrinsic.staticlocks.qualified.C,test.intrinsic.staticlocks.qualified.C,test.intrinsic.staticlocks.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad21.XBad21()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.Bad2.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.qualified.Outer1.Bad1.Bad1()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.X.X()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad6.m(test.intrinsic.receiver.explicit.X,test.intrinsic.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad5.m(test.intrinsic.staticlocks.simple.X,test.intrinsic.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad5.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad6.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad10.m(test.read.staticlocks.simple.X,test.read.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XGood1.XGood1()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad7.XBad7()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad21.m(test.write.staticlocks.qualified.X,test.write.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad10.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.qualified.Outer1.Bad1.get2(test.write.qualified.Outer1,test.write.qualified.Outer1)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad11.XBad11()
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad21.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.qualified.Outer1.Bad1.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XGood4.XGood4()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.qualified.Outer1.Good1.Good1()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.X.m(test.intrinsic.staticlocks.qualified.X,test.intrinsic.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XGood1.m(test.intrinsic.staticlocks.simple.X,test.intrinsic.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad7.m(test.intrinsic.receiver.explicit.X,test.intrinsic.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.X.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XGood1.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad7.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XGood2.XGood2()
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad11.m(test.read.staticlocks.simple.X,test.read.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad8.XBad8()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad11.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XGood4.m(test.write.staticlocks.qualified.X,test.write.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad12.XBad12()
##SUBTASK, Checking [ Nullable ] test.write.qualified.Outer1.Good1.get(test.write.qualified.Outer1,test.write.qualified.Outer1)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XGood4.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XGood5.XGood5()
##SUBTASK, Checking [ Nullable ] test.write.qualified.Outer1.Good1.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.qualified.Outer1.Good2a.Good2a()
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XGood2.m(test.intrinsic.staticlocks.simple.X,test.intrinsic.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad1.XBad1()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad8.m(test.intrinsic.receiver.explicit.X,test.intrinsic.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XGood2.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad12.m(test.read.staticlocks.simple.X,test.read.staticlocks.simple.X)
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad8.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XGood3.XGood3()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad9.XBad9()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad12.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XGood5.m(test.write.staticlocks.qualified.X,test.write.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad13.XBad13()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.qualified.Outer1.Good2a.get(test.write.qualified.Outer1,test.write.qualified.Outer1)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad1.m(test.intrinsic.staticlocks.qualified.X,test.intrinsic.staticlocks.qualified.X)
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XGood5.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.qualified.Outer1.Good2a.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad1.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XGood6.XGood6()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.qualified.Outer1.Good2b.Good2b()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XGood3.m(test.intrinsic.staticlocks.simple.X,test.intrinsic.staticlocks.simple.X)
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad2.XBad2()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad9.m(test.intrinsic.receiver.explicit.X,test.intrinsic.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XGood3.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad13.m(test.read.staticlocks.simple.X,test.read.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad9.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad6.XBad6()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad13.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad10.XBad10()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XGood1.XGood1()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XGood6.m(test.write.staticlocks.qualified.X,test.write.staticlocks.qualified.X)
##SUBTASK, Checking [ Nullable ] test.write.qualified.Outer1.Good2b.get(test.write.qualified.Outer1,test.write.qualified.Outer1)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad2.m(test.intrinsic.staticlocks.qualified.X,test.intrinsic.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XGood6.<clinit>
##SUBTASK, Checking [ Nullable ] test.write.qualified.Outer1.Good2b.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad2.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.qualified.Outer1.Bad2a.Bad2a()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad3.XBad3()
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad22.XBad22()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad6.m(test.intrinsic.staticlocks.simple.X,test.intrinsic.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad10.m(test.intrinsic.receiver.explicit.X,test.intrinsic.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XGood1.m(test.read.staticlocks.simple.X,test.read.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad6.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad10.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad7.XBad7()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XGood1.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad11.XBad11()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XGood2.XGood2()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad2.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad3.XBad3()
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad22.m(test.write.staticlocks.qualified.X,test.write.staticlocks.qualified.X)
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad3.m(test.intrinsic.staticlocks.qualified.X,test.intrinsic.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad22.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad3.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad7.m(test.intrinsic.staticlocks.simple.X,test.intrinsic.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad23.XBad23()
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad4.XBad4()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XGood2.m(test.read.staticlocks.simple.X,test.read.staticlocks.simple.X)
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.simple.XBad7.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad11.m(test.intrinsic.receiver.explicit.X,test.intrinsic.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XGood2.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad7.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad22.m(test.intrinsic.receiver.implicit.X,test.intrinsic.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad3.m(test.read.formals.X,test.read.formals.X)
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XGood3.XGood3()
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad16.XBad16()
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad11.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad8.XBad8()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad22.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad3.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad12.XBad12()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad23.XBad23()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad4.XBad4()
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad4.m(test.intrinsic.staticlocks.qualified.X,test.intrinsic.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad23.m(test.write.staticlocks.qualified.X,test.write.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad4.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad5.XBad5()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XGood3.m(test.read.staticlocks.simple.X,test.read.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad23.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad16.m(test.intrinsic.receiver.explicit.X,test.intrinsic.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XGood3.<clinit>
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad8.m(test.read.receiver.explicit.X,test.read.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad24.XBad24()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad14.XBad14()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad16.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad8.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad23.m(test.intrinsic.receiver.implicit.X,test.intrinsic.receiver.implicit.X)
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad12.m(test.intrinsic.receiver.explicit.X,test.intrinsic.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad4.m(test.read.formals.X,test.read.formals.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad9.XBad9()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad23.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad17.XBad17()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad4.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad24.XBad24()
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad12.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad5.m(test.intrinsic.staticlocks.qualified.X,test.intrinsic.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad5.XBad5()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad5.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad24.m(test.write.staticlocks.qualified.X,test.write.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad14.m(test.read.staticlocks.simple.X,test.read.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad13.XBad13()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XGood1.XGood1()
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.qualified.XBad24.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad14.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad17.m(test.intrinsic.receiver.explicit.X,test.intrinsic.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad9.m(test.read.receiver.explicit.X,test.read.receiver.explicit.X)
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad15.XBad15()
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.C.C()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad24.m(test.intrinsic.receiver.implicit.X,test.intrinsic.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad17.<clinit>
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad5.m(test.read.formals.X,test.read.formals.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad9.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad24.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad5.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad25.XBad25()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad6.XBad6()
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad10.XBad10()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad18.XBad18()
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad13.m(test.intrinsic.receiver.explicit.X,test.intrinsic.receiver.explicit.X)
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XGood1.m(test.intrinsic.staticlocks.qualified.X,test.intrinsic.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad15.m(test.read.staticlocks.simple.X,test.read.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad13.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XGood1.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad15.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XGood2.XGood2()
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad14.XBad14()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad16.XBad16()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad25.m(test.intrinsic.receiver.implicit.X,test.intrinsic.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad25.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad26.XBad26()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad18.m(test.intrinsic.receiver.explicit.X,test.intrinsic.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad18.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XGood2.m(test.intrinsic.staticlocks.qualified.X,test.intrinsic.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad10.m(test.read.receiver.explicit.X,test.read.receiver.explicit.X)
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad19.XBad19()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad14.m(test.intrinsic.receiver.explicit.X,test.intrinsic.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XGood2.<clinit>
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad6.m(test.read.formals.X,test.read.formals.X)
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad16.m(test.read.staticlocks.simple.X,test.read.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad10.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XGood3.XGood3()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XGood1.XGood1()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad6.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad16.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad26.m(test.intrinsic.receiver.implicit.X,test.intrinsic.receiver.implicit.X)
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad14.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad17.XBad17()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad7.XBad7()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad15.XBad15()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad26.<clinit>
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.C.m1(test.write.receiver.explicit.C,test.write.receiver.explicit.C,test.write.receiver.explicit.C)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.C.C()
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad19.m(test.intrinsic.receiver.explicit.X,test.intrinsic.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.C.m2(test.write.receiver.explicit.C,test.write.receiver.explicit.C,test.write.receiver.explicit.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XGood3.m(test.intrinsic.staticlocks.qualified.X,test.intrinsic.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.C.m3(test.write.receiver.explicit.C)
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XGood1.m(test.read.receiver.explicit.X,test.read.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XGood3.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad19.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XGood1.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad20.XBad20()
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.C.m4(test.write.receiver.explicit.C)
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad17.m(test.read.staticlocks.simple.X,test.read.staticlocks.simple.X)
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad6.XBad6()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad15.m(test.intrinsic.receiver.explicit.X,test.intrinsic.receiver.explicit.X)
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XGood2.XGood2()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad17.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.C.<clinit>
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad7.m(test.read.formals.X,test.read.formals.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad15.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad18.XBad18()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad2.<clinit>
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad7.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad8.XBad8()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad3.XBad3()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad6.m(test.intrinsic.staticlocks.qualified.X,test.intrinsic.staticlocks.qualified.X)
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad20.m(test.intrinsic.receiver.explicit.X,test.intrinsic.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.Good1.Good1()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XGood2.m(test.read.receiver.explicit.X,test.read.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad6.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad18.m(test.read.staticlocks.simple.X,test.read.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad7.XBad7()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XGood2.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad18.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XGood3.XGood3()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad20.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad19.XBad19()
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad3.m(test.intrinsic.receiver.implicit.X,test.intrinsic.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad8.m(test.read.formals.X,test.read.formals.X)
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad21.XBad21()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad8.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad3.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad7.m(test.intrinsic.staticlocks.qualified.X,test.intrinsic.staticlocks.qualified.X)
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.C.m1(test.write.receiver.qualified.C,test.write.receiver.qualified.C,test.write.receiver.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.Good1.m1(test.write.receiver.explicit.C,test.write.receiver.explicit.C,test.write.receiver.explicit.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XGood1.XGood1()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad7.<clinit>
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.C.m2(test.write.receiver.qualified.C,test.write.receiver.qualified.C,test.write.receiver.qualified.C)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XGood3.m(test.read.receiver.explicit.X,test.read.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad19.m(test.read.staticlocks.simple.X,test.read.staticlocks.simple.X)
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad8.XBad8()
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad4.XBad4()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.C.m3(test.write.receiver.qualified.C)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad21.m(test.intrinsic.receiver.explicit.X,test.intrinsic.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad19.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.Good1.m2(test.write.receiver.explicit.C,test.write.receiver.explicit.C,test.write.receiver.explicit.C)
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.C.m4(test.write.receiver.qualified.C)
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XGood3.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad20.XBad20()
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad21.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.C.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad11.XBad11()
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.Good1.m3(test.write.receiver.explicit.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XGood1.m(test.read.formals.X,test.read.formals.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad22.XBad22()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad4.m(test.intrinsic.receiver.implicit.X,test.intrinsic.receiver.implicit.X)
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad8.m(test.intrinsic.staticlocks.qualified.X,test.intrinsic.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XGood1.<clinit>
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.Good1.Good1()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.Good1.m4(test.write.receiver.explicit.C)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad4.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad8.<clinit>
##SUBTASK, Checking [ Nullable ] test.read.formals.XGood2.XGood2()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad20.m(test.read.staticlocks.simple.X,test.read.staticlocks.simple.X)
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.Good1.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad9.XBad9()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad11.m(test.read.receiver.explicit.X,test.read.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.Bad1.Bad1()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad20.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XGood1.XGood1()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad22.m(test.intrinsic.receiver.explicit.X,test.intrinsic.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad11.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad21.XBad21()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad12.XBad12()
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad22.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad23.XBad23()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.Good1.m1(test.write.receiver.qualified.C,test.write.receiver.qualified.C,test.write.receiver.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad9.m(test.intrinsic.staticlocks.qualified.X,test.intrinsic.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.Good1.m2(test.write.receiver.qualified.C,test.write.receiver.qualified.C,test.write.receiver.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad9.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XGood1.m(test.intrinsic.receiver.implicit.X,test.intrinsic.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad10.XBad10()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad21.m(test.read.staticlocks.simple.X,test.read.staticlocks.simple.X)
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.Good1.m3(test.write.receiver.qualified.C)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad12.m(test.read.receiver.explicit.X,test.read.receiver.explicit.X)
##SUBTASK, Checking [ Nullable ] test.read.formals.XGood2.m(test.read.formals.X,test.read.formals.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XGood1.<clinit>
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.Good1.m4(test.write.receiver.qualified.C)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.Bad1.m1(test.write.receiver.explicit.C,test.write.receiver.explicit.C,test.write.receiver.explicit.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad21.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad23.m(test.intrinsic.receiver.explicit.X,test.intrinsic.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad12.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XGood2.<clinit>
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.Good1.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad22.XBad22()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad13.XBad13()
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.Bad1.m3(test.write.receiver.explicit.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad9.XBad9()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad23.<clinit>
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.Bad1.Bad1()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.Bad1.m4(test.write.receiver.explicit.C)
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XGood2.XGood2()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad10.m(test.intrinsic.staticlocks.qualified.X,test.intrinsic.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.Bad1.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad24.XBad24()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad10.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad11.XBad11()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.Good2a.Good2a()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad22.m(test.read.staticlocks.simple.X,test.read.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad13.m(test.read.receiver.explicit.X,test.read.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad22.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad13.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad23.XBad23()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.Bad1.m1(test.write.receiver.qualified.C,test.write.receiver.qualified.C,test.write.receiver.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XGood2.m(test.intrinsic.receiver.implicit.X,test.intrinsic.receiver.implicit.X)
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad14.XBad14()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.Bad1.m3(test.write.receiver.qualified.C)
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad24.m(test.intrinsic.receiver.explicit.X,test.intrinsic.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XGood2.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad11.m(test.intrinsic.staticlocks.qualified.X,test.intrinsic.staticlocks.qualified.X)
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad9.m(test.read.formals.X,test.read.formals.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad24.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XGood3.XGood3()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.Good2a.m1(test.write.receiver.explicit.C,test.write.receiver.explicit.C,test.write.receiver.explicit.C)
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.Bad1.m4(test.write.receiver.qualified.C)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad25.XBad25()
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad11.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad9.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad12.XBad12()
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.Bad1.<clinit>
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad23.m(test.read.staticlocks.simple.X,test.read.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.Good2a.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.Good2a.Good2a()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.Good2b.Good2b()
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad23.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad10.XBad10()
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad14.m(test.read.receiver.explicit.X,test.read.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad24.XBad24()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad14.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XGood3.m(test.intrinsic.receiver.implicit.X,test.intrinsic.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad15.XBad15()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad25.m(test.intrinsic.receiver.explicit.X,test.intrinsic.receiver.explicit.X)
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad12.m(test.intrinsic.staticlocks.qualified.X,test.intrinsic.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.Good2a.m1(test.write.receiver.qualified.C,test.write.receiver.qualified.C,test.write.receiver.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad25.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad12.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.Good2a.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad26.XBad26()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad10.m(test.read.formals.X,test.read.formals.X)
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad13.XBad13()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad24.m(test.read.staticlocks.simple.X,test.read.staticlocks.simple.X)
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XGood3.<clinit>
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.Good2b.Good2b()
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.Good2b.m1(test.write.receiver.explicit.C,test.write.receiver.explicit.C,test.write.receiver.explicit.C)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad5.XBad5()
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad10.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.XBad24.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad15.m(test.read.receiver.explicit.X,test.read.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad11.XBad11()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.C.C()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad15.<clinit>
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.Good2b.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad26.m(test.intrinsic.receiver.explicit.X,test.intrinsic.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.Good3a.Good3a()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad13.m(test.intrinsic.staticlocks.qualified.X,test.intrinsic.staticlocks.qualified.X)
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad16.XBad16()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.Good2b.m1(test.write.receiver.qualified.C,test.write.receiver.qualified.C,test.write.receiver.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.explicit.XBad26.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad13.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.C.C()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.Good2b.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad5.m(test.intrinsic.receiver.implicit.X,test.intrinsic.receiver.implicit.X)
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad14.XBad14()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.Good3a.Good3a()
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad11.m(test.read.formals.X,test.read.formals.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad5.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad6.XBad6()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad16.m(test.read.receiver.explicit.X,test.read.receiver.explicit.X)
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad11.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.Good3a.m1(test.write.receiver.explicit.C,test.write.receiver.explicit.C,test.write.receiver.explicit.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad16.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad12.XBad12()
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad14.m(test.intrinsic.staticlocks.qualified.X,test.intrinsic.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.Good3a.m1(test.write.receiver.qualified.C,test.write.receiver.qualified.C,test.write.receiver.qualified.C)
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad17.XBad17()
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.Good3a.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad14.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.Good3b.Good3b()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad15.XBad15()
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.Good3a.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.Good3b.Good3b()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.C.m1(test.write.formals.C,test.write.formals.C,test.write.formals.C)
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad6.m(test.intrinsic.receiver.implicit.X,test.intrinsic.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.C.m2(test.write.formals.C,test.write.formals.C,test.write.formals.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad6.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.C.m3(test.write.formals.C)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad7.XBad7()
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad17.m(test.read.receiver.explicit.X,test.read.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad15.m(test.intrinsic.staticlocks.qualified.X,test.intrinsic.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.C.m4(test.write.formals.C)
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad12.m(test.read.formals.X,test.read.formals.X)
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.C.m1(test.intrinsic.receiver.implicit.C,test.intrinsic.receiver.implicit.C,test.intrinsic.receiver.implicit.C)
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.Good3b.m1(test.write.receiver.explicit.C,test.write.receiver.explicit.C,test.write.receiver.explicit.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.Good3b.m1(test.write.receiver.qualified.C,test.write.receiver.qualified.C,test.write.receiver.qualified.C)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.C.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad12.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad15.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.Good3b.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.Good3b.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad13.XBad13()
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.C.m2(test.intrinsic.receiver.implicit.C,test.intrinsic.receiver.implicit.C,test.intrinsic.receiver.implicit.C)
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad17.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.Bad2.Bad2()
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad16.XBad16()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.Good1.Good1()
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad18.XBad18()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.C.m3(test.intrinsic.receiver.implicit.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.Bad2.Bad2()
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad7.m(test.intrinsic.receiver.implicit.X,test.intrinsic.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.C.m4(test.intrinsic.receiver.implicit.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad7.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.C.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad8.XBad8()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad13.m(test.read.formals.X,test.read.formals.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.Bad2.m1(test.write.receiver.qualified.C,test.write.receiver.qualified.C,test.write.receiver.qualified.C)
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad16.m(test.intrinsic.staticlocks.qualified.X,test.intrinsic.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad13.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad18.m(test.read.receiver.explicit.X,test.read.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad16.<clinit>
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.Bad2.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.Good1.Good1()
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad14.XBad14()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.X.X()
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad17.XBad17()
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.Bad2.m1(test.write.receiver.explicit.C,test.write.receiver.explicit.C,test.write.receiver.explicit.C)
##SUBTASK, Checking [ Nullable ] test.write.formals.Good1.m1(test.write.formals.C,test.write.formals.C,test.write.formals.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad18.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.Good1.m2(test.write.formals.C,test.write.formals.C,test.write.formals.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad19.XBad19()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.Good1.m3(test.write.formals.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.Good1.m4(test.write.formals.C)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.Bad2.<clinit>
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad14.m(test.read.formals.X,test.read.formals.X)
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad17.m(test.intrinsic.staticlocks.qualified.X,test.intrinsic.staticlocks.qualified.X)
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad8.m(test.intrinsic.receiver.implicit.X,test.intrinsic.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.Good1.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.X.X()
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.Good1.m1(test.intrinsic.receiver.implicit.C,test.intrinsic.receiver.implicit.C,test.intrinsic.receiver.implicit.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad17.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad8.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad14.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.Good1.m2(test.intrinsic.receiver.implicit.C,test.intrinsic.receiver.implicit.C,test.intrinsic.receiver.implicit.C)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.Bad1.Bad1()
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad19.m(test.read.receiver.explicit.X,test.read.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad15.XBad15()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad18.XBad18()
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad9.XBad9()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.Good1.m3(test.intrinsic.receiver.implicit.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.X.m(test.write.receiver.qualified.X,test.write.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.Good1.m4(test.intrinsic.receiver.implicit.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.X.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.Good1.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad15.m(test.read.formals.X,test.read.formals.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad18.m(test.intrinsic.staticlocks.qualified.X,test.intrinsic.staticlocks.qualified.X)
##SUBTASK, Checking [ Nullable ] test.write.formals.Bad1.m1(test.write.formals.C,test.write.formals.C,test.write.formals.C)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.Bad1.Bad1()
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad9.m(test.intrinsic.receiver.implicit.X,test.intrinsic.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad18.<clinit>
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad19.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.Bad1.m3(test.write.formals.C)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad15.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad9.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.X.m(test.write.receiver.explicit.X,test.write.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad19.XBad19()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad1.XBad1()
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad16.XBad16()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.X.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad20.XBad20()
##SUBTASK, Checking [ Nullable ] test.write.formals.Bad1.m4(test.write.formals.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.Bad1.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.Good2a.Good2a()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.Bad1.m1(test.intrinsic.receiver.implicit.C,test.intrinsic.receiver.implicit.C,test.intrinsic.receiver.implicit.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad19.m(test.intrinsic.staticlocks.qualified.X,test.intrinsic.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.Bad1.m3(test.intrinsic.receiver.implicit.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad1.m(test.write.receiver.qualified.X,test.write.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad16.m(test.read.formals.X,test.read.formals.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad19.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.Bad1.m4(test.intrinsic.receiver.implicit.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad10.XBad10()
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad1.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad16.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad20.XBad20()
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.Bad1.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.Good2a.m1(test.write.formals.C,test.write.formals.C,test.write.formals.C)
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad20.m(test.read.receiver.explicit.X,test.read.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad1.XBad1()
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad17.XBad17()
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad2.XBad2()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad20.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.Good2a.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad21.XBad21()
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.Good2.Good2()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.Good2b.Good2b()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad10.m(test.intrinsic.receiver.implicit.X,test.intrinsic.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad20.m(test.intrinsic.staticlocks.qualified.X,test.intrinsic.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad1.m(test.write.receiver.explicit.X,test.write.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad2.m(test.write.receiver.qualified.X,test.write.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad17.m(test.read.formals.X,test.read.formals.X)
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad20.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad10.<clinit>
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad2.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad21.XBad21()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.Good2b.m1(test.write.formals.C,test.write.formals.C,test.write.formals.C)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.Good2.m1(test.intrinsic.receiver.implicit.C,test.intrinsic.receiver.implicit.C,test.intrinsic.receiver.implicit.C)
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad17.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad11.XBad11()
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad1.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad3.XBad3()
##SUBTASK, Checking [ Nullable ] test.write.formals.Good2b.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.Good2.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad18.XBad18()
##SUBTASK, Checking [ Nullable ] test.write.formals.Good3a.Good3a()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.Good3.Good3()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad21.m(test.intrinsic.staticlocks.qualified.X,test.intrinsic.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad21.m(test.read.receiver.explicit.X,test.read.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad21.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad21.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad2.XBad2()
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad11.m(test.intrinsic.receiver.implicit.X,test.intrinsic.receiver.implicit.X)
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad3.m(test.write.receiver.qualified.X,test.write.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad22.XBad22()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.C.C()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad11.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.Good3a.m1(test.write.formals.C,test.write.formals.C,test.write.formals.C)
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad3.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.Good3.m1(test.intrinsic.receiver.implicit.C,test.intrinsic.receiver.implicit.C,test.intrinsic.receiver.implicit.C)
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad4.XBad4()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.Good3a.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad12.XBad12()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.Good3b.Good3b()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.Good3.<clinit>
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad2.m(test.write.receiver.explicit.X,test.write.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.Bad2.Bad2()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad22.m(test.intrinsic.staticlocks.qualified.X,test.intrinsic.staticlocks.qualified.X)
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad2.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad4.m(test.write.receiver.qualified.X,test.write.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad3.XBad3()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad18.m(test.read.formals.X,test.read.formals.X)
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad12.m(test.intrinsic.receiver.implicit.X,test.intrinsic.receiver.implicit.X)
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad22.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad4.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.Good3b.m1(test.write.formals.C,test.write.formals.C,test.write.formals.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad23.XBad23()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad5.XBad5()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad12.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.Good3b.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.Bad2.Bad2()
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.Bad2.m1(test.intrinsic.receiver.implicit.C,test.intrinsic.receiver.implicit.C,test.intrinsic.receiver.implicit.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad13.XBad13()
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad18.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.Bad2.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad19.XBad19()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.X.X()
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad3.m(test.write.receiver.explicit.X,test.write.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad23.m(test.intrinsic.staticlocks.qualified.X,test.intrinsic.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad5.m(test.write.receiver.qualified.X,test.write.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad3.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad23.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad5.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad24.XBad24()
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad4.XBad4()
##SUBTASK, Checking [ Nullable ] test.write.formals.Bad2.m1(test.write.formals.C,test.write.formals.C,test.write.formals.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad6.XBad6()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.Bad2.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad19.m(test.read.formals.X,test.read.formals.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.X.X()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad19.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad20.XBad20()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad24.m(test.intrinsic.staticlocks.qualified.X,test.intrinsic.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad6.m(test.write.receiver.qualified.X,test.write.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad13.m(test.intrinsic.receiver.implicit.X,test.intrinsic.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.C.m1(test.write.receiver.implicit.C,test.write.receiver.implicit.C,test.write.receiver.implicit.C)
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad6.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.XBad24.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad4.m(test.write.receiver.explicit.X,test.write.receiver.explicit.X)
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad7.XBad7()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad13.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.C.C()
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.X.m(test.intrinsic.receiver.implicit.X,test.intrinsic.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad14.XBad14()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad4.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad5.XBad5()
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.C.m2(test.write.receiver.implicit.C,test.write.receiver.implicit.C,test.write.receiver.implicit.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad20.m(test.read.formals.X,test.read.formals.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.X.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.C.m3(test.write.receiver.implicit.C)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad7.m(test.write.receiver.qualified.X,test.write.receiver.qualified.X)
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad20.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.C.m4(test.write.receiver.implicit.C)
##SUBTASK, Checking [ Nullable ] test.write.formals.X.m(test.write.formals.X,test.write.formals.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad14.m(test.intrinsic.receiver.implicit.X,test.intrinsic.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad21.XBad21()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.X.<clinit>
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad5.m(test.write.receiver.explicit.X,test.write.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad14.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad15.XBad15()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.C.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad1.XBad1()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad21.m(test.read.formals.X,test.read.formals.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad5.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad6.XBad6()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad21.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad7.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad1.XBad1()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.Good1.Good1()
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad22.XBad22()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad8.XBad8()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad15.m(test.intrinsic.receiver.implicit.X,test.intrinsic.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.C.m1(test.read.formals.C,test.read.formals.C,test.read.formals.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad15.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.C.m2(test.read.formals.C,test.read.formals.C,test.read.formals.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad16.XBad16()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad1.m(test.intrinsic.receiver.implicit.X,test.intrinsic.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.C.m3(test.read.formals.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad1.m(test.write.formals.X,test.write.formals.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad6.m(test.write.receiver.explicit.X,test.write.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.C.m4(test.read.formals.C)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad1.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad1.<clinit>
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad6.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.Good1.m1(test.write.receiver.implicit.C,test.write.receiver.implicit.C,test.write.receiver.implicit.C)
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad22.m(test.read.formals.X,test.read.formals.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.C.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad2.XBad2()
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad7.XBad7()
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad8.m(test.write.receiver.qualified.X,test.write.receiver.qualified.X)
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad2.XBad2()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.Good1.m2(test.write.receiver.implicit.C,test.write.receiver.implicit.C,test.write.receiver.implicit.C)
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad22.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad8.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.Good1.m3(test.write.receiver.implicit.C)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad9.XBad9()
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad23.XBad23()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.Good1.Good1()
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad16.m(test.intrinsic.receiver.implicit.X,test.intrinsic.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.Good1.m4(test.write.receiver.implicit.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad2.m(test.intrinsic.receiver.implicit.X,test.intrinsic.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.Good1.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad2.m(test.write.formals.X,test.write.formals.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad7.m(test.write.receiver.explicit.X,test.write.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad16.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.Bad1.Bad1()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad2.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad17.XBad17()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad23.m(test.read.formals.X,test.read.formals.X)
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad9.m(test.write.receiver.qualified.X,test.write.receiver.qualified.X)
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad7.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad3.XBad3()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad8.XBad8()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad9.<clinit>
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad23.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.Good1.m1(test.read.formals.C,test.read.formals.C,test.read.formals.C)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad10.XBad10()
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad24.XBad24()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.Good1.m2(test.read.formals.C,test.read.formals.C,test.read.formals.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.Good1.m3(test.read.formals.C)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.Bad1.m1(test.write.receiver.implicit.C,test.write.receiver.implicit.C,test.write.receiver.implicit.C)
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad17.m(test.intrinsic.receiver.implicit.X,test.intrinsic.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.Good1.m4(test.read.formals.C)
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad3.m(test.write.formals.X,test.write.formals.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad8.m(test.write.receiver.explicit.X,test.write.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad17.<clinit>
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.Bad1.m3(test.write.receiver.implicit.C)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad3.<clinit>
##SUBTASK, Checking [ Nullable ] test.read.formals.Good1.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad24.m(test.read.formals.X,test.read.formals.X)
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad8.<clinit>
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad10.m(test.write.receiver.qualified.X,test.write.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.Bad1.Bad1()
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad18.XBad18()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.Bad1.m4(test.write.receiver.implicit.C)
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad4.XBad4()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad10.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad9.XBad9()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.Bad1.<clinit>
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad24.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XGood1.XGood1()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad25.XBad25()
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.Good2a.Good2a()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad18.m(test.intrinsic.receiver.implicit.X,test.intrinsic.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad4.m(test.write.formals.X,test.write.formals.X)
##SUBTASK, Checking [ Nullable ] test.read.formals.Bad1.m1(test.read.formals.C,test.read.formals.C,test.read.formals.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad18.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XGood1.m(test.write.receiver.qualified.X,test.write.receiver.qualified.X)
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad9.m(test.write.receiver.explicit.X,test.write.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad19.XBad19()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad4.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.Good2a.m1(test.write.receiver.implicit.C,test.write.receiver.implicit.C,test.write.receiver.implicit.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XGood1.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad25.m(test.read.formals.X,test.read.formals.X)
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad5.XBad5()
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad9.<clinit>
##SUBTASK, Checking [ Nullable ] test.read.formals.Bad1.m3(test.read.formals.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XGood2.XGood2()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.Good2a.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad25.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.Bad1.m4(test.read.formals.C)
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad10.XBad10()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad26.XBad26()
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.Good2b.Good2b()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.Bad1.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.Good2a.Good2a()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad19.m(test.intrinsic.receiver.implicit.X,test.intrinsic.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad5.m(test.write.formals.X,test.write.formals.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XGood2.m(test.write.receiver.qualified.X,test.write.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad19.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad5.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XGood2.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad20.XBad20()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad6.XBad6()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad26.m(test.read.formals.X,test.read.formals.X)
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad10.m(test.write.receiver.explicit.X,test.write.receiver.explicit.X)
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XGood3.XGood3()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.Good2b.m1(test.write.receiver.implicit.C,test.write.receiver.implicit.C,test.write.receiver.implicit.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.Good2a.m1(test.read.formals.C,test.read.formals.C,test.read.formals.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad26.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.Good2b.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.qualified.Outer1.Outer1()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.Good2a.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.Good3a.Good3a()
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad10.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.Bad2b.Bad2b()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XGood1.XGood1()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad20.m(test.intrinsic.receiver.implicit.X,test.intrinsic.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XGood3.m(test.write.receiver.qualified.X,test.write.receiver.qualified.X)
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad6.m(test.write.formals.X,test.write.formals.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad20.<clinit>
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XGood3.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad6.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad21.XBad21()
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad11.XBad11()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad7.XBad7()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.Good3a.m1(test.write.receiver.implicit.C,test.write.receiver.implicit.C,test.write.receiver.implicit.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.Bad2b.m1(test.read.formals.C,test.read.formals.C,test.read.formals.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XGood1.m(test.write.receiver.explicit.X,test.write.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.Good3a.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.Bad2b.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XGood1.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.Good3a.Good3a()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.Good3b.Good3b()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XGood2.XGood2()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad21.m(test.intrinsic.receiver.implicit.X,test.intrinsic.receiver.implicit.X)
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad11.m(test.write.receiver.qualified.X,test.write.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad7.m(test.write.formals.X,test.write.formals.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad21.<clinit>
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad11.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.receiver.implicit.XBad22.XBad22()
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad12.XBad12()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad7.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.Good3a.m1(test.read.formals.C,test.read.formals.C,test.read.formals.C)
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad8.XBad8()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.Good3a.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XGood2.m(test.write.receiver.explicit.X,test.write.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.qualified.Outer1.C.C()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.Bad3b.Bad3b()
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.Good3b.m1(test.write.receiver.implicit.C,test.write.receiver.implicit.C,test.write.receiver.implicit.C)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XGood2.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.qualified.Outer1.Good2.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad12.m(test.write.receiver.qualified.X,test.write.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XGood3.XGood3()
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.Good3b.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad12.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.qualified.Outer1.Bad2a.Bad2a()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.Bad2.Bad2()
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad13.XBad13()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad8.m(test.write.formals.X,test.write.formals.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.Bad3b.m1(test.read.formals.C,test.read.formals.C,test.read.formals.C)
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad8.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XGood1.XGood1()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.Bad3b.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XGood3.m(test.write.receiver.explicit.X,test.write.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.Bad2.Bad2()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XGood3.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.qualified.Outer1.Bad2a.get(test.intrinsic.qualified.Outer1,test.intrinsic.qualified.Outer1)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.Bad2.m1(test.write.receiver.implicit.C,test.write.receiver.implicit.C,test.write.receiver.implicit.C)
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad13.m(test.write.receiver.qualified.X,test.write.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad11.XBad11()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.qualified.Outer1.Bad2a.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.Bad2.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad13.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.qualified.Outer1.Bad2b.Bad2b()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XGood1.m(test.write.formals.X,test.write.formals.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad14.XBad14()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.X.X()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.qualified.Outer1.C.get(test.read.qualified.Outer1,test.read.qualified.Outer1)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XGood1.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XGood2.XGood2()
##SUBTASK, Checking [ Nullable ] test.read.formals.Bad2.m1(test.read.formals.C,test.read.formals.C,test.read.formals.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.qualified.Outer1.C.get2(test.read.qualified.Outer1,test.read.qualified.Outer1)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad11.m(test.write.receiver.explicit.X,test.write.receiver.explicit.X)
##SUBTASK, Checking [ Nullable ] test.read.formals.Bad2.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.qualified.Outer1.C.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.X.X()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad11.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.qualified.Outer1.Bad2b.get(test.intrinsic.qualified.Outer1,test.intrinsic.qualified.Outer1)
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad14.m(test.write.receiver.qualified.X,test.write.receiver.qualified.X)
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad12.XBad12()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.qualified.Outer1.Bad1.Bad1()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.qualified.Outer1.Bad2b.<clinit>
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad14.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.qualified.Outer1.Bad2c.Bad2c()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XGood2.m(test.write.formals.X,test.write.formals.X)
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad15.XBad15()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XGood2.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad9.XBad9()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.X.m(test.write.receiver.implicit.X,test.write.receiver.implicit.X)
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad12.m(test.write.receiver.explicit.X,test.write.receiver.explicit.X)
##SUBTASK, Checking [ Nullable ] test.read.qualified.Outer1.Bad1.get2(test.read.qualified.Outer1,test.read.qualified.Outer1)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.X.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.qualified.Outer1.Bad2c.get(test.intrinsic.qualified.Outer1,test.intrinsic.qualified.Outer1)
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad15.m(test.write.receiver.qualified.X,test.write.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.qualified.Outer1.Bad1.<clinit>
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad12.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.qualified.Outer1.Bad2c.<clinit>
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad15.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad13.XBad13()
##SUBTASK, Checking [ Nullable ] test.read.formals.X.m(test.read.formals.X,test.read.formals.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad9.m(test.write.formals.X,test.write.formals.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XGood4.XGood4()
##SUBTASK, Checking [ Nullable ] test.read.qualified.Outer1.Good1.Good1()
##SUBTASK, Checking [ Nullable ] test.intrinsic.qualified.Outer1.Bad3.Bad3()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.X.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad9.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad10.XBad10()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad1.XBad1()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad13.m(test.write.receiver.explicit.X,test.write.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.qualified.Outer1.Good1.get(test.read.qualified.Outer1,test.read.qualified.Outer1)
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XGood4.m(test.write.receiver.qualified.X,test.write.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad13.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.qualified.Outer1.Good1.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.qualified.Outer1.Bad3.get(test.intrinsic.qualified.Outer1,test.intrinsic.qualified.Outer1)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad1.XBad1()
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad10.m(test.write.formals.X,test.write.formals.X)
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad14.XBad14()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XGood4.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.qualified.Outer1.Good2a.Good2a()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad1.m(test.write.receiver.implicit.X,test.write.receiver.implicit.X)
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad10.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.qualified.Outer1.Bad3.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XGood5.XGood5()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad11.XBad11()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.qualified.Outer1.Bad4.Bad4()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad1.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad2.XBad2()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad1.m(test.read.formals.X,test.read.formals.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad1.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.qualified.Outer1.Good2a.get(test.read.qualified.Outer1,test.read.qualified.Outer1)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad2.XBad2()
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad14.m(test.write.receiver.explicit.X,test.write.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad11.m(test.write.formals.X,test.write.formals.X)
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XGood5.m(test.write.receiver.qualified.X,test.write.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.qualified.Outer1.Good2a.<clinit>
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad14.<clinit>
##SUBTASK, Checking [ Nullable ] test.intrinsic.qualified.Outer1.Bad4.get(test.intrinsic.qualified.Outer1,test.intrinsic.qualified.Outer1)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad11.<clinit>
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XGood5.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.qualified.Outer1.Bad2a.Bad2a()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad12.XBad12()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.qualified.Outer1.Bad4.<clinit>
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XGood6.XGood6()
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad15.XBad15()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad2.m(test.write.receiver.implicit.X,test.write.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.qualified.Outer1.Bad5.Bad5()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad2.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.formals.XBad2.m(test.read.formals.X,test.read.formals.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad3.XBad3()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.qualified.Outer1.Bad2a.get(test.read.qualified.Outer1,test.read.qualified.Outer1)
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad12.m(test.write.formals.X,test.write.formals.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XGood6.m(test.write.receiver.qualified.X,test.write.receiver.qualified.X)
##SUBTASK, Checking [ Nullable ] test.intrinsic.qualified.Outer1.Bad5.get(test.intrinsic.qualified.Outer1,test.intrinsic.qualified.Outer1)
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad15.m(test.write.receiver.explicit.X,test.write.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.qualified.Outer1.Bad2a.<clinit>
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad12.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XGood6.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad15.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad13.XBad13()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.qualified.Outer1.Bad5.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad3.m(test.write.receiver.implicit.X,test.write.receiver.implicit.X)
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad16.XBad16()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.qualified.Outer1.Bad2b.Bad2b()
##SUBTASK, Checking [ Nullable ] test.intrinsic.qualified.Outer1.Outer2.Outer2()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XGood4.XGood4()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad3.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad4.XBad4()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad13.m(test.write.formals.X,test.write.formals.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad16.m(test.write.receiver.qualified.X,test.write.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad13.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XGood4.m(test.write.receiver.explicit.X,test.write.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.qualified.Outer1.Outer2.Good3.Good3()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad14.XBad14()
##SUBTASK, Checking [ Nullable ] test.read.qualified.Outer1.Bad2b.get(test.read.qualified.Outer1,test.read.qualified.Outer1)
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad16.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad4.m(test.write.receiver.implicit.X,test.write.receiver.implicit.X)
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XGood4.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad17.XBad17()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.qualified.Outer1.Bad2b.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad4.<clinit>
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XGood5.XGood5()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.qualified.Outer1.Bad2c.Bad2c()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad5.XBad5()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.qualified.Outer1.Outer2.Good3.get(test.intrinsic.qualified.Outer1,test.intrinsic.qualified.Outer1)
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad14.m(test.write.formals.X,test.write.formals.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad17.m(test.write.receiver.qualified.X,test.write.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.qualified.Outer1.Outer2.Good3.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad14.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XGood5.m(test.write.receiver.explicit.X,test.write.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad17.<clinit>
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad15.XBad15()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad5.m(test.write.receiver.implicit.X,test.write.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.qualified.Outer1.Bad2c.get(test.read.qualified.Outer1,test.read.qualified.Outer1)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.qualified.Outer1.Outer2.Bad6.Bad6()
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XGood5.<clinit>
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad18.XBad18()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad5.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XGood6.XGood6()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad6.XBad6()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.qualified.Outer1.Bad2c.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.qualified.Outer1.Bad2d.Bad2d()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad15.m(test.write.formals.X,test.write.formals.X)
##SUBTASK, Checking [ Nullable ] test.intrinsic.qualified.Outer1.Outer2.Bad6.get(test.intrinsic.qualified.Outer1,test.intrinsic.qualified.Outer1)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad18.m(test.write.receiver.qualified.X,test.write.receiver.qualified.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.qualified.Outer1.Outer2.Bad6.<clinit>
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad15.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.qualified.XBad18.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XGood3.XGood3()
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XGood6.m(test.write.receiver.explicit.X,test.write.receiver.explicit.X)
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad6.m(test.write.receiver.implicit.X,test.write.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.qualified.Outer1.Bad2d.get(test.read.qualified.Outer1,test.read.qualified.Outer1)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XGood6.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.qualified.Outer1.Bad2d.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad16.XBad16()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.qualified.Outer1.Bad3.Bad3()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.qualified.Outer1.Outer2.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.qualified.Outer1.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XGood3.m(test.write.formals.X,test.write.formals.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XGood3.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.qualified.Outer1.Bad3.get(test.read.qualified.Outer1,test.read.qualified.Outer1)
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad16.XBad16()
##SUBTASK, Checking [ Nullable ] test.intrinsic.qualified.Outer1.Outer1()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.qualified.Outer1.Bad3.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.qualified.X.X(test.intrinsic.qualified.Outer1)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.qualified.Outer1.Bad4.Bad4()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad16.m(test.write.formals.X,test.write.formals.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.qualified.Outer1.Bad4.get(test.read.qualified.Outer1,test.read.qualified.Outer1)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad6.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad16.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XGood4.XGood4()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.qualified.X.get(test.intrinsic.qualified.Outer1,test.intrinsic.qualified.Outer1)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad16.m(test.write.receiver.explicit.X,test.write.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.qualified.X.<clinit>
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad7.XBad7()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.qualified.Outer1.C.C()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.qualified.Outer1.Bad4.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.qualified.Outer1.Bad5.Bad5()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XGood4.m(test.write.formals.X,test.write.formals.X)
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.C.C()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XGood4.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad17.XBad17()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad7.m(test.write.receiver.implicit.X,test.write.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad16.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad17.XBad17()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad17.m(test.write.formals.X,test.write.formals.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad7.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.qualified.Outer1.C.get(test.intrinsic.qualified.Outer1,test.intrinsic.qualified.Outer1)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad8.XBad8()
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad17.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.C.m1(test.write.staticlocks.simple.C,test.write.staticlocks.simple.C,test.write.staticlocks.simple.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.qualified.Outer1.C.get2(test.intrinsic.qualified.Outer1,test.intrinsic.qualified.Outer1)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.C.m2(test.write.staticlocks.simple.C,test.write.staticlocks.simple.C,test.write.staticlocks.simple.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.qualified.Outer1.C.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.C.m3(test.write.staticlocks.simple.C)
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad17.m(test.write.receiver.explicit.X,test.write.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.qualified.Outer1.Bad1.Bad1()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad17.<clinit>
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.C.m4(test.write.staticlocks.simple.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad8.m(test.write.receiver.implicit.X,test.write.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad18.XBad18()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.C.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad8.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad18.XBad18()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.qualified.Outer1.Bad1.get2(test.intrinsic.qualified.Outer1,test.intrinsic.qualified.Outer1)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.qualified.Outer1.Bad1.<clinit>
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad9.XBad9()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.qualified.Outer1.Good1.Good1()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad18.m(test.write.formals.X,test.write.formals.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad18.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad19.XBad19()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.Good1.Good1()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad9.m(test.write.receiver.implicit.X,test.write.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.qualified.Outer1.Good1.get(test.intrinsic.qualified.Outer1,test.intrinsic.qualified.Outer1)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad9.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad10.XBad10()
##SUBTASK, Checking [ Nullable ] test.intrinsic.qualified.Outer1.Good1.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad19.m(test.write.formals.X,test.write.formals.X)
##SUBTASK, Checking [ Nullable ] test.intrinsic.qualified.Outer1.Good2.Good2()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad19.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad20.XBad20()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.Good1.m1(test.write.staticlocks.simple.C,test.write.staticlocks.simple.C,test.write.staticlocks.simple.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.Good1.m2(test.write.staticlocks.simple.C,test.write.staticlocks.simple.C,test.write.staticlocks.simple.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.qualified.Outer1.Good2.get(test.intrinsic.qualified.Outer1,test.intrinsic.qualified.Outer1)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.Good1.m3(test.write.staticlocks.simple.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad1.m(test.write.staticlocks.simple.X,test.write.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad10.m(test.write.receiver.implicit.X,test.write.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad1.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.Good1.m4(test.write.staticlocks.simple.C)
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad2.XBad2()
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad10.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad18.m(test.write.receiver.explicit.X,test.write.receiver.explicit.X)
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XGood1.XGood1()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.Good1.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.explicit.XBad18.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.Bad1.Bad1()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.C.C()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad2.m(test.write.staticlocks.simple.X,test.write.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XGood1.m(test.write.receiver.implicit.X,test.write.receiver.implicit.X)
##SUBTASK, Checking [ Nullable ] test.read.qualified.Outer1.Bad5.get(test.read.qualified.Outer1,test.read.qualified.Outer1)
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad20.m(test.write.formals.X,test.write.formals.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad2.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad3.XBad3()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad20.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.Bad1.m1(test.write.staticlocks.simple.C,test.write.staticlocks.simple.C,test.write.staticlocks.simple.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad21.XBad21()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.Bad1.m3(test.write.staticlocks.simple.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.Bad1.m4(test.write.staticlocks.simple.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.Bad1.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad3.m(test.write.staticlocks.simple.X,test.write.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.Good2a.Good2a()
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.C.m1(test.intrinsic.staticlocks.qualified.C,test.intrinsic.staticlocks.qualified.C,test.intrinsic.staticlocks.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad21.m(test.write.formals.X,test.write.formals.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad3.<clinit>
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XGood1.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad4.XBad4()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad21.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XGood2.XGood2()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad22.XBad22()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.Good2a.m1(test.write.staticlocks.simple.C,test.write.staticlocks.simple.C,test.write.staticlocks.simple.C)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.Good2a.<clinit>
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad4.m(test.write.staticlocks.simple.X,test.write.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.Good2n.Good2n()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad22.m(test.write.formals.X,test.write.formals.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XGood2.m(test.write.receiver.implicit.X,test.write.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad22.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XGood2.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad23.XBad23()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XGood3.XGood3()
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.C.m2(test.intrinsic.staticlocks.qualified.C,test.intrinsic.staticlocks.qualified.C,test.intrinsic.staticlocks.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad4.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.Good2n.m1(test.write.staticlocks.simple.C,test.write.staticlocks.simple.C,test.write.staticlocks.simple.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad5.XBad5()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.C.m3(test.intrinsic.staticlocks.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.Good2n.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad23.m(test.write.formals.X,test.write.formals.X)
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.C.m4(test.intrinsic.staticlocks.qualified.C)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XGood3.m(test.write.receiver.implicit.X,test.write.receiver.implicit.X)
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.C.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.qualified.Outer1.Bad5.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XGood3.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.Good3a.Good3a()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad23.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad5.m(test.write.staticlocks.simple.X,test.write.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad24.XBad24()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad5.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad6.XBad6()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.Good3a.m1(test.write.staticlocks.simple.C,test.write.staticlocks.simple.C,test.write.staticlocks.simple.C)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad24.m(test.write.formals.X,test.write.formals.X)
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.Good1.Good1()
##SUBTASK, Checking [ Nullable ] test.read.qualified.Outer1.Outer2.Outer2()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.formals.XBad24.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad6.m(test.write.staticlocks.simple.X,test.write.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.C.C()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad6.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad7.XBad7()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.qualified.Outer1.Outer2.Good3.Good3()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.Good1.m1(test.intrinsic.staticlocks.qualified.C,test.intrinsic.staticlocks.qualified.C,test.intrinsic.staticlocks.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.Good1.m2(test.intrinsic.staticlocks.qualified.C,test.intrinsic.staticlocks.qualified.C,test.intrinsic.staticlocks.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.Good3a.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad11.XBad11()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.Good3b.Good3b()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad7.m(test.write.staticlocks.simple.X,test.write.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.Good1.m3(test.intrinsic.staticlocks.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad7.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.Good1.m4(test.intrinsic.staticlocks.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.Good1.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.Bad1.Bad1()
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad11.m(test.write.receiver.implicit.X,test.write.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad8.XBad8()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad11.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad12.XBad12()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.Good3b.m1(test.write.staticlocks.simple.C,test.write.staticlocks.simple.C,test.write.staticlocks.simple.C)
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.C.m1(test.read.receiver.explicit.C,test.read.receiver.explicit.C,test.read.receiver.explicit.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.Good3b.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.C.m2(test.read.receiver.explicit.C,test.read.receiver.explicit.C,test.read.receiver.explicit.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.Bad2.Bad2()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad8.m(test.write.staticlocks.simple.X,test.write.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.Bad1.m1(test.intrinsic.staticlocks.qualified.C,test.intrinsic.staticlocks.qualified.C,test.intrinsic.staticlocks.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad12.m(test.write.receiver.implicit.X,test.write.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.C.m3(test.read.receiver.explicit.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad8.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.C.m4(test.read.receiver.explicit.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad9.XBad9()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad12.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.C.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad13.XBad13()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.Bad2.m1(test.write.staticlocks.simple.C,test.write.staticlocks.simple.C,test.write.staticlocks.simple.C)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.Bad2.<clinit>
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.Good1.Good1()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.Bad1.m3(test.intrinsic.staticlocks.qualified.C)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad9.m(test.write.staticlocks.simple.X,test.write.staticlocks.simple.X)
##SUBTASK, Checking [ Nullable ] test.intrinsic.staticlocks.qualified.Bad1.m4(test.intrinsic.staticlocks.qualified.C)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad9.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.X.X()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad10.XBad10()
##SUBTASK, Checking [ Nullable ] test.read.qualified.Outer1.Outer2.Good3.get(test.read.qualified.Outer1,test.read.qualified.Outer1)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad13.m(test.write.receiver.implicit.X,test.write.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.qualified.Outer1.Outer2.Good3.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.Good1.m1(test.read.receiver.explicit.C,test.read.receiver.explicit.C,test.read.receiver.explicit.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.qualified.Outer1.Outer2.Bad6.Bad6()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad13.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.Good1.m2(test.read.receiver.explicit.C,test.read.receiver.explicit.C,test.read.receiver.explicit.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad14.XBad14()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad10.m(test.write.staticlocks.simple.X,test.write.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.Good1.m3(test.read.receiver.explicit.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad10.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad11.XBad11()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad14.m(test.write.receiver.implicit.X,test.write.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad14.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.Good1.m4(test.read.receiver.explicit.C)
##SUBTASK, Checking [ Nullable ] test.read.qualified.Outer1.Outer2.Bad6.get(test.read.qualified.Outer1,test.read.qualified.Outer1)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad15.XBad15()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.X.m(test.write.staticlocks.simple.X,test.write.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad11.m(test.write.staticlocks.simple.X,test.write.staticlocks.simple.X)
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.Good1.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.X.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad11.<clinit>
##SUBTASK, Checking [ Nullable ] test.read.qualified.Outer1.Outer2.Bad6.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad12.XBad12()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.Bad1.Bad1()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.qualified.Outer1.Outer2.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.qualified.Outer1.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad15.m(test.write.receiver.implicit.X,test.write.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad12.m(test.write.staticlocks.simple.X,test.write.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad12.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.Bad1.m1(test.read.receiver.explicit.C,test.read.receiver.explicit.C,test.read.receiver.explicit.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad13.XBad13()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.Bad1.m3(test.read.receiver.explicit.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad1.XBad1()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.Bad1.m4(test.read.receiver.explicit.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.Bad1.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.qualified.X.X(test.read.qualified.Outer1)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.Good2.Good2()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad13.m(test.write.staticlocks.simple.X,test.write.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad13.<clinit>
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad15.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XGood4.XGood4()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XGood1.XGood1()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.Good2.m1(test.read.receiver.explicit.C,test.read.receiver.explicit.C,test.read.receiver.explicit.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.Good2.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.Good3.Good3()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XGood1.m(test.write.staticlocks.simple.X,test.write.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.qualified.X.get(test.read.qualified.Outer1,test.read.qualified.Outer1)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XGood1.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XGood2.XGood2()
##SUBTASK, Checking [ Nullable ] test.read.qualified.X.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XGood4.m(test.write.receiver.implicit.X,test.write.receiver.implicit.X)
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.C.C()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XGood4.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.Good3.m1(test.read.receiver.explicit.C,test.read.receiver.explicit.C,test.read.receiver.explicit.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XGood5.XGood5()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.Good3.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.Bad2.Bad2()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XGood2.m(test.write.staticlocks.simple.X,test.write.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XGood2.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XGood3.XGood3()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XGood5.m(test.write.receiver.implicit.X,test.write.receiver.implicit.X)
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.C.m1(test.read.staticlocks.simple.C,test.read.staticlocks.simple.C,test.read.staticlocks.simple.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.Bad2.m1(test.read.receiver.explicit.C,test.read.receiver.explicit.C,test.read.receiver.explicit.C)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.C.m2(test.read.staticlocks.simple.C,test.read.staticlocks.simple.C,test.read.staticlocks.simple.C)
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XGood5.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.Bad2.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XGood6.XGood6()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.X.X()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XGood3.m(test.write.staticlocks.simple.X,test.write.staticlocks.simple.X)
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.C.m3(test.read.staticlocks.simple.C)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.C.m4(test.read.staticlocks.simple.C)
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XGood3.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad14.XBad14()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.C.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XGood6.m(test.write.receiver.implicit.X,test.write.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XGood6.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad16.XBad16()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.X.m(test.read.receiver.explicit.X,test.read.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad14.m(test.write.staticlocks.simple.X,test.write.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.X.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.Good1.Good1()
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad16.m(test.write.receiver.implicit.X,test.write.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad16.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad17.XBad17()
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad1.XBad1()
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.Good1.m1(test.read.staticlocks.simple.C,test.read.staticlocks.simple.C,test.read.staticlocks.simple.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.simple.Good1.m2(test.read.staticlocks.simple.C,test.read.staticlocks.simple.C,test.read.staticlocks.simple.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad17.m(test.write.receiver.implicit.X,test.write.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad14.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad15.XBad15()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad1.m(test.read.receiver.explicit.X,test.read.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad17.<clinit>
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad1.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad2.XBad2()
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad18.XBad18()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad15.m(test.write.staticlocks.simple.X,test.write.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad15.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad16.XBad16()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad2.m(test.read.receiver.explicit.X,test.read.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad18.m(test.write.receiver.implicit.X,test.write.receiver.implicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad2.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad3.XBad3()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.receiver.implicit.XBad18.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad16.m(test.write.staticlocks.simple.X,test.write.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.C.C()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad16.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad17.XBad17()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad3.m(test.read.receiver.explicit.X,test.read.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad3.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad4.XBad4()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad17.m(test.write.staticlocks.simple.X,test.write.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad17.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad18.XBad18()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.C.m1(test.read.staticlocks.qualified.C,test.read.staticlocks.qualified.C,test.read.staticlocks.qualified.C)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.C.m2(test.read.staticlocks.qualified.C,test.read.staticlocks.qualified.C,test.read.staticlocks.qualified.C)
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad4.m(test.read.receiver.explicit.X,test.read.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.C.m3(test.read.staticlocks.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad4.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad18.m(test.write.staticlocks.simple.X,test.write.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.C.m4(test.read.staticlocks.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad5.XBad5()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad18.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.C.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad19.XBad19()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad5.m(test.read.receiver.explicit.X,test.read.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad5.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad6.XBad6()
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad19.m(test.write.staticlocks.simple.X,test.write.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad19.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.Good1.Good1()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad20.XBad20()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad6.m(test.read.receiver.explicit.X,test.read.receiver.explicit.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad6.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad7.XBad7()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad20.m(test.write.staticlocks.simple.X,test.write.staticlocks.simple.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.write.staticlocks.simple.XBad20.<clinit>
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.Good1.m1(test.read.staticlocks.qualified.C,test.read.staticlocks.qualified.C,test.read.staticlocks.qualified.C)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.receiver.explicit.XBad7.m(test.read.receiver.explicit.X,test.read.receiver.explicit.X)
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.Good1.m2(test.read.staticlocks.qualified.C,test.read.staticlocks.qualified.C,test.read.staticlocks.qualified.C)
##SUBTASK_DONE
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.Good1.m3(test.read.staticlocks.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.Good1.m4(test.read.staticlocks.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.Good1.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.Bad1.Bad1()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.Bad1.m1(test.read.staticlocks.qualified.C,test.read.staticlocks.qualified.C,test.read.staticlocks.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.Bad1.m3(test.read.staticlocks.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.Bad1.m4(test.read.staticlocks.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.Bad1.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.Good2.Good2()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.Good2.m1(test.read.staticlocks.qualified.C,test.read.staticlocks.qualified.C,test.read.staticlocks.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.Good2.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.Good3.Good3()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.Good3.m1(test.read.staticlocks.qualified.C,test.read.staticlocks.qualified.C,test.read.staticlocks.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.Good3.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.Bad2.Bad2()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.Bad2.m1(test.read.staticlocks.qualified.C,test.read.staticlocks.qualified.C,test.read.staticlocks.qualified.C)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.Bad2.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.X.X()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.X.m(test.read.staticlocks.qualified.X,test.read.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.X.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad1.XBad1()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad1.m(test.read.staticlocks.qualified.X,test.read.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad1.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad2.XBad2()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad2.m(test.read.staticlocks.qualified.X,test.read.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad2.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad3.XBad3()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad3.m(test.read.staticlocks.qualified.X,test.read.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad3.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad4.XBad4()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad4.m(test.read.staticlocks.qualified.X,test.read.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad4.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad5.XBad5()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad5.m(test.read.staticlocks.qualified.X,test.read.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad5.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad6.XBad6()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad6.m(test.read.staticlocks.qualified.X,test.read.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad6.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad7.XBad7()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad7.m(test.read.staticlocks.qualified.X,test.read.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad7.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad8.XBad8()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad8.m(test.read.staticlocks.qualified.X,test.read.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad8.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad9.XBad9()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad9.m(test.read.staticlocks.qualified.X,test.read.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad9.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad10.XBad10()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad10.m(test.read.staticlocks.qualified.X,test.read.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad10.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad11.XBad11()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad11.m(test.read.staticlocks.qualified.X,test.read.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad11.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad12.XBad12()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad12.m(test.read.staticlocks.qualified.X,test.read.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad12.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad13.XBad13()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad13.m(test.read.staticlocks.qualified.X,test.read.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad13.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XGood1.XGood1()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XGood1.m(test.read.staticlocks.qualified.X,test.read.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XGood1.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XGood2.XGood2()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XGood2.m(test.read.staticlocks.qualified.X,test.read.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XGood2.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XGood3.XGood3()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XGood3.m(test.read.staticlocks.qualified.X,test.read.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XGood3.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad14.XBad14()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad14.m(test.read.staticlocks.qualified.X,test.read.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad14.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad15.XBad15()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad15.m(test.read.staticlocks.qualified.X,test.read.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad15.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad16.XBad16()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad16.m(test.read.staticlocks.qualified.X,test.read.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad16.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad17.XBad17()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad17.m(test.read.staticlocks.qualified.X,test.read.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad17.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad18.XBad18()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad18.m(test.read.staticlocks.qualified.X,test.read.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad18.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad19.XBad19()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad19.m(test.read.staticlocks.qualified.X,test.read.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad19.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad20.XBad20()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad20.m(test.read.staticlocks.qualified.X,test.read.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad20.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad21.XBad21()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad21.m(test.read.staticlocks.qualified.X,test.read.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad21.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad22.XBad22()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad22.m(test.read.staticlocks.qualified.X,test.read.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad22.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad23.XBad23()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad23.m(test.read.staticlocks.qualified.X,test.read.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad23.<clinit>
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad24.XBad24()
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad24.m(test.read.staticlocks.qualified.X,test.read.staticlocks.qualified.X)
##SUBTASK_DONE
##SUBTASK, Checking [ Nullable ] test.read.staticlocks.qualified.XBad24.<clinit>
##SUBTASK_DONE
##WORK, 1
##SUBTASK_DONE
##SUBTASK, Cleaning up after analysis
Cleaning up after analysis
[GC (System.gc())  160992K->82497K(200192K), 0.0243210 secs]
[Full GC (System.gc())  82497K->57148K(200192K), 0.2236500 secs]
##WORK, 1
##SUBTASK_DONE
Updating consistency proof
##SUBTASK, Updating consistency proof
Exporting results to TestRequiresLockOver-2015.06.23-at-15.17.49.875
##SUBTASK, Exporting results to TestRequiresLockOver-2015.06.23-at-15.17.49.875
Creating snapshot: /Users/aarong/Work/Eclipse-Workspaces/Eclipse-luna/Fluid Regression/.jsure-data/TestRequiresLockOver-2015.06.23-at-15.17.49.875/running_or_crashed_sea_snapshot.xml.gz
Done in 6417 ms.
ConcurrencyDetector	: 87 ms
ThreadEffectsModule	: 49 ms
StructureAnalysis	: 2 ms
ParameterizedTypeAnalysis	: 44 ms
EqualityAnalysis	: 50 ms
LayersAnalysis	: 496 ms
UtilityAnalysis	: 5 ms
SingletonAnalysis	: 4 ms
LockAnalysis	: 814 ms
EffectsAnalysis	: 93 ms
UniquenessAnalysisModule	: 0 ms
NullablePreprocessorModule	: 75 ms
[GC (Allocation Failure)  154940K->59344K(205824K), 0.0046330 secs]
NullableModule2	: 2118 ms
[2015-06-23 15:17:57    INFO] partial bindings = 21220 (in method edu.cmu.cs.fluid.java.bind.AbstractJavaBinder.printStats(-) thread "main")
[2015-06-23 15:17:57    INFO] full bindings = 8217 (in method edu.cmu.cs.fluid.java.bind.AbstractJavaBinder.printStats(-) thread "main")
cached = 0
totalT = 0
#Performance data for TestRequiresLockOverride
#Tue Jun 23 15:17:57 EDT 2015
jsure.Add.required=0
jsure.All.analyses=1222
jsure.Binding.before.canon=296
jsure.Binding.full.time=1702
jsure.Binding.partial.time=1006
jsure.Bindings.full=8217
jsure.Bindings.partial=21220
jsure.Canonicalization=976
jsure.Cleanup=135
jsure.Destroy.time=67
jsure.Drop.creation=15
jsure.Find.canon.time=27
jsure.Parsing=1064
jsure.Promise.parsing=590
jsure.Promise.scrubbing=1630
jsure.Sea.export=670
jsure.Sea.update=115
jsure.Total.JSure.time=6417
jsure.Total.blocks=1481
jsure.Total.canonical=24029
jsure.Total.decls=4069
jsure.Total.destroyed=6155
jsure.Total.gced=0
jsure.Total.loc=7369
jsure.Total.nodes=102153
jsure.Total.stmts=2151
jsure.Total.try.destroyed=6155
jsure.analysis.ConcurrencyDetector=87
jsure.analysis.EffectsAnalysis=93
jsure.analysis.EqualityAnalysis=50
jsure.analysis.LayersAnalysis=496
jsure.analysis.LockAnalysis=814
jsure.analysis.NullableModule2=2118
jsure.analysis.NullablePreprocessorModule=75
jsure.analysis.ParameterizedTypeAnalysis=44
jsure.analysis.SingletonAnalysis=4
jsure.analysis.StructureAnalysis=2
jsure.analysis.ThreadEffectsModule=49
jsure.analysis.UniquenessAnalysisModule=0
jsure.analysis.UtilityAnalysis=5
jsure.num.threads=8
Javac making log: AnnotationRules
##DONE
Renaming snapshot: /Users/aarong/Work/Eclipse-Workspaces/Eclipse-luna/Fluid Regression/.jsure-data/TestRequiresLockOver-2015.06.23-at-15.17.49.875/sea_snapshot.xml.gz
Done with JSure!
Scanning complete (7500 ms)
No socket to close
Closing std streams
Process result after waiting = 0
